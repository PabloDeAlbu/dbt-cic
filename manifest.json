{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.4", "generated_at": "2025-01-28T17:10:15.662532Z", "invocation_id": "ea34b482-bfa4-4830-8557-5d8319eec95c", "env": {}, "project_name": "dbt_unlp", "project_id": "d2494b426e41aa6c5a949bf2dd42b914", "user_id": "fea1d844-66aa-4a30-b633-7994d41e3f15", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.dbt_unlp.raw_resourcetype_coar": {"database": "dw_cic", "schema": "stg_base", "name": "raw_resourcetype_coar", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/coar/raw_resourcetype_coar.sql", "original_file_path": "models/01_base/coar/raw_resourcetype_coar.sql", "unique_id": "model.dbt_unlp.raw_resourcetype_coar", "fqn": ["dbt_unlp", "01_base", "coar", "raw_resourcetype_coar"], "alias": "raw_resourcetype_coar", "checksum": {"name": "sha256", "checksum": "2d83e960293a55c1e4fec0236c0b4e27ec0063da14dc8d8bc3534fe8c58e2020"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.0995486, "relation_name": "\"dw_cic\".\"stg_base\".\"raw_resourcetype_coar\"", "raw_code": "WITH base as (\n    SELECT \n        resourcetype_id,\n        label,\n        parent_label_1,\n        parent_label_2,\n        parent_label_3,\n        label_es,\n        {{ dbt_date.today() }} as load_datetime\n    FROM {{ref('seed_resourcetype_coar')}}\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "seed_resourcetype_coar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.today"], "nodes": ["seed.dbt_unlp.seed_resourcetype_coar"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.map_resourcetype_coar2worktype_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "map_resourcetype_coar2worktype_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/coar/map_resourcetype_coar2worktype_openalex.sql", "original_file_path": "models/01_base/coar/map_resourcetype_coar2worktype_openalex.sql", "unique_id": "model.dbt_unlp.map_resourcetype_coar2worktype_openalex", "fqn": ["dbt_unlp", "01_base", "coar", "map_resourcetype_coar2worktype_openalex"], "alias": "map_resourcetype_coar2worktype_openalex", "checksum": {"name": "sha256", "checksum": "81fdfd9b7fc11b2c0a9e1094c1c074cfcfbec7d0fe76bcfd68f7d17a6e722f48"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.108229, "relation_name": "\"dw_cic\".\"stg_base\".\"map_resourcetype_coar2worktype_openalex\"", "raw_code": "WITH base as (\n    SELECT \n        worktype,\n        label,\n        resourcetype_id,\n        label_es,\n        {{ dbt_date.today() }} as load_datetime\n    FROM {{ref('seed_resourcetype_coar2worktype_openalex')}}\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "seed_resourcetype_coar2worktype_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.today"], "nodes": ["seed.dbt_unlp.seed_resourcetype_coar2worktype_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_openaire_researchproduct2relevantdate": {"database": "dw_cic", "schema": "stg_base", "name": "base_openaire_researchproduct2relevantdate", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/relevantdate/base_openaire_researchproduct2relevantdate.sql", "original_file_path": "models/01_base/openaire/researchproduct/relevantdate/base_openaire_researchproduct2relevantdate.sql", "unique_id": "model.dbt_unlp.base_openaire_researchproduct2relevantdate", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "relevantdate", "base_openaire_researchproduct2relevantdate"], "alias": "base_openaire_researchproduct2relevantdate", "checksum": {"name": "sha256", "checksum": "b90698ab44587f7e6ccd788270d78704a907a343ba7e7a9d59ed42866880deab"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.1371849, "relation_name": "\"dw_cic\".\"stg_base\".\"base_openaire_researchproduct2relevantdate\"", "raw_code": "{{ config(materialized='table') }}\n\nwith source as (\n      select * from {{ source('openaire', 'researchproduct2relevantdate') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"dri:objIdentifier\") }} as researchproduct_id,\n        {{ adapter.quote(\"@classid\") }} as date_id,\n        {# {{ adapter.quote(\"@classname\") }}, #}\n        {# {{ adapter.quote(\"@schemeid\") }}, #}\n        {# {{ adapter.quote(\"@schemename\") }}, #}\n        {{ adapter.quote(\"#text\") }} as date_text,\n        {{ adapter.quote(\"@inferred\") }} as is_inferred,\n        {{ adapter.quote(\"@provenanceaction\") }} as provenanceaction,\n        {{ adapter.quote(\"@trust\") }} as trust,\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openaire", "researchproduct2relevantdate"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire.researchproduct2relevantdate"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_researchproduct2relevantdate": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_researchproduct2relevantdate", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/relevantdate/openaire_researchproduct2relevantdate.sql", "original_file_path": "models/01_base/openaire/researchproduct/relevantdate/openaire_researchproduct2relevantdate.sql", "unique_id": "model.dbt_unlp.openaire_researchproduct2relevantdate", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "relevantdate", "openaire_researchproduct2relevantdate"], "alias": "openaire_researchproduct2relevantdate", "checksum": {"name": "sha256", "checksum": "409fb76906958e53ead21d0783b5f7c373000c90a59e42254338fe5ea4557e0d"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.1537035, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_researchproduct2relevantdate\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        {{ dbt_date.convert_timezone(\"date_text\") }} as date_text,\n        date_id,\n        is_inferred,\n        provenanceaction,\n        trust,\n        load_datetime\n    FROM {{ ref('base_openaire_researchproduct2relevantdate') }}\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2relevantdate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone"], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2relevantdate"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_openaire_researchproduct2creator": {"database": "dw_cic", "schema": "stg_base", "name": "base_openaire_researchproduct2creator", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/creator/base_openaire_researchproduct2creator.sql", "original_file_path": "models/01_base/openaire/researchproduct/creator/base_openaire_researchproduct2creator.sql", "unique_id": "model.dbt_unlp.base_openaire_researchproduct2creator", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "creator", "base_openaire_researchproduct2creator"], "alias": "base_openaire_researchproduct2creator", "checksum": {"name": "sha256", "checksum": "5d375f67df460b258cd65f70a821516e90e9ecbd1c87c95fefa949e0f8e874b9"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.1754699, "relation_name": "\"dw_cic\".\"stg_base\".\"base_openaire_researchproduct2creator\"", "raw_code": "{{ config(materialized='table') }}\n\nwith source as (\n      select * from {{ source('openaire', 'researchproduct2creator') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"dri:objIdentifier\") }} as researchproduct_id,\n        {{ adapter.quote(\"@rank\") }} as rank,\n        {{ adapter.quote(\"@name\") }} as name,\n        {{ adapter.quote(\"@surname\") }} as surname,\n        {{ adapter.quote(\"#text\") }} as text,\n        {{ adapter.quote(\"@orcid\") }} as orcid,\n        {{ adapter.quote(\"@orcid_pending\") }} as orcid_pending,\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openaire", "researchproduct2creator"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire.researchproduct2creator"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_researchproduct2creator": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_researchproduct2creator", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/creator/openaire_researchproduct2creator.sql", "original_file_path": "models/01_base/openaire/researchproduct/creator/openaire_researchproduct2creator.sql", "unique_id": "model.dbt_unlp.openaire_researchproduct2creator", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "creator", "openaire_researchproduct2creator"], "alias": "openaire_researchproduct2creator", "checksum": {"name": "sha256", "checksum": "6795b2381a82288e6548f7c857b694404e7ec476269f5eadabf15966f0c5ad8f"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.192071, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_researchproduct2creator\"", "raw_code": "{{ config(materialized='table') }}\n\nwith source as (\n      select * from {{ ref('base_openaire_researchproduct2creator') }}\n),\nrenamed as (\n    select\n        researchproduct_id,\n        rank,\n        name,\n        surname,\n        text,\n        orcid,\n        orcid_pending,\n        load_datetime\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2creator", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2creator"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2handle": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2handle", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2handle.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2handle.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2handle", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "norm_openaire_researchproduct2handle"], "alias": "norm_openaire_researchproduct2handle", "checksum": {"name": "sha256", "checksum": "b5cef8594709e65f16ca4b013ef7a2c92e8f068a1a929912f6e7aef42ebdb8fb"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.197307, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2handle\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        pid_text,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2pid') }} rp\n    WHERE pid_id = 'handle'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2doi": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2doi", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2doi.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2doi.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2doi", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "norm_openaire_researchproduct2doi"], "alias": "norm_openaire_researchproduct2doi", "checksum": {"name": "sha256", "checksum": "6d4cec1af3e94d530fba7fdd5b2d1e75528e602551213ec3f28b93ebc0cd6c85"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2018664, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2doi\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        pid_text,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2pid') }} rp\n    WHERE pid_id = 'doi'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2mag": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2mag", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2mag.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2mag.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2mag", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "norm_openaire_researchproduct2mag"], "alias": "norm_openaire_researchproduct2mag", "checksum": {"name": "sha256", "checksum": "39b5efb55b063f73cd96d29306eb81c39a3c6e036c34aae680a2d3f8151541dc"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.205053, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2mag\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        pid_text,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2pid') }} rp\n    WHERE pid_id = 'mag_id'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2pmid": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2pmid", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2pmid.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2pmid.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2pmid", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "norm_openaire_researchproduct2pmid"], "alias": "norm_openaire_researchproduct2pmid", "checksum": {"name": "sha256", "checksum": "edea6943c12925c28563f65ae80f8a96ebe6b4541ca35cfe5c62d30734d1a5af"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.209075, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2pmid\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        pid_text,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2pid') }} rp\n    WHERE pid_id = 'pmid'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_openaire_researchproduct2pid": {"database": "dw_cic", "schema": "stg_base", "name": "base_openaire_researchproduct2pid", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/base_openaire_researchproduct2pid.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/base_openaire_researchproduct2pid.sql", "unique_id": "model.dbt_unlp.base_openaire_researchproduct2pid", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "base_openaire_researchproduct2pid"], "alias": "base_openaire_researchproduct2pid", "checksum": {"name": "sha256", "checksum": "02df0276b9fae0c50655d1f3cc9fc4c8f26309eb219bba463acde1454fea84e0"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2128286, "relation_name": "\"dw_cic\".\"stg_base\".\"base_openaire_researchproduct2pid\"", "raw_code": "{{ config(materialized='table') }}\n\nwith source as (\n      select * from {{ source('openaire', 'researchproduct2pid') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"dri:objIdentifier\") }} as researchproduct_id,\n        {{ adapter.quote(\"@classid\") }} as pid_id,\n        {{ adapter.quote(\"#text\") }} as pid_text,\n        {{ adapter.quote(\"load_datetime\") }}\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openaire", "researchproduct2pid"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire.researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_researchproduct2pid": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_researchproduct2pid", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/openaire_researchproduct2pid.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/openaire_researchproduct2pid.sql", "unique_id": "model.dbt_unlp.openaire_researchproduct2pid", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "openaire_researchproduct2pid"], "alias": "openaire_researchproduct2pid", "checksum": {"name": "sha256", "checksum": "219f4968e1a822ad0a399308d4c847826481adc0130be954d6e5801bf2630ef0"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2223887, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_researchproduct2pid\"", "raw_code": "{{ config(materialized='table') }}\n\n{% set identifiers = [\"doi\", \"pmid\", \"pmc\", \"arxiv\", \"handle\", \"mag\"] %}\n\nwith base as (\n    SELECT\n        researchproduct_id::varchar,\n        {{ dbt_date.convert_timezone(\"load_datetime\") }} as load_datetime,\n        -- Por cada identificador, creamos una columna espec\u00edfica\n        {%- for identifier in identifiers %}\n        (CASE WHEN pid_id = '{{ identifier }}' THEN pid_text ELSE 'NO DATA' END)::varchar AS {{ identifier }}\n        {%- if not loop.last %}, {% endif %}\n        {%- endfor %}\n    FROM {{ ref('base_openaire_researchproduct2pid') }}\n),\n\n\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone"], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2arxiv": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2arxiv", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2arxiv.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2arxiv.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2arxiv", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "norm_openaire_researchproduct2arxiv"], "alias": "norm_openaire_researchproduct2arxiv", "checksum": {"name": "sha256", "checksum": "7672f4132c382d7baae01c40b5b5a5e586089fff05f03689ca1a5e7e76fe1817"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2328808, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2arxiv\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        pid_text,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2pid') }} rp\n    WHERE pid_id = 'arXiv'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2pmc": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2pmc", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2pmc.sql", "original_file_path": "models/01_base/openaire/researchproduct/pid/norm_openaire_researchproduct2pmc.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2pmc", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "pid", "norm_openaire_researchproduct2pmc"], "alias": "norm_openaire_researchproduct2pmc", "checksum": {"name": "sha256", "checksum": "b9865d196173c9e469e801176ac3b896cfd97d96572da86c0dcb5770062ec436"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2360706, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2pmc\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        pid_text,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2pid') }} rp\n    WHERE pid_id = 'pmc'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2subject": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2subject", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2subject.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2subject.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2subject", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2subject"], "alias": "norm_openaire_researchproduct2subject", "checksum": {"name": "sha256", "checksum": "a67fbae3ff10487e2970d225d56a3aef3301017cf6728f1d03515e9533c32ced"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2389739, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2subject\"", "raw_code": "{{ config(materialized='table') }}\n\n{% set subject_id = [\"agrovoc\", \"ddc\", \"fos\", \"keyword\", \"lcsh\", \"sdg\", \"subjectmag\"] %}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        -- Por cada identificador, creamos una columna espec\u00edfica\n        {%- for identifier in subject_id %}\n        (CASE WHEN subject_id = '{{ identifier }}' THEN subject_text ELSE 'NO DATA' END) AS {{ identifier }}\n        {%- if not loop.last %}, {% endif %}\n        {%- endfor %}\n    FROM {{ ref('base_openaire_researchproduct2subject') }}\n),\n\n\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2ddc": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2ddc", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2ddc.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2ddc.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2ddc", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2ddc"], "alias": "norm_openaire_researchproduct2ddc", "checksum": {"name": "sha256", "checksum": "737ad4bd8304ec94ad1945485ec99a153df59d595f6c23a7fedf17fed548628d"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2494469, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2ddc\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        subject_text,\n        is_inferred,\n        provenanceaction,\n        trust,\n        inferenceprovenance,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2subject') }} rp\n    WHERE subject_id = 'ddc'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2agrovoc": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2agrovoc", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2agrovoc.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2agrovoc.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2agrovoc", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2agrovoc"], "alias": "norm_openaire_researchproduct2agrovoc", "checksum": {"name": "sha256", "checksum": "2715cea5294e1e3f4f234f54433c41a14d636c0ae40ac595e6e168ceacf1791e"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2528193, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2agrovoc\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        subject_text,\n        is_inferred,\n        provenanceaction,\n        trust,\n        inferenceprovenance,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2subject') }} rp\n    WHERE subject_id = 'agrovoc'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2sdg": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2sdg", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2sdg.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2sdg.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2sdg", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2sdg"], "alias": "norm_openaire_researchproduct2sdg", "checksum": {"name": "sha256", "checksum": "dc82f7a9a84251afbd7e9fa1ef63b34ae33d895dbf0ac761d17e7f243239805d"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.255918, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2sdg\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        subject_text,\n        is_inferred,\n        provenanceaction,\n        trust,\n        inferenceprovenance,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2subject') }} rp\n    WHERE subject_id = 'SDG'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2keyword": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2keyword", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2keyword.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2keyword.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2keyword", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2keyword"], "alias": "norm_openaire_researchproduct2keyword", "checksum": {"name": "sha256", "checksum": "e4696bbb818a080388a017edf2e5bc6c783b1121ee8a7223008d671bf909f667"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.259989, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2keyword\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        subject_text,\n        is_inferred,\n        provenanceaction,\n        trust,\n        inferenceprovenance,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2subject') }} rp\n    WHERE subject_id = 'keyword'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2lcsh": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2lcsh", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2lcsh.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2lcsh.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2lcsh", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2lcsh"], "alias": "norm_openaire_researchproduct2lcsh", "checksum": {"name": "sha256", "checksum": "b51f39f057be38ceabcde45fc85e58f6db4e9930331bdb7015aa3d3c99f627a4"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2628496, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2lcsh\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        subject_text,\n        is_inferred,\n        provenanceaction,\n        trust,\n        inferenceprovenance,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2subject') }} rp\n    WHERE subject_id = 'lcsh'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2subjectmag": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2subjectmag", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2subjectmag.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2subjectmag.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2subjectmag", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2subjectmag"], "alias": "norm_openaire_researchproduct2subjectmag", "checksum": {"name": "sha256", "checksum": "d0775531ee96fa512c751759492a4e9a742f2cbea4cc6d67e5d23b8a6d932692"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2658837, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2subjectmag\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        subject_text,\n        is_inferred,\n        provenanceaction,\n        trust,\n        inferenceprovenance,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2subject') }} rp\n    WHERE subject_id = 'MAG'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_openaire_researchproduct2subject": {"database": "dw_cic", "schema": "stg_base", "name": "base_openaire_researchproduct2subject", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/base_openaire_researchproduct2subject.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/base_openaire_researchproduct2subject.sql", "unique_id": "model.dbt_unlp.base_openaire_researchproduct2subject", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "base_openaire_researchproduct2subject"], "alias": "base_openaire_researchproduct2subject", "checksum": {"name": "sha256", "checksum": "00c9e47a185716ce6b76ec84e228b49ce9a6c802409ade0cdac093c221489ccc"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.268769, "relation_name": "\"dw_cic\".\"stg_base\".\"base_openaire_researchproduct2subject\"", "raw_code": "{{ config(materialized='table') }}\n\nwith source as (\n      select * from {{ source('openaire', 'researchproduct2subject') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"dri:objIdentifier\") }} as researchproduct_id,\n        {{ adapter.quote(\"@classid\") }} as subject_id,\n        {# {{ adapter.quote(\"@classname\") }}, #}\n        {# {{ adapter.quote(\"@schemeid\") }}, #}\n        {# {{ adapter.quote(\"@schemename\") }}, #}\n        {{ adapter.quote(\"@inferred\") }} as is_inferred,\n        {{ adapter.quote(\"@provenanceaction\") }} as provenanceaction,\n        {{ adapter.quote(\"@trust\") }} as trust,\n        {{ adapter.quote(\"#text\") }} as subject_text,\n        {{ adapter.quote(\"@inferenceprovenance\") }} as inferenceprovenance,\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openaire", "researchproduct2subject"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire.researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_openaire_researchproduct2fos": {"database": "dw_cic", "schema": "stg_base", "name": "norm_openaire_researchproduct2fos", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2fos.sql", "original_file_path": "models/01_base/openaire/researchproduct/subject/norm_openaire_researchproduct2fos.sql", "unique_id": "model.dbt_unlp.norm_openaire_researchproduct2fos", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "subject", "norm_openaire_researchproduct2fos"], "alias": "norm_openaire_researchproduct2fos", "checksum": {"name": "sha256", "checksum": "b013e33e474d4cb4b1cc08b5a407eded04712e41f74916bbebcaa6407332f0bd"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2794044, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_openaire_researchproduct2fos\"", "raw_code": "{{ config(materialized='table') }}\n\nwith base as (\n    SELECT\n        researchproduct_id,\n        subject_text,\n        is_inferred,\n        provenanceaction,\n        trust,\n        inferenceprovenance,\n        load_datetime\n    FROM \n        {{ ref('base_openaire_researchproduct2subject') }} rp\n    WHERE subject_id = 'FOS'\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "base_openaire_researchproduct2subject", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.base_openaire_researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.mid_item_dateissued_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "mid_item_dateissued_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/mid_item_dateissued_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/mid_item_dateissued_dspacedb.sql", "unique_id": "model.dbt_unlp.mid_item_dateissued_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "mid_item_dateissued_dspacedb"], "alias": "mid_item_dateissued_dspacedb", "checksum": {"name": "sha256", "checksum": "184969e6351e74a3454fcbed5b9cf7bd856b57256f7ce302ccafc1d3701d3ee7"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2846308, "relation_name": "\"dw_cic\".\"stg_base\".\"mid_item_dateissued_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT \n        mv.uuid,\n        {{ dbt_date.convert_timezone(str_to_date(\"text_value\")) }} as dateissued,\n        load_datetime\n    FROM {{ref('mid_item_metadatavalue_dspacedb')}} mv \n    WHERE \n        mv.short_id = 'dcterms' AND \n        mv.element = 'issued' AND \n        qualifier IS NULL        \n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "mid_item_metadatavalue_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_unlp.str_to_date", "macro.dbt_date.convert_timezone"], "nodes": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.mid_item_type_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "mid_item_type_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/mid_item_type_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/mid_item_type_dspacedb.sql", "unique_id": "model.dbt_unlp.mid_item_type_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "mid_item_type_dspacedb"], "alias": "mid_item_type_dspacedb", "checksum": {"name": "sha256", "checksum": "16be4e929b2e585bb894d36ae70c88bda749952d5fbeb5ddd6359670da436f2d"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.29374, "relation_name": "\"dw_cic\".\"stg_base\".\"mid_item_type_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT \n        mv.uuid,\n        text_value as type,\n        load_datetime\n    FROM {{ref('mid_item_metadatavalue_dspacedb')}} mv \n    WHERE \n        mv.short_id = 'dc' AND \n        mv.element = 'type' AND\n        mv.qualifier IS NULL\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "mid_item_metadatavalue_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.mid_item_title_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "mid_item_title_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/mid_item_title_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/mid_item_title_dspacedb.sql", "unique_id": "model.dbt_unlp.mid_item_title_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "mid_item_title_dspacedb"], "alias": "mid_item_title_dspacedb", "checksum": {"name": "sha256", "checksum": "7d094c5293a6197f3562b2d0d3951d3ce64dba811f1f160fe57bfab64ae31b5c"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2967565, "relation_name": "\"dw_cic\".\"stg_base\".\"mid_item_title_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT \n        mv.uuid,\n        text_value as title,\n        text_lang as title_lang,\n        load_datetime\n    FROM {{ref('mid_item_metadatavalue_dspacedb')}} mv \n    WHERE \n        mv.short_id = 'dc' AND \n        mv.element = 'title' AND \n        mv.qualifier is NULL\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "mid_item_metadatavalue_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.mid_item_metadatavalue_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "mid_item_metadatavalue_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/mid_item_metadatavalue_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/mid_item_metadatavalue_dspacedb.sql", "unique_id": "model.dbt_unlp.mid_item_metadatavalue_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "mid_item_metadatavalue_dspacedb"], "alias": "mid_item_metadatavalue_dspacedb", "checksum": {"name": "sha256", "checksum": "a382ce874adee6601e65bd6537d4bd35eb4834a68032459f219707a4a1bf63c9"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.2999747, "relation_name": "\"dw_cic\".\"stg_base\".\"mid_item_metadatavalue_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT\n        i.uuid,\n        mv.metadata_value_id,\n        mv.metadata_field_id,\n        msr.short_id,\n        mfr.element,\n        mfr.qualifier,\n        mv.text_value,\n        mv.text_lang,\n        mv.place,\n        mv.authority,\n        mv.confidence,\n        mv.load_datetime\n    FROM {{ source('dspacedb', 'metadatavalue') }} mv\n    INNER JOIN {{ source('dspacedb', 'metadatafieldregistry') }} mfr ON mfr.metadata_field_id = mv.metadata_field_id\n    INNER JOIN {{ source('dspacedb', 'metadataschemaregistry') }} msr ON msr.metadata_schema_id = mfr.metadata_schema_id\n    INNER JOIN {{ source('dspacedb', 'item') }} i ON i.uuid = mv.dspace_object_id\n\n)\n\nSELECT * FROM base", "language": "sql", "refs": [], "sources": [["dspacedb", "metadatavalue"], ["dspacedb", "item"], ["dspacedb", "metadatafieldregistry"], ["dspacedb", "metadataschemaregistry"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.metadatavalue", "source.dbt_unlp.dspacedb.item", "source.dbt_unlp.dspacedb.metadatafieldregistry", "source.dbt_unlp.dspacedb.metadataschemaregistry"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.mid_item_dateaccessioned_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "mid_item_dateaccessioned_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/mid_item_dateaccessioned_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/mid_item_dateaccessioned_dspacedb.sql", "unique_id": "model.dbt_unlp.mid_item_dateaccessioned_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "mid_item_dateaccessioned_dspacedb"], "alias": "mid_item_dateaccessioned_dspacedb", "checksum": {"name": "sha256", "checksum": "74a7ad63f1b9ecfef590b0f17bdaab0355841cf567fa4a1c98b2c6bb003a6978"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3034, "relation_name": "\"dw_cic\".\"stg_base\".\"mid_item_dateaccessioned_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT \n        mv.uuid,\n        {{ dbt_date.convert_timezone(str_to_date(\"text_value\")) }} as dateissued,\n        load_datetime\n    FROM {{ref('mid_item_metadatavalue_dspacedb')}} mv \n    WHERE \n        mv.short_id = 'dc' AND \n        mv.element = 'date' AND \n        qualifier = 'accessioned'       \n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "mid_item_metadatavalue_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_unlp.str_to_date", "macro.dbt_date.convert_timezone"], "nodes": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.mid_item_handle_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "mid_item_handle_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/mid_item_handle_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/mid_item_handle_dspacedb.sql", "unique_id": "model.dbt_unlp.mid_item_handle_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "mid_item_handle_dspacedb"], "alias": "mid_item_handle_dspacedb", "checksum": {"name": "sha256", "checksum": "684e48d0b1517bb12f9e81256ded53169c91b1a9e5dda7275913b45352b0067e"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3125744, "relation_name": "\"dw_cic\".\"stg_base\".\"mid_item_handle_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT \n        mv.uuid,\n        text_value as handle,\n        load_datetime\n    FROM {{ref('mid_item_metadatavalue_dspacedb')}} mv \n    WHERE \n        mv.short_id = 'dc' AND \n        mv.element = 'identifier' AND \n        mv.qualifier = 'uri' AND\n        mv.text_value like '%handle%'\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "mid_item_metadatavalue_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.mid_item_doi_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "mid_item_doi_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/mid_item_doi_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/mid_item_doi_dspacedb.sql", "unique_id": "model.dbt_unlp.mid_item_doi_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "mid_item_doi_dspacedb"], "alias": "mid_item_doi_dspacedb", "checksum": {"name": "sha256", "checksum": "9bb591e9cb721a537105d925eedb2379f1427e241a60f4b53e7a98b56e8e775e"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3159244, "relation_name": "\"dw_cic\".\"stg_base\".\"mid_item_doi_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT \n        mv.uuid,\n        CONCAT('10.', split_part(text_value, '10.', 2))  as doi,\n        load_datetime\n    FROM {{ref('mid_item_metadatavalue_dspacedb')}} mv \n    WHERE \n        mv.short_id = 'dcterms' AND \n        mv.element = 'identifier' AND \n        mv.qualifier = 'other' AND\n        mv.text_value like '%10.%'\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "mid_item_metadatavalue_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_handle_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_handle_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_handle_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_handle_dspacedb.sql", "unique_id": "model.dbt_unlp.base_handle_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_handle_dspacedb"], "alias": "base_handle_dspacedb", "checksum": {"name": "sha256", "checksum": "15c13252a9b4c81bb7e72bb80bf11f9f4f2e50cc99a4dea48ef0ec69ac7ef264"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3189821, "relation_name": "\"dw_cic\".\"stg_base\".\"base_handle_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'handle') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"handle_id\") }},\n        {{ adapter.quote(\"handle\") }},\n        {{ adapter.quote(\"resource_type_id\") }},\n        {{ adapter.quote(\"resource_legacy_id\") }},\n        {{ adapter.quote(\"resource_id\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "handle"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.handle"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_community2community_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_community2community_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_community2community_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_community2community_dspacedb.sql", "unique_id": "model.dbt_unlp.base_community2community_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_community2community_dspacedb"], "alias": "base_community2community_dspacedb", "checksum": {"name": "sha256", "checksum": "c291470c98d61ff665e9934e7aa293dc099b3e8ca5a4b0dd663163cf73c8231c"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.328669, "relation_name": "\"dw_cic\".\"stg_base\".\"base_community2community_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'community2community') }}\n),\nrenamed as (\n    select\n        \n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "community2community"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.community2community"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_item_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_item_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_item_dspacedb.sql", "unique_id": "model.dbt_unlp.base_item_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_item_dspacedb"], "alias": "base_item_dspacedb", "checksum": {"name": "sha256", "checksum": "82614a98bb3a80097655427f8d26dd71acf8651fd95b85f90381d475ab5db5cd"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3320804, "relation_name": "\"dw_cic\".\"stg_base\".\"base_item_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'item') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"item_id\") }},\n        {{ adapter.quote(\"in_archive\") }},\n        {{ adapter.quote(\"withdrawn\") }},\n        {{ adapter.quote(\"last_modified\") }},\n        {{ adapter.quote(\"discoverable\") }},\n        {{ adapter.quote(\"uuid\") }},\n        {{ adapter.quote(\"submitter_id\") }},\n        {{ adapter.quote(\"owning_collection\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.item"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_bundle2bitstream_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_bundle2bitstream_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_bundle2bitstream_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_bundle2bitstream_dspacedb.sql", "unique_id": "model.dbt_unlp.base_bundle2bitstream_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_bundle2bitstream_dspacedb"], "alias": "base_bundle2bitstream_dspacedb", "checksum": {"name": "sha256", "checksum": "6a467bbe49888a4aea43084c56cf39701c2ff7022fda56d7ceccecf560ea43fd"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.343607, "relation_name": "\"dw_cic\".\"stg_base\".\"base_bundle2bitstream_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'bundle2bitstream') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"bitstream_order_legacy\") }},\n        {{ adapter.quote(\"bundle_id\") }},\n        {{ adapter.quote(\"bitstream_id\") }},\n        {{ adapter.quote(\"bitstream_order\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "bundle2bitstream"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.bundle2bitstream"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_doi_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_doi_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_doi_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_doi_dspacedb.sql", "unique_id": "model.dbt_unlp.base_doi_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_doi_dspacedb"], "alias": "base_doi_dspacedb", "checksum": {"name": "sha256", "checksum": "e50ff116d6086d37be2077e54d797bced017e1ddd949e6c0504ac3f1b8d9f41b"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3520343, "relation_name": "\"dw_cic\".\"stg_base\".\"base_doi_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'doi') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"doi_id\") }},\n        {{ adapter.quote(\"doi\") }},\n        {{ adapter.quote(\"resource_type_id\") }},\n        {{ adapter.quote(\"resource_id\") }},\n        {{ adapter.quote(\"status\") }},\n        {{ adapter.quote(\"dspace_object\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "doi"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.doi"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_bundle_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_bundle_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_bundle_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_bundle_dspacedb.sql", "unique_id": "model.dbt_unlp.base_bundle_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_bundle_dspacedb"], "alias": "base_bundle_dspacedb", "checksum": {"name": "sha256", "checksum": "b9b078250f4cf4926962ab0bde3eb8f2fd5224d123df6d8222bdd3d0d367da2c"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.361957, "relation_name": "\"dw_cic\".\"stg_base\".\"base_bundle_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'bundle') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"bundle_id\") }},\n        {{ adapter.quote(\"uuid\") }},\n        {{ adapter.quote(\"primary_bitstream_id\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "bundle"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.bundle"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_metadataschemaregistry_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_metadataschemaregistry_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_metadataschemaregistry_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_metadataschemaregistry_dspacedb.sql", "unique_id": "model.dbt_unlp.base_metadataschemaregistry_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_metadataschemaregistry_dspacedb"], "alias": "base_metadataschemaregistry_dspacedb", "checksum": {"name": "sha256", "checksum": "ee89ba1d6e04793d483ab5f2fa1c83cff12be05df7c672b01f66d017571727fe"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3698273, "relation_name": "\"dw_cic\".\"stg_base\".\"base_metadataschemaregistry_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'metadataschemaregistry') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"metadata_schema_id\") }},\n        {{ adapter.quote(\"namespace\") }},\n        {{ adapter.quote(\"short_id\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "metadataschemaregistry"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.metadataschemaregistry"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_community2collection_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_community2collection_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_community2collection_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_community2collection_dspacedb.sql", "unique_id": "model.dbt_unlp.base_community2collection_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_community2collection_dspacedb"], "alias": "base_community2collection_dspacedb", "checksum": {"name": "sha256", "checksum": "dbd0111327571a25440a709c9000c06d4449997f1ad2a553cfbec8f2e660bdfc"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.381507, "relation_name": "\"dw_cic\".\"stg_base\".\"base_community2collection_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'community2collection') }}\n),\nrenamed as (\n    select\n        \n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "community2collection"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.community2collection"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_community2item_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_community2item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_community2item_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_community2item_dspacedb.sql", "unique_id": "model.dbt_unlp.base_community2item_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_community2item_dspacedb"], "alias": "base_community2item_dspacedb", "checksum": {"name": "sha256", "checksum": "0f3d7a5032c432946aaded3e5f8f5f74c2c943f41e04b2b942587a09f43f5165"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3845932, "relation_name": "\"dw_cic\".\"stg_base\".\"base_community2item_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'communities2item') }}\n),\nrenamed as (\n    select\n        \n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "communities2item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.communities2item"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_community_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_community_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_community_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_community_dspacedb.sql", "unique_id": "model.dbt_unlp.base_community_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_community_dspacedb"], "alias": "base_community_dspacedb", "checksum": {"name": "sha256", "checksum": "0efb9b2cca27046434572443dc037040ec89bf8e0ddd887673d7cf71cb90800f"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3878593, "relation_name": "\"dw_cic\".\"stg_base\".\"base_community_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'community') }}\n),\nrenamed as (\n    select\n        \n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "community"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.community"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_communities2item_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_communities2item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_communities2item_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_communities2item_dspacedb.sql", "unique_id": "model.dbt_unlp.base_communities2item_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_communities2item_dspacedb"], "alias": "base_communities2item_dspacedb", "checksum": {"name": "sha256", "checksum": "0f3d7a5032c432946aaded3e5f8f5f74c2c943f41e04b2b942587a09f43f5165"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.3920963, "relation_name": "\"dw_cic\".\"stg_base\".\"base_communities2item_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'communities2item') }}\n),\nrenamed as (\n    select\n        \n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "communities2item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.communities2item"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_item2bundle_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_item2bundle_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_item2bundle_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_item2bundle_dspacedb.sql", "unique_id": "model.dbt_unlp.base_item2bundle_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_item2bundle_dspacedb"], "alias": "base_item2bundle_dspacedb", "checksum": {"name": "sha256", "checksum": "01b28ec81a44ee7d0543ee4f0417226e64abbd506f3babda73a2467679fc61e4"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.395696, "relation_name": "\"dw_cic\".\"stg_base\".\"base_item2bundle_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'item2bundle') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"bundle_id\") }},\n        {{ adapter.quote(\"item_id\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "item2bundle"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.item2bundle"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_bitstream_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_bitstream_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_bitstream_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_bitstream_dspacedb.sql", "unique_id": "model.dbt_unlp.base_bitstream_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_bitstream_dspacedb"], "alias": "base_bitstream_dspacedb", "checksum": {"name": "sha256", "checksum": "e46070c73da84be4dae11f5e8cb703dae4e2cbb541136ca51a42884d3a021db5"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.4041393, "relation_name": "\"dw_cic\".\"stg_base\".\"base_bitstream_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'bitstream') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"bitstream_id\") }},\n        {{ adapter.quote(\"bitstream_format_id\") }},\n        {{ adapter.quote(\"checksum\") }},\n        {{ adapter.quote(\"checksum_algorithm\") }},\n        {{ adapter.quote(\"internal_id\") }},\n        {{ adapter.quote(\"deleted\") }},\n        {{ adapter.quote(\"store_number\") }},\n        {{ adapter.quote(\"sequence_id\") }},\n        {{ adapter.quote(\"size_bytes\") }},\n        {{ adapter.quote(\"uuid\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "bitstream"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.bitstream"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_metadatavalue_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_metadatavalue_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_metadatavalue_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_metadatavalue_dspacedb.sql", "unique_id": "model.dbt_unlp.base_metadatavalue_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_metadatavalue_dspacedb"], "alias": "base_metadatavalue_dspacedb", "checksum": {"name": "sha256", "checksum": "7f4edb49a66529f6769759f2aecd79ce40d792b151941777d737e942cd58ed9a"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.420543, "relation_name": "\"dw_cic\".\"stg_base\".\"base_metadatavalue_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'metadatavalue') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"metadata_value_id\") }},\n        {{ adapter.quote(\"metadata_field_id\") }},\n        {{ adapter.quote(\"text_value\") }},\n        {{ adapter.quote(\"text_lang\") }},\n        {{ adapter.quote(\"place\") }},\n        {{ adapter.quote(\"authority\") }},\n        {{ adapter.quote(\"confidence\") }},\n        {{ adapter.quote(\"dspace_object_id\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "metadatavalue"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.metadatavalue"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_collection_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_collection_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_collection_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_collection_dspacedb.sql", "unique_id": "model.dbt_unlp.base_collection_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_collection_dspacedb"], "alias": "base_collection_dspacedb", "checksum": {"name": "sha256", "checksum": "ba4e9ecccadb3dafda408bf0f69838c8ed3bc2c35ae983a8d0764a3020dec85f"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.43405, "relation_name": "\"dw_cic\".\"stg_base\".\"base_collection_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'collection') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"collection_id\") }},\n        {{ adapter.quote(\"uuid\") }},\n        {{ adapter.quote(\"submitter\") }},\n        {{ adapter.quote(\"admin\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "collection"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.collection"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_metadatafieldregistry_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_metadatafieldregistry_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_metadatafieldregistry_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_metadatafieldregistry_dspacedb.sql", "unique_id": "model.dbt_unlp.base_metadatafieldregistry_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_metadatafieldregistry_dspacedb"], "alias": "base_metadatafieldregistry_dspacedb", "checksum": {"name": "sha256", "checksum": "50f8d041785484e15d6a67d8daba5bfc05171cdacd3b2d53f0fd44cdab6d1f07"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.444706, "relation_name": "\"dw_cic\".\"stg_base\".\"base_metadatafieldregistry_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'metadatafieldregistry') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"metadata_field_id\") }},\n        {{ adapter.quote(\"metadata_schema_id\") }},\n        {{ adapter.quote(\"element\") }},\n        {{ adapter.quote(\"qualifier\") }},\n        {{ adapter.quote(\"scope_note\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "metadatafieldregistry"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.metadatafieldregistry"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_collection2item_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "base_collection2item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/base_collection2item_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/base_collection2item_dspacedb.sql", "unique_id": "model.dbt_unlp.base_collection2item_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "base_collection2item_dspacedb"], "alias": "base_collection2item_dspacedb", "checksum": {"name": "sha256", "checksum": "0f021191e320119e9232f63dbe6a0a0738c7bdbf9df956eabc2d8f556a8cd5c1"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.45406, "relation_name": "\"dw_cic\".\"stg_base\".\"base_collection2item_dspacedb\"", "raw_code": "with source as (\n      select * from {{ source('dspacedb', 'collection2item') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"collection_id\") }},\n        {{ adapter.quote(\"item_id\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["dspacedb", "collection2item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.collection2item"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_item_dspacedb": {"database": "dw_cic", "schema": "stg_base", "name": "norm_item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/dspacedb/item/norm_item_dspacedb.sql", "original_file_path": "models/01_base/dspacedb/item/norm_item_dspacedb.sql", "unique_id": "model.dbt_unlp.norm_item_dspacedb", "fqn": ["dbt_unlp", "01_base", "dspacedb", "item", "norm_item_dspacedb"], "alias": "norm_item_dspacedb", "checksum": {"name": "sha256", "checksum": "728f466ae3448e7e7965f57cec81493104f57418015652dd6a3aeb101c46c31d"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.4624307, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_item_dspacedb\"", "raw_code": "{{ config(materialized = \"table\") }}\n\nWITH base AS (\n    SELECT \n        i.uuid,\n        COALESCE(doi.doi, 'NOT_SET') as doi,\n        COALESCE(handle.handle, 'NOT_SET') as handle,\n        dateissued.dateissued,\n        COALESCE(type.type, 'NOT_SET') as type,\n        COALESCE(title.title, 'NOT_SET') as title,\n        COALESCE(title_lang, 'NOT_SET') as title_lang,\n        i.discoverable,\n        i.in_archive,\n        i.last_modified,\n        i.load_datetime,\n        owning_collection,\n        submitter_id,\n        withdrawn\n    FROM {{ source('dspacedb', 'item') }} i\n    INNER JOIN {{ ref('mid_item_title_dspacedb') }} title ON i.uuid = title.uuid\n    INNER JOIN {{ ref('mid_item_dateissued_dspacedb') }} dateissued ON i.uuid = dateissued.uuid \n    INNER JOIN {{ ref('mid_item_dateaccessioned_dspacedb') }} dateaccessioned ON i.uuid = dateaccessioned.uuid \n    INNER JOIN {{ ref('mid_item_type_dspacedb') }} type ON i.uuid = type.uuid \n    LEFT JOIN {{ ref('mid_item_doi_dspacedb') }} doi ON i.uuid = doi.uuid \n    INNER JOIN {{ ref('mid_item_handle_dspacedb') }} handle ON i.uuid = handle.uuid \n    WHERE dateissued.dateissued > '1800-01-01'::timestamp\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "mid_item_title_dspacedb", "package": null, "version": null}, {"name": "mid_item_dateissued_dspacedb", "package": null, "version": null}, {"name": "mid_item_dateaccessioned_dspacedb", "package": null, "version": null}, {"name": "mid_item_type_dspacedb", "package": null, "version": null}, {"name": "mid_item_doi_dspacedb", "package": null, "version": null}, {"name": "mid_item_handle_dspacedb", "package": null, "version": null}], "sources": [["dspacedb", "item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.dspacedb.item", "model.dbt_unlp.mid_item_title_dspacedb", "model.dbt_unlp.mid_item_dateissued_dspacedb", "model.dbt_unlp.mid_item_dateaccessioned_dspacedb", "model.dbt_unlp.mid_item_type_dspacedb", "model.dbt_unlp.mid_item_doi_dspacedb", "model.dbt_unlp.mid_item_handle_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_author_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "norm_author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/norm_author_openalex.sql", "original_file_path": "models/01_base/openalex/norm_author_openalex.sql", "unique_id": "model.dbt_unlp.norm_author_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "norm_author_openalex"], "alias": "norm_author_openalex", "checksum": {"name": "sha256", "checksum": "f0786a9c4cc3df2da904042f72433b6e8f8d1acc084e538739327c6d9ffb8869"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.506613, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_author_openalex\"", "raw_code": "{{ config(materialized='table')}}\n\nwith base as (\n    select\n        author_id::varchar,\n        COALESCE(orcid, 'NO DATA')::varchar as orcid,\n        COALESCE(display_name, 'NO DATA')::varchar as display_name,\n        works_count::int,\n        cited_by_count::int,\n        {{ dbt_date.convert_timezone(\"updated_date\") }} as updated_date,\n        {{ dbt_date.convert_timezone(\"created_date\") }} as created_date,\n        {{ dbt_date.convert_timezone(\"load_datetime\") }} as load_datetime\n    from {{ ref('base_cic_author_openalex') }}\n)\nselect * from base", "language": "sql", "refs": [{"name": "base_cic_author_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone"], "nodes": ["model.dbt_unlp.base_cic_author_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_work2location_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_work2location_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_work2location_openalex.sql", "original_file_path": "models/01_base/openalex/base_work2location_openalex.sql", "unique_id": "model.dbt_unlp.base_work2location_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_work2location_openalex"], "alias": "base_work2location_openalex", "checksum": {"name": "sha256", "checksum": "f6e4fd419d27fa3b464b56153c4087b5383ffdca2f072e39126f9828ed1b6f09"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5195765, "relation_name": "\"dw_cic\".\"stg_base\".\"base_work2location_openalex\"", "raw_code": "with source as (\n      select * from {{ source('openalex', 'work2location') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"work_id\") }},\n        {{ adapter.quote(\"source_id\") }},\n        {{ adapter.quote(\"source_display_name\") }},\n        {{ adapter.quote(\"source_is_core\") }},\n        {{ adapter.quote(\"source_type\") }},\n        {{ adapter.quote(\"source_host_organization\") }},\n        {{ adapter.quote(\"source_host_organization_name\") }},\n        {{ adapter.quote(\"is_accepted\") }},\n        {{ adapter.quote(\"is_oa\") }},\n        {{ adapter.quote(\"is_published\") }},\n        {{ adapter.quote(\"landing_page_url\") }},\n        {{ adapter.quote(\"license\") }},\n        {{ adapter.quote(\"license_id\") }},\n        {{ adapter.quote(\"pdf_url\") }},\n        {{ adapter.quote(\"version\") }},\n        {{ adapter.quote(\"source_is_in_doaj\") }},\n        {{ adapter.quote(\"source_is_oa\") }},\n        {{ adapter.quote(\"source_issn_l\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "work2location"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.work2location"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_language_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_language_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_language_openalex.sql", "original_file_path": "models/01_base/openalex/base_language_openalex.sql", "unique_id": "model.dbt_unlp.base_language_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_language_openalex"], "alias": "base_language_openalex", "checksum": {"name": "sha256", "checksum": "d55353baa7c66f57615590237afd51c30a90c1097ae876a32f6f90791945be60"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5329578, "relation_name": "\"dw_cic\".\"stg_base\".\"base_language_openalex\"", "raw_code": "with source as (\n      select * from {{ source('openalex', 'language') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"language_id\") }},\n        {{ adapter.quote(\"language_display_name\") }},\n        {{ adapter.quote(\"count\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "language"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.language"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_author2affiliation_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_author2affiliation_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_author2affiliation_openalex.sql", "original_file_path": "models/01_base/openalex/base_author2affiliation_openalex.sql", "unique_id": "model.dbt_unlp.base_author2affiliation_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_author2affiliation_openalex"], "alias": "base_author2affiliation_openalex", "checksum": {"name": "sha256", "checksum": "513c186de99bcc46543b2987ab39458b7b0f1bee052f52db0ad4afa0fa453400"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5417368, "relation_name": "\"dw_cic\".\"stg_base\".\"base_author2affiliation_openalex\"", "raw_code": "with source as (\n      select * from {{ source('openalex', 'author2affiliation') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"id\") }},\n        {{ adapter.quote(\"institution_id\") }},\n        {{ adapter.quote(\"years\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "author2affiliation"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.author2affiliation"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.norm_work_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "norm_work_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/norm_work_openalex.sql", "original_file_path": "models/01_base/openalex/norm_work_openalex.sql", "unique_id": "model.dbt_unlp.norm_work_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "norm_work_openalex"], "alias": "norm_work_openalex", "checksum": {"name": "sha256", "checksum": "7f87ff0fed945bce21c1ea609bc0a37073bf41ad4e602bce9dbc50f293b8ca9c"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5503097, "relation_name": "\"dw_cic\".\"stg_base\".\"norm_work_openalex\"", "raw_code": "{{ config(materialized='table')}}\n\nwith base as (\n    select\n        work_id,\n        doi,\n        title,\n        display_name,\n        {{ dbt_date.convert_timezone(\"publication_date\") }} as publication_date,\n        language,\n        type,\n        type_crossref,\n        countries_distinct_count::int,\n        institutions_distinct_count::int,\n        fwci::float,\n        has_fulltext,\n        fulltext_origin,\n        cited_by_count::int,\n        is_retracted,\n        is_paratext,\n        locations_count::int,\n        referenced_works_count::int,\n        cited_by_api_url,\n        {{ dbt_date.convert_timezone(\"updated_date\") }} as updated_date,\n        {{ dbt_date.convert_timezone(\"created_date\") }} as created_date,\n        mag,\n        pmcid,\n        pmid,\n        biblio_first_page,\n        biblio_issue,\n        biblio_last_page,\n        biblio_volume,\n        any_repository_has_fulltext,\n        is_oa,\n        oa_status,\n        oa_url,\n        cited_by_percentile_year_max::int,\n        cited_by_percentile_year_min::int,\n        citation_normalized_percentile_is_in_top_10_percent,\n        citation_normalized_percentile_is_in_top_1_percent,\n        citation_normalized_percentile_value::float,\n        apc_list_currency,\n        apc_list_provenance,\n        apc_list_value::float,\n        apc_list_value_usd::float,\n        apc_paid_currency,\n        apc_paid_provenance,\n        apc_paid_value::float,\n        apc_paid_value_usd::float,\n        indexed_in_arxiv,\n        indexed_in_doaj,\n        indexed_in_crossref,\n        indexed_in_pubmed,\n        load_datetime\n    from {{ ref('base_work_openalex') }}\n)\nselect * from base", "language": "sql", "refs": [{"name": "base_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone"], "nodes": ["model.dbt_unlp.base_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_author2institution_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_author2institution_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_author2institution_openalex.sql", "original_file_path": "models/01_base/openalex/base_author2institution_openalex.sql", "unique_id": "model.dbt_unlp.base_author2institution_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_author2institution_openalex"], "alias": "base_author2institution_openalex", "checksum": {"name": "sha256", "checksum": "fef70611b58129a702557458953800c9a27e219972120bd5e025c08585156a72"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5625784, "relation_name": "\"dw_cic\".\"stg_base\".\"base_author2institution_openalex\"", "raw_code": "with source as (\n      select * from {{ source('openalex', 'author2institution') }}\n),\nrenamed as (\n    select\n        \n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "author2institution"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.author2institution"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_author2topic_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_author2topic_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_author2topic_openalex.sql", "original_file_path": "models/01_base/openalex/base_author2topic_openalex.sql", "unique_id": "model.dbt_unlp.base_author2topic_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_author2topic_openalex"], "alias": "base_author2topic_openalex", "checksum": {"name": "sha256", "checksum": "8c9a40e32cd5206a72d22e75ee56dc27d2569e5b9351752a1bb2564eb6afcd11"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5658453, "relation_name": "\"dw_cic\".\"stg_base\".\"base_author2topic_openalex\"", "raw_code": "with source as (\n      select * from {{ source('openalex', 'author2topic') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"id\") }},\n        {{ adapter.quote(\"count\") }},\n        {{ adapter.quote(\"id_topic\") }},\n        {{ adapter.quote(\"domain_id\") }},\n        {{ adapter.quote(\"field_id\") }},\n        {{ adapter.quote(\"subfield_id\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "author2topic"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.author2topic"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_cic_author_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_cic_author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_cic_author_openalex.sql", "original_file_path": "models/01_base/openalex/base_cic_author_openalex.sql", "unique_id": "model.dbt_unlp.base_cic_author_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_cic_author_openalex"], "alias": "base_cic_author_openalex", "checksum": {"name": "sha256", "checksum": "2e1881fd564f9848bc26883356b8dddd68263e0239b29ccd31c12a3893e88fdd"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5761206, "relation_name": "\"dw_cic\".\"stg_base\".\"base_cic_author_openalex\"", "raw_code": "{{ config(materialized='table')}}\n\nwith source as (\n      select * from {{ source('openalex', 'author') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"id\") }} as author_id,\n        {{ adapter.quote(\"orcid\") }},\n        {{ adapter.quote(\"display_name\") }},\n        {{ adapter.quote(\"works_count\") }},\n        {{ adapter.quote(\"cited_by_count\") }},\n        {{ adapter.quote(\"updated_date\") }},\n        {{ adapter.quote(\"created_date\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "author"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.author"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_work_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_work_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_work_openalex.sql", "original_file_path": "models/01_base/openalex/base_work_openalex.sql", "unique_id": "model.dbt_unlp.base_work_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_work_openalex"], "alias": "base_work_openalex", "checksum": {"name": "sha256", "checksum": "34edf802e7751b1769a279c2ac3ceb9cb2be0583fa21e5cbff75b5f6aaab85b2"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.5857859, "relation_name": "\"dw_cic\".\"stg_base\".\"base_work_openalex\"", "raw_code": "{{ config(materialized='table')}}\n\nwith source as (\n      select * from {{ source('openalex', 'work') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"work_id\") }},\n        {{ adapter.quote(\"doi\") }},\n        {{ adapter.quote(\"title\") }},\n        {{ adapter.quote(\"display_name\") }},\n        {{ adapter.quote(\"publication_year\") }},\n        {{ adapter.quote(\"publication_date\") }},\n        {{ adapter.quote(\"language\") }},\n        {{ adapter.quote(\"type\") }},\n        {{ adapter.quote(\"type_crossref\") }},\n        {{ adapter.quote(\"countries_distinct_count\") }},\n        {{ adapter.quote(\"institutions_distinct_count\") }},\n        {{ adapter.quote(\"fwci\") }},\n        {{ adapter.quote(\"has_fulltext\") }},\n        {{ adapter.quote(\"fulltext_origin\") }},\n        {{ adapter.quote(\"cited_by_count\") }},\n        {{ adapter.quote(\"is_retracted\") }},\n        {{ adapter.quote(\"is_paratext\") }},\n        {{ adapter.quote(\"locations_count\") }},\n        {{ adapter.quote(\"referenced_works_count\") }},\n        {{ adapter.quote(\"cited_by_api_url\") }},\n        {{ adapter.quote(\"updated_date\") }},\n        {{ adapter.quote(\"created_date\") }},\n        {{ adapter.quote(\"mag\") }},\n        {{ adapter.quote(\"pmcid\") }},\n        {{ adapter.quote(\"pmid\") }},\n        {{ adapter.quote(\"biblio_first_page\") }},\n        {{ adapter.quote(\"biblio_issue\") }},\n        {{ adapter.quote(\"biblio_last_page\") }},\n        {{ adapter.quote(\"biblio_volume\") }},\n        {{ adapter.quote(\"any_repository_has_fulltext\") }},\n        {{ adapter.quote(\"is_oa\") }},\n        {{ adapter.quote(\"oa_status\") }},\n        {{ adapter.quote(\"oa_url\") }},\n        {{ adapter.quote(\"cited_by_percentile_year_max\") }},\n        {{ adapter.quote(\"cited_by_percentile_year_min\") }},\n        {{ adapter.quote(\"citation_normalized_percentile_is_in_top_10_percent\") }},\n        {{ adapter.quote(\"citation_normalized_percentile_is_in_top_1_percent\") }},\n        {{ adapter.quote(\"citation_normalized_percentile_value\") }},\n        {{ adapter.quote(\"apc_list_currency\") }},\n        {{ adapter.quote(\"apc_list_provenance\") }},\n        {{ adapter.quote(\"apc_list_value\") }},\n        {{ adapter.quote(\"apc_list_value_usd\") }},\n        {{ adapter.quote(\"apc_paid_currency\") }},\n        {{ adapter.quote(\"apc_paid_provenance\") }},\n        {{ adapter.quote(\"apc_paid_value\") }},\n        {{ adapter.quote(\"apc_paid_value_usd\") }},\n        {{ adapter.quote(\"indexed_in_arxiv\") }},\n        {{ adapter.quote(\"indexed_in_doaj\") }},\n        {{ adapter.quote(\"indexed_in_crossref\") }},\n        {{ adapter.quote(\"indexed_in_pubmed\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "work"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.work"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_license_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_license_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_license_openalex.sql", "original_file_path": "models/01_base/openalex/base_license_openalex.sql", "unique_id": "model.dbt_unlp.base_license_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_license_openalex"], "alias": "base_license_openalex", "checksum": {"name": "sha256", "checksum": "8d4a352c89d8063e490e4a7bd621b4975e9c1706d81ef3d90292037388aba54f"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.6092098, "relation_name": "\"dw_cic\".\"stg_base\".\"base_license_openalex\"", "raw_code": "with source as (\n      select * from {{ source('openalex', 'license') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"license_id\") }},\n        {{ adapter.quote(\"license_display_name\") }},\n        {{ adapter.quote(\"count\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "license"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.license"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.base_work2authorship_openalex": {"database": "dw_cic", "schema": "stg_base", "name": "base_work2authorship_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openalex/base_work2authorship_openalex.sql", "original_file_path": "models/01_base/openalex/base_work2authorship_openalex.sql", "unique_id": "model.dbt_unlp.base_work2authorship_openalex", "fqn": ["dbt_unlp", "01_base", "openalex", "base_work2authorship_openalex"], "alias": "base_work2authorship_openalex", "checksum": {"name": "sha256", "checksum": "7ae567b74ffe3a20244e795327239cd0d0735bdc1c495c004e76a77a797d3a4d"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738081075.6182032, "relation_name": "\"dw_cic\".\"stg_base\".\"base_work2authorship_openalex\"", "raw_code": "with source as (\n      select * from {{ source('openalex', 'work2authorship') }}\n),\nrenamed as (\n    select\n        \n\n    from source\n)\nselect * from renamed", "language": "sql", "refs": [], "sources": [["openalex", "work2authorship"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openalex.work2authorship"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_resourcetype_coar": {"database": "dw_cic", "schema": "stg_coar", "name": "hub_resourcetype_coar", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/coar/hubs/hub_resourcetype_coar.sql", "original_file_path": "models/03_dv/coar/hubs/hub_resourcetype_coar.sql", "unique_id": "model.dbt_unlp.hub_resourcetype_coar", "fqn": ["dbt_unlp", "03_dv", "coar", "hubs", "hub_resourcetype_coar"], "alias": "hub_resourcetype_coar", "checksum": {"name": "sha256", "checksum": "24584bfab52579cda86ba08e50d6907ec87ec71bb03bdc11bc2ae9cbdc6dd56d"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "coar"}, "created_at": 1738081075.6216898, "relation_name": "\"dw_cic\".\"stg_coar\".\"hub_resourcetype_coar\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_resourcetype_coar'\nsrc_pk: resourcetype_hk\nsrc_nk: resourcetype_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_resourcetype_coar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_resourcetype_coar"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sal_resourcetype_coar": {"database": "dw_cic", "schema": "stg_coar", "name": "sal_resourcetype_coar", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/coar/links/sal_resourcetype_coar.sql", "original_file_path": "models/03_dv/coar/links/sal_resourcetype_coar.sql", "unique_id": "model.dbt_unlp.sal_resourcetype_coar", "fqn": ["dbt_unlp", "03_dv", "coar", "links", "sal_resourcetype_coar"], "alias": "sal_resourcetype_coar", "checksum": {"name": "sha256", "checksum": "d1c45bc108d834460bfb411b096a1dd4efd7a5ed667c0cf138b076e27381f308"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "coar"}, "created_at": 1738081075.6353402, "relation_name": "\"dw_cic\".\"stg_coar\".\"sal_resourcetype_coar\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_resourcetype_coar2worktype_openalex\" -%}\n{%- set src_pk = \"sal_resourcetype_hk\" -%}\n{%- set src_fk = [\"resourcetype_hk\", \"worktype_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_resourcetype_coar2worktype_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_resourcetype_coar2worktype_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_resourcetype_coar": {"database": "dw_cic", "schema": "stg_coar", "name": "sat_resourcetype_coar", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/coar/satellites/sat_resourcetype_coar.sql", "original_file_path": "models/03_dv/coar/satellites/sat_resourcetype_coar.sql", "unique_id": "model.dbt_unlp.sat_resourcetype_coar", "fqn": ["dbt_unlp", "03_dv", "coar", "satellites", "sat_resourcetype_coar"], "alias": "sat_resourcetype_coar", "checksum": {"name": "sha256", "checksum": "63df9494d54e2c70e2c26ce9684640012e357e3daba9c8967e25b5dab3297569"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "coar"}, "created_at": 1738081075.6501515, "relation_name": "\"dw_cic\".\"stg_coar\".\"sat_resourcetype_coar\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_resourcetype_coar\"\nsrc_pk: \"resourcetype_hk\"\nsrc_hashdiff: \n  source_column: \"resourcetype_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n    - label_es\n    - label\n    - parent_label_1\n    - parent_label_2\n    - parent_label_3\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_resourcetype_coar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_resourcetype_coar"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_date": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_date", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/hub_openaire_date.sql", "original_file_path": "models/03_dv/openaire/hubs/hub_openaire_date.sql", "unique_id": "model.dbt_unlp.hub_openaire_date", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "hub_openaire_date"], "alias": "hub_openaire_date", "checksum": {"name": "sha256", "checksum": "9fcfc144742c40e69a3bb2ea7ad17ef69c20789caa5c437d80aec63a0a7ad61f"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.674588, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_date\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2date_openaire'\nsrc_pk: date_hk\nsrc_nk: date_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2date_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2date_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_arxiv": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_arxiv", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/pid/hub_openaire_arxiv.sql", "original_file_path": "models/03_dv/openaire/hubs/pid/hub_openaire_arxiv.sql", "unique_id": "model.dbt_unlp.hub_openaire_arxiv", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "pid", "hub_openaire_arxiv"], "alias": "hub_openaire_arxiv", "checksum": {"name": "sha256", "checksum": "cae5b4468851bab577329b430cc5500f1c231612f48208fb5acd4ddad57fc0c2"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.7343972, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_arxiv\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2pid_openaire'\nsrc_pk: arxiv_hk\nsrc_nk: arxiv\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_mag": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_mag", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/pid/hub_openaire_mag.sql", "original_file_path": "models/03_dv/openaire/hubs/pid/hub_openaire_mag.sql", "unique_id": "model.dbt_unlp.hub_openaire_mag", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "pid", "hub_openaire_mag"], "alias": "hub_openaire_mag", "checksum": {"name": "sha256", "checksum": "e98f988d6e153290748ad3b3e7801e353d1afd3d2d10a11fd5234971453b56ef"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.7494755, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_mag\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2pid_openaire'\nsrc_pk: mag_hk\nsrc_nk: mag\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_pmc": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_pmc", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/pid/hub_openaire_pmc.sql", "original_file_path": "models/03_dv/openaire/hubs/pid/hub_openaire_pmc.sql", "unique_id": "model.dbt_unlp.hub_openaire_pmc", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "pid", "hub_openaire_pmc"], "alias": "hub_openaire_pmc", "checksum": {"name": "sha256", "checksum": "79a42f2c2c56ebdaf9408862506d68a6a5e19c29e878e02960f7ec5f27bb43a3"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.7628398, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_pmc\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2pid_openaire'\nsrc_pk: pmc_hk\nsrc_nk: pmc\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_handle": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_handle", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/pid/hub_openaire_handle.sql", "original_file_path": "models/03_dv/openaire/hubs/pid/hub_openaire_handle.sql", "unique_id": "model.dbt_unlp.hub_openaire_handle", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "pid", "hub_openaire_handle"], "alias": "hub_openaire_handle", "checksum": {"name": "sha256", "checksum": "485d44d2cf8dd4c05e6c05170b01f41b4830c3ad0d6982b7239225c24e91f3cb"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.7764308, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_handle\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2pid_openaire'\nsrc_pk: handle_hk\nsrc_nk: handle\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_pmid": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_pmid", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/pid/hub_openaire_pmid.sql", "original_file_path": "models/03_dv/openaire/hubs/pid/hub_openaire_pmid.sql", "unique_id": "model.dbt_unlp.hub_openaire_pmid", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "pid", "hub_openaire_pmid"], "alias": "hub_openaire_pmid", "checksum": {"name": "sha256", "checksum": "29f09e64ba5044a45963a432be94842ec49330cdd022228c1be323c10dbb0303"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.8786597, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_pmid\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2pid_openaire'\nsrc_pk: pmid_hk\nsrc_nk: pmid\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_doi": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_doi", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/pid/hub_openaire_doi.sql", "original_file_path": "models/03_dv/openaire/hubs/pid/hub_openaire_doi.sql", "unique_id": "model.dbt_unlp.hub_openaire_doi", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "pid", "hub_openaire_doi"], "alias": "hub_openaire_doi", "checksum": {"name": "sha256", "checksum": "0c6bfa6627c7fe8948fbd7739f5020368b6b77b11881650220535fbccad0fb81"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.8903651, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_doi\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2pid_openaire'\nsrc_pk: doi_hk\nsrc_nk: doi\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sal_openaire_researchproduct": {"database": "dw_cic", "schema": "stg_openaire", "name": "sal_openaire_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/links/sal_openaire_researchproduct.sql", "original_file_path": "models/03_dv/openaire/links/sal_openaire_researchproduct.sql", "unique_id": "model.dbt_unlp.sal_openaire_researchproduct", "fqn": ["dbt_unlp", "03_dv", "openaire", "links", "sal_openaire_researchproduct"], "alias": "sal_openaire_researchproduct", "checksum": {"name": "sha256", "checksum": "4122e8fd043814e0ca3b0ad825b2ff6c5cd7e93631e98082a59bb123b51f515f"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.9175203, "relation_name": "\"dw_cic\".\"stg_openaire\".\"sal_openaire_researchproduct\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_researchproduct2pid_openaire\" -%}\n{%- set src_pk = \"researchproduct_hk\" -%}\n{%- set src_fk = [\"researchproduct_hk\",\"doi_hk\", \"mag_hk\", \"pmid_hk\", \"pmc_hk\", \"arxiv_hk\", \"handle_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.lnk_openaire_researchproduct2date": {"database": "dw_cic", "schema": "stg_openaire", "name": "lnk_openaire_researchproduct2date", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/links/lnk_openaire_researchproduct2date.sql", "original_file_path": "models/03_dv/openaire/links/lnk_openaire_researchproduct2date.sql", "unique_id": "model.dbt_unlp.lnk_openaire_researchproduct2date", "fqn": ["dbt_unlp", "03_dv", "openaire", "links", "lnk_openaire_researchproduct2date"], "alias": "lnk_openaire_researchproduct2date", "checksum": {"name": "sha256", "checksum": "8ac222b4a96d2c9f34a03204aef41c6ff6f178222166e2785108ce92d38001c2"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.9338875, "relation_name": "\"dw_cic\".\"stg_openaire\".\"lnk_openaire_researchproduct2date\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_researchproduct2date_openaire\" -%}\n{%- set src_pk = \"researchproduct2date_hk\" -%}\n{%- set src_fk = [\"researchproduct_hk\",\"date_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_researchproduct2date_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_researchproduct2date_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_openaire_researchproduct2date": {"database": "dw_cic", "schema": "stg_openaire", "name": "sat_openaire_researchproduct2date", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/satellites/sat_openaire_researchproduct2date.sql", "original_file_path": "models/03_dv/openaire/satellites/sat_openaire_researchproduct2date.sql", "unique_id": "model.dbt_unlp.sat_openaire_researchproduct2date", "fqn": ["dbt_unlp", "03_dv", "openaire", "satellites", "sat_openaire_researchproduct2date"], "alias": "sat_openaire_researchproduct2date", "checksum": {"name": "sha256", "checksum": "adbe2e7c507e6fb82482cef2d189dab359369766457ff899104b188e7f7f5820"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.9752018, "relation_name": "\"dw_cic\".\"stg_openaire\".\"sat_openaire_researchproduct2date\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_researchproduct2date_openaire\"\nsrc_pk: \"researchproduct2date_hk\"\nsrc_hashdiff:\n  source_column: \"researchproduct2date_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - date_text\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_researchproduct2date_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_researchproduct2date_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_openaire_researchproduct": {"database": "dw_cic", "schema": "stg_openaire", "name": "sat_openaire_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/satellites/sat_openaire_researchproduct.sql", "original_file_path": "models/03_dv/openaire/satellites/sat_openaire_researchproduct.sql", "unique_id": "model.dbt_unlp.sat_openaire_researchproduct", "fqn": ["dbt_unlp", "03_dv", "openaire", "satellites", "sat_openaire_researchproduct"], "alias": "sat_openaire_researchproduct", "checksum": {"name": "sha256", "checksum": "5651cc1c3d5f5f289e0c78384c0aa3b71c00423d941ea5043968f5f686e9a72b"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738081075.9957392, "relation_name": "\"dw_cic\".\"stg_openaire\".\"sat_openaire_researchproduct\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_openaire_researchproduct\"\nsrc_pk: \"researchproduct_hk\"\nsrc_hashdiff:\n  source_column: \"researchproduct_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - date_collection\n  - date_acceptance\n  - description\n  - publisher\n  - isgreen\n  - openaccesscolor\n  - isindiamondjournal\n  - publiclyfunded\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_openaire_researchproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_openaire_researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_doi_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "hub_doi_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/dspacedb/hubs/hub_doi_dspacedb.sql", "original_file_path": "models/03_dv/dspacedb/hubs/hub_doi_dspacedb.sql", "unique_id": "model.dbt_unlp.hub_doi_dspacedb", "fqn": ["dbt_unlp", "03_dv", "dspacedb", "hubs", "hub_doi_dspacedb"], "alias": "hub_doi_dspacedb", "checksum": {"name": "sha256", "checksum": "e8921944c16477da862c4fb5a5490846183ddc92f3623a7def597947b9a7dcda"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dspacedb"}, "created_at": 1738081076.0207074, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"hub_doi_dspacedb\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_item_dspacedb'\nsrc_pk: doi_hk\nsrc_nk: doi\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_type_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "hub_type_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/dspacedb/hubs/hub_type_dspacedb.sql", "original_file_path": "models/03_dv/dspacedb/hubs/hub_type_dspacedb.sql", "unique_id": "model.dbt_unlp.hub_type_dspacedb", "fqn": ["dbt_unlp", "03_dv", "dspacedb", "hubs", "hub_type_dspacedb"], "alias": "hub_type_dspacedb", "checksum": {"name": "sha256", "checksum": "8332ab1954ceb40b059b3b5c3a1aa0aa456a1edba1923e6f8e81e50aefcaf6e1"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dspacedb"}, "created_at": 1738081076.034415, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"hub_type_dspacedb\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_item_dspacedb'\nsrc_pk: type_hk\nsrc_nk: type\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_handle_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "hub_handle_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/dspacedb/hubs/hub_handle_dspacedb.sql", "original_file_path": "models/03_dv/dspacedb/hubs/hub_handle_dspacedb.sql", "unique_id": "model.dbt_unlp.hub_handle_dspacedb", "fqn": ["dbt_unlp", "03_dv", "dspacedb", "hubs", "hub_handle_dspacedb"], "alias": "hub_handle_dspacedb", "checksum": {"name": "sha256", "checksum": "bd70e16b0a1cd61e121aec774ab8683b4da8ad92fd580e2c6322d4f160ee7e4b"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dspacedb"}, "created_at": 1738081076.050577, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"hub_handle_dspacedb\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_item_dspacedb'\nsrc_pk: handle_hk\nsrc_nk: handle\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_item_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "hub_item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/dspacedb/hubs/hub_item_dspacedb.sql", "original_file_path": "models/03_dv/dspacedb/hubs/hub_item_dspacedb.sql", "unique_id": "model.dbt_unlp.hub_item_dspacedb", "fqn": ["dbt_unlp", "03_dv", "dspacedb", "hubs", "hub_item_dspacedb"], "alias": "hub_item_dspacedb", "checksum": {"name": "sha256", "checksum": "7bcd80b78d42f8b1d6a8232c49e93e4d6e3c0d968c5c9a1711700ee1c4d17958"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dspacedb"}, "created_at": 1738081076.0777903, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"hub_item_dspacedb\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_item_dspacedb'\nsrc_pk: item_hk\nsrc_nk: uuid\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sal_item_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "sal_item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/dspacedb/links/sal_item_dspacedb.sql", "original_file_path": "models/03_dv/dspacedb/links/sal_item_dspacedb.sql", "unique_id": "model.dbt_unlp.sal_item_dspacedb", "fqn": ["dbt_unlp", "03_dv", "dspacedb", "links", "sal_item_dspacedb"], "alias": "sal_item_dspacedb", "checksum": {"name": "sha256", "checksum": "9a663e766294b7ca8c190f526c0416e67c64d4c4c64fdcba866eb8707c70ab72"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dspacedb"}, "created_at": 1738081076.1048043, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"sal_item_dspacedb\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_item_dspacedb\" -%}\n{%- set src_pk = \"sal_item_hk\" -%}\n{%- set src_fk = [\"item_hk\",\"doi_hk\", \"handle_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.link_item_type_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "link_item_type_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/dspacedb/links/link_item_type_dspacedb.sql", "original_file_path": "models/03_dv/dspacedb/links/link_item_type_dspacedb.sql", "unique_id": "model.dbt_unlp.link_item_type_dspacedb", "fqn": ["dbt_unlp", "03_dv", "dspacedb", "links", "link_item_type_dspacedb"], "alias": "link_item_type_dspacedb", "checksum": {"name": "sha256", "checksum": "6ebbf0f37bf180c78b4d095da91f343dc76cfc29c8d74d574dad97c5eec6b00e"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dspacedb"}, "created_at": 1738081076.1289167, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"link_item_type_dspacedb\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_item_dspacedb\" -%}\n{%- set src_pk = \"item_type_hk\" -%}\n{%- set src_fk = [\"item_hk\",\"type_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_item_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "sat_item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/dspacedb/satellites/sat_item_dspacedb.sql", "original_file_path": "models/03_dv/dspacedb/satellites/sat_item_dspacedb.sql", "unique_id": "model.dbt_unlp.sat_item_dspacedb", "fqn": ["dbt_unlp", "03_dv", "dspacedb", "satellites", "sat_item_dspacedb"], "alias": "sat_item_dspacedb", "checksum": {"name": "sha256", "checksum": "6ebe7f6ec43ff0be91cceb35ac25b88da3d17c39643dafb357d52d26f4a0e009"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "dspacedb"}, "created_at": 1738081076.141653, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"sat_item_dspacedb\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_item_dspacedb\"\nsrc_pk: \"item_hk\"\nsrc_hashdiff:\n  source_column: \"item_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - title\n  - title_lang\n  - dateissued\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_mag_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_mag_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_mag_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_mag_openalex.sql", "unique_id": "model.dbt_unlp.hub_mag_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_mag_openalex"], "alias": "hub_mag_openalex", "checksum": {"name": "sha256", "checksum": "41e9be90bf7284c4be56498e39f80a9663cdba715e1aa399fddc3a3039cd4b9b"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.2075145, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_mag_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work_openalex'\nsrc_pk: mag_hk\nsrc_nk: mag\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_pmcid_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_pmcid_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_pmcid_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_pmcid_openalex.sql", "unique_id": "model.dbt_unlp.hub_pmcid_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_pmcid_openalex"], "alias": "hub_pmcid_openalex", "checksum": {"name": "sha256", "checksum": "4c4d882fd175b7077d23fa8bf43b2ba93191c56c2c08f49823a54b5edc47a391"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.2213888, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_pmcid_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work_openalex'\nsrc_pk: pmcid_hk\nsrc_nk: pmcid\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_doi_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_doi_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_doi_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_doi_openalex.sql", "unique_id": "model.dbt_unlp.hub_doi_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_doi_openalex"], "alias": "hub_doi_openalex", "checksum": {"name": "sha256", "checksum": "46c8a87bbdc7a362623caddf6041e38c0c628c11f315c59b6907a0befdf7c939"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.2344346, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_doi_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work_openalex'\nsrc_pk: doi_hk\nsrc_nk: doi\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                src_nk=metadata_dict[\"src_nk\"], \n                src_ldts=metadata_dict[\"src_ldts\"],\n                src_source=metadata_dict[\"src_source\"],\n                source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_institution_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_institution_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_institution_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_institution_openalex.sql", "unique_id": "model.dbt_unlp.hub_institution_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_institution_openalex"], "alias": "hub_institution_openalex", "checksum": {"name": "sha256", "checksum": "d2c869e54da53e2314112528d4c0db21bd7ba46d40825e3bf13606ae7fee2d01"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.247435, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_institution_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work2authorship_openalex'\nsrc_pk: institution_hk\nsrc_nk: institution_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                src_nk=metadata_dict[\"src_nk\"], \n                src_ldts=metadata_dict[\"src_ldts\"],\n                src_source=metadata_dict[\"src_source\"],\n                source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_worktype_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_worktype_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_worktype_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_worktype_openalex.sql", "unique_id": "model.dbt_unlp.hub_worktype_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_worktype_openalex"], "alias": "hub_worktype_openalex", "checksum": {"name": "sha256", "checksum": "53357924972eb50229c91652918a573dd8f5124903a792ec27f5f022402c87b2"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.2615469, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_worktype_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_worktype_openalex'\nsrc_pk: worktype_hk\nsrc_nk: worktype_display_name\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_worktype_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_worktype_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_pmid_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_pmid_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_pmid_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_pmid_openalex.sql", "unique_id": "model.dbt_unlp.hub_pmid_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_pmid_openalex"], "alias": "hub_pmid_openalex", "checksum": {"name": "sha256", "checksum": "bbe93138fb56d721769083b12806cfca85bfb0b59ec4aa61123bc5b4ba95e318"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.2744792, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_pmid_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work_openalex'\nsrc_pk: pmid_hk\nsrc_nk: pmid\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_orcid_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_orcid_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_orcid_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_orcid_openalex.sql", "unique_id": "model.dbt_unlp.hub_orcid_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_orcid_openalex"], "alias": "hub_orcid_openalex", "checksum": {"name": "sha256", "checksum": "6e38831dc6ec39c27f064a92b3bbf5c37d5d3e95c88d611b5081f0046c94efaa"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.2873461, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_orcid_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work2authorship_openalex'\nsrc_pk: orcid_hk\nsrc_nk: author_orcid\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                src_nk=metadata_dict[\"src_nk\"], \n                src_ldts=metadata_dict[\"src_ldts\"],\n                src_source=metadata_dict[\"src_source\"],\n                source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_language_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_language_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_language_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_language_openalex.sql", "unique_id": "model.dbt_unlp.hub_language_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_language_openalex"], "alias": "hub_language_openalex", "checksum": {"name": "sha256", "checksum": "5b544cdb81919f9cd0e58850389a41253491365a87969d1fe4b31b226227bf3f"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.3014426, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_language_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work_openalex'\nsrc_pk: language_hk\nsrc_nk: language\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_ror_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_ror_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_ror_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_ror_openalex.sql", "unique_id": "model.dbt_unlp.hub_ror_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_ror_openalex"], "alias": "hub_ror_openalex", "checksum": {"name": "sha256", "checksum": "b6d2ba9797aec2efac396950b473f25013941b0373947b2bdd945bb13f0a146a"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.314387, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_ror_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work2authorship_openalex'\nsrc_pk: ror_hk\nsrc_nk: institution_ror\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                src_nk=metadata_dict[\"src_nk\"], \n                src_ldts=metadata_dict[\"src_ldts\"],\n                src_source=metadata_dict[\"src_source\"],\n                source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_source_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_source_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_source_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_source_openalex.sql", "unique_id": "model.dbt_unlp.hub_source_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_source_openalex"], "alias": "hub_source_openalex", "checksum": {"name": "sha256", "checksum": "7eda0312852c68ce2aed037c03cb16a1bf9803101ff5b39a4fa43b4a202f863a"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.3266482, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_source_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work2location_openalex'\nsrc_pk: source_hk\nsrc_nk: source_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                src_nk=metadata_dict[\"src_nk\"], \n                src_ldts=metadata_dict[\"src_ldts\"],\n                src_source=metadata_dict[\"src_source\"],\n                source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [{"name": "stg_work2location_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work2location_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_author_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_author_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_author_openalex.sql", "unique_id": "model.dbt_unlp.hub_author_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_author_openalex"], "alias": "hub_author_openalex", "checksum": {"name": "sha256", "checksum": "ea5413cda544071b46ef7556d50957ca9072d90d516f376aa2ce988c6fc2b2c6"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.3399272, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_author_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work2authorship_openalex'\nsrc_pk: author_hk\nsrc_nk: author_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                src_nk=metadata_dict[\"src_nk\"], \n                src_ldts=metadata_dict[\"src_ldts\"],\n                src_source=metadata_dict[\"src_source\"],\n                source_model=metadata_dict[\"source_model\"]) }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_work_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "hub_work_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/hubs/hub_work_openalex.sql", "original_file_path": "models/03_dv/openalex/hubs/hub_work_openalex.sql", "unique_id": "model.dbt_unlp.hub_work_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "hubs", "hub_work_openalex"], "alias": "hub_work_openalex", "checksum": {"name": "sha256", "checksum": "defd0b5ea4fdae12b872869064b910c80cd34b11b63d51566d78d9192605b531"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.352141, "relation_name": "\"dw_cic\".\"stg_openalex\".\"hub_work_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_work_openalex'\nsrc_pk: work_hk\nsrc_nk: work_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nwith base as (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal as (\n    select * \n    from base\n)\n\nselect * from final", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.link_work2author_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "link_work2author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/link_work2author_openalex.sql", "original_file_path": "models/03_dv/openalex/links/link_work2author_openalex.sql", "unique_id": "model.dbt_unlp.link_work2author_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "link_work2author_openalex"], "alias": "link_work2author_openalex", "checksum": {"name": "sha256", "checksum": "efa3d86a0fef4d3fd6d2c889ae5d9bd572de9e0a8e5c9d8c07ac933916b1f1bf"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.3648422, "relation_name": "\"dw_cic\".\"stg_openalex\".\"link_work2author_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_work2authorship_openalex\" -%}\n{%- set src_pk = \"work2author_hk\" -%}\n{%- set src_fk = [\"work_hk\", \"author_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.link_work2worktype_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "link_work2worktype_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/link_work2worktype_openalex.sql", "original_file_path": "models/03_dv/openalex/links/link_work2worktype_openalex.sql", "unique_id": "model.dbt_unlp.link_work2worktype_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "link_work2worktype_openalex"], "alias": "link_work2worktype_openalex", "checksum": {"name": "sha256", "checksum": "67ff110826136df8a2b73f12661f30974e21223b57287fe02f1411873eb0515c"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.3781707, "relation_name": "\"dw_cic\".\"stg_openalex\".\"link_work2worktype_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_work_openalex\" -%}\n{%- set src_pk = \"work2worktype_hk\" -%}\n{%- set src_fk = [\"work_hk\", \"worktype_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.link_institution2ror_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "link_institution2ror_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/link_institution2ror_openalex.sql", "original_file_path": "models/03_dv/openalex/links/link_institution2ror_openalex.sql", "unique_id": "model.dbt_unlp.link_institution2ror_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "link_institution2ror_openalex"], "alias": "link_institution2ror_openalex", "checksum": {"name": "sha256", "checksum": "8cedd0024e77699bdfdfb08d8a5ee650dffc02335452007230b480fb4a0bf54c"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.390311, "relation_name": "\"dw_cic\".\"stg_openalex\".\"link_institution2ror_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_work2authorship_openalex\" -%}\n{%- set src_pk = \"institution2ror_hk\" -%}\n{%- set src_fk = [\"institution_hk\", \"ror_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.link_work2language_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "link_work2language_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/link_work2language_openalex.sql", "original_file_path": "models/03_dv/openalex/links/link_work2language_openalex.sql", "unique_id": "model.dbt_unlp.link_work2language_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "link_work2language_openalex"], "alias": "link_work2language_openalex", "checksum": {"name": "sha256", "checksum": "a882f705743d14d51b444dce1415393d904e987b01fed0df389dddbe0eef930a"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4026198, "relation_name": "\"dw_cic\".\"stg_openalex\".\"link_work2language_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_work_openalex\" -%}\n{%- set src_pk = \"work2language_hk\" -%}\n{%- set src_fk = [\"work_hk\", \"language_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sal_institution_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "sal_institution_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/sal_institution_openalex.sql", "original_file_path": "models/03_dv/openalex/links/sal_institution_openalex.sql", "unique_id": "model.dbt_unlp.sal_institution_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "sal_institution_openalex"], "alias": "sal_institution_openalex", "checksum": {"name": "sha256", "checksum": "034dcfda42150e54c1e0f5b216aa406591c967a8441e236c72e4b7348307435d"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4162447, "relation_name": "\"dw_cic\".\"stg_openalex\".\"sal_institution_openalex\"", "raw_code": "with base as (\n    SELECT\n        hub_institution_openalex.institution_hk,\n        hub_institution_openalex.institution_id,\n        hub_ror_openalex.institution_ror\n    FROM {{ref('hub_institution_openalex')}}\n    LEFT JOIN {{ref('link_institution2ror_openalex')}} ON hub_institution_openalex.institution_hk = link_institution2ror_openalex.institution_hk\n    LEFT JOIN {{ref('hub_ror_openalex')}} ON hub_ror_openalex.ror_hk = link_institution2ror_openalex.ror_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_institution_openalex", "package": null, "version": null}, {"name": "link_institution2ror_openalex", "package": null, "version": null}, {"name": "hub_ror_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_institution_openalex", "model.dbt_unlp.link_institution2ror_openalex", "model.dbt_unlp.hub_ror_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sal_author_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "sal_author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/sal_author_openalex.sql", "original_file_path": "models/03_dv/openalex/links/sal_author_openalex.sql", "unique_id": "model.dbt_unlp.sal_author_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "sal_author_openalex"], "alias": "sal_author_openalex", "checksum": {"name": "sha256", "checksum": "d8a64b577b3281a0b7e1eca8b9baf3362cee42cb7c7bca8a606046b3a11a1cc0"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4194121, "relation_name": "\"dw_cic\".\"stg_openalex\".\"sal_author_openalex\"", "raw_code": "with base as (\n    SELECT\n        hub_author_openalex.author_hk,\n        hub_author_openalex.author_id,\n        hub_orcid_openalex.author_orcid\n    FROM {{ref('hub_author_openalex')}}\n    LEFT JOIN {{ref('link_author2orcid_openalex')}} ON hub_author_openalex.author_hk = link_author2orcid_openalex.author_hk\n    LEFT JOIN {{ref('hub_orcid_openalex')}} ON hub_orcid_openalex.orcid_hk = link_author2orcid_openalex.orcid_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_author_openalex", "package": null, "version": null}, {"name": "link_author2orcid_openalex", "package": null, "version": null}, {"name": "hub_orcid_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_author_openalex", "model.dbt_unlp.link_author2orcid_openalex", "model.dbt_unlp.hub_orcid_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.link_author2orcid_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "link_author2orcid_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/link_author2orcid_openalex.sql", "original_file_path": "models/03_dv/openalex/links/link_author2orcid_openalex.sql", "unique_id": "model.dbt_unlp.link_author2orcid_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "link_author2orcid_openalex"], "alias": "link_author2orcid_openalex", "checksum": {"name": "sha256", "checksum": "01bce26200768a2b7fbb8c9a642c2fc23130382a4ea018250774b09d0db5c8b2"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4224703, "relation_name": "\"dw_cic\".\"stg_openalex\".\"link_author2orcid_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_work2authorship_openalex\" -%}\n{%- set src_pk = \"author2orcid_hk\" -%}\n{%- set src_fk = [\"author_hk\", \"orcid_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sal_work_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "sal_work_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/links/sal_work_openalex.sql", "original_file_path": "models/03_dv/openalex/links/sal_work_openalex.sql", "unique_id": "model.dbt_unlp.sal_work_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "links", "sal_work_openalex"], "alias": "sal_work_openalex", "checksum": {"name": "sha256", "checksum": "1db3e21ae04f79970f7b097319454c2f9c2fe9f1e9604b6243ddfa7575471130"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4349146, "relation_name": "\"dw_cic\".\"stg_openalex\".\"sal_work_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_work_openalex\" -%}\n{%- set src_pk = \"sal_work_hk\" -%}\n{%- set src_fk = [\"work_hk\",\"doi_hk\", \"mag_hk\", \"pmid_hk\", \"pmcid_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_institution_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "sat_institution_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/satellites/sat_institution_openalex.sql", "original_file_path": "models/03_dv/openalex/satellites/sat_institution_openalex.sql", "unique_id": "model.dbt_unlp.sat_institution_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "satellites", "sat_institution_openalex"], "alias": "sat_institution_openalex", "checksum": {"name": "sha256", "checksum": "1928e72693311dc4c3010ae3f16c75367b7b07acfe7301fb970b8e846321fb70"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4476779, "relation_name": "\"dw_cic\".\"stg_openalex\".\"sat_institution_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_work2authorship_openalex\"\nsrc_pk: \"institution_hk\"\nsrc_hashdiff:\n  source_column: \"institution_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - institution_id\n  - institution_ror\n  - institution_display_name\n\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_source_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "sat_source_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/satellites/sat_source_openalex.sql", "original_file_path": "models/03_dv/openalex/satellites/sat_source_openalex.sql", "unique_id": "model.dbt_unlp.sat_source_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "satellites", "sat_source_openalex"], "alias": "sat_source_openalex", "checksum": {"name": "sha256", "checksum": "49e9901de490c4952f82802145804bf5b67dc596c911fb9c41d5c58b2531b0ee"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4701872, "relation_name": "\"dw_cic\".\"stg_openalex\".\"sat_source_openalex\"", "raw_code": "{# {{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_work2authorship_openalex\"\nsrc_pk: \"institution_hk\"\nsrc_hashdiff:\n  source_column: \"institution_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - institution_id\n  - institution_ror\n  - institution_display_name\n\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }} #}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_work_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "sat_work_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/satellites/sat_work_openalex.sql", "original_file_path": "models/03_dv/openalex/satellites/sat_work_openalex.sql", "unique_id": "model.dbt_unlp.sat_work_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "satellites", "sat_work_openalex"], "alias": "sat_work_openalex", "checksum": {"name": "sha256", "checksum": "18d99c342bdfaae18b4fe8a014927406490595f7cd780c624a808609ba766558"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.4731822, "relation_name": "\"dw_cic\".\"stg_openalex\".\"sat_work_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_work_openalex\"\nsrc_pk: \"work_hk\"\nsrc_hashdiff:\n  source_column: \"work_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - title\n  - display_name\n  - publication_date\n  - countries_distinct_count\n  - institutions_distinct_count\n  - fwci\n  - has_fulltext\n  - fulltext_origin\n  - cited_by_count\n  - is_retracted\n  - is_paratext\n  - locations_count\n  - referenced_works_count\n  - updated_date\n  - created_date\n  - any_repository_has_fulltext\n  - is_oa\n  - oa_status\n  - oa_url\n  - cited_by_percentile_year_max\n  - cited_by_percentile_year_min\n  - citation_normalized_percentile_is_in_top_10_percent\n  - citation_normalized_percentile_is_in_top_1_percent\n  - citation_normalized_percentile_value\n  - apc_list_currency\n  - apc_list_provenance\n  - apc_list_value\n  - apc_list_value_usd\n  - apc_paid_currency\n  - apc_paid_provenance\n  - apc_paid_value\n  - apc_paid_value_usd\n  - indexed_in_arxiv\n  - indexed_in_doaj\n  - indexed_in_crossref\n  - indexed_in_pubmed\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_author_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "sat_author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openalex/satellites/sat_author_openalex.sql", "original_file_path": "models/03_dv/openalex/satellites/sat_author_openalex.sql", "unique_id": "model.dbt_unlp.sat_author_openalex", "fqn": ["dbt_unlp", "03_dv", "openalex", "satellites", "sat_author_openalex"], "alias": "sat_author_openalex", "checksum": {"name": "sha256", "checksum": "43c53a58d6c2872bc9a23dca63fa127823acb2ec84bc0eacba2257c8783bfe73"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openalex"}, "created_at": 1738081076.5196645, "relation_name": "\"dw_cic\".\"stg_openalex\".\"sat_author_openalex\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_work2authorship_openalex\"\nsrc_pk: \"author_hk\"\nsrc_hashdiff:\n  source_column: \"author_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - author_id\n  - author_orcid\n  - author_display_name\n\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_work2authorship_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_work2authorship_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_doi": {"database": "dw_cic", "schema": "stg", "name": "dim_doi", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/global/01_dimensions/dim_doi.sql", "original_file_path": "models/04_dm/global/01_dimensions/dim_doi.sql", "unique_id": "model.dbt_unlp.dim_doi", "fqn": ["dbt_unlp", "04_dm", "global", "01_dimensions", "dim_doi"], "alias": "dim_doi", "checksum": {"name": "sha256", "checksum": "2e00dee8d4098090f9f321784848a2b78d8a50b58981b3ba7dc2d376118e0844"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.54438, "relation_name": "\"dw_cic\".\"stg\".\"dim_doi\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH \nhub_doi_openalex AS (\n    SELECT \n        doi_hk, \n        doi, \n        TRUE AS in_openalex,\n        FALSE AS in_openaire,\n        FALSE AS in_dspacedb\n    FROM {{ref('hub_doi_openalex')}}\n),\n\nhub_doi_dspacedb AS (\n    SELECT\n        doi_hk,\n        doi,\n        TRUE AS in_dspacedb,\n        FALSE AS in_openalex,\n        FALSE AS in_openaire\n    FROM {{ref('hub_doi_dspacedb')}}\n),\n\nhub_openaire_doi AS (\n    SELECT\n        doi_hk,\n        doi,\n        FALSE AS in_dspacedb,\n        FALSE AS in_openalex,\n        TRUE AS in_openaire\n    FROM {{ref('hub_openaire_doi')}}\n),\n\nbase AS (\n    SELECT\n        dspacedb.doi_hk,\n        dspacedb.doi,\n        dspacedb.in_dspacedb\n    FROM hub_doi_dspacedb dspacedb\n),\n\nadd_openalex AS (\n    SELECT\n        COALESCE(base.doi_hk, openalex.doi_hk) as doi_hk,\n        COALESCE(base.doi, openalex.doi) as doi,\n        COALESCE(base.in_dspacedb, False) as in_dspacedb,\n        openalex.in_openalex\n    FROM base base\n    FULL OUTER JOIN hub_doi_openalex openalex ON openalex.doi_hk = base.doi_hk\n),\n\nadd_openaire AS (\n    SELECT\n        COALESCE(add_openalex.doi_hk, openaire.doi_hk) as doi_hk,\n        COALESCE(add_openalex.doi, openaire.doi) as doi,\n        COALESCE(add_openalex.in_dspacedb, False) as in_dspacedb,\n        COALESCE(add_openalex.in_openalex, False) as in_openalex,\n        COALESCE(openaire.in_openaire, False) as in_openaire\n    FROM add_openalex\n    FULL OUTER JOIN hub_openaire_doi openaire ON openaire.doi_hk = add_openalex.doi_hk\n),\n\nfinal AS (\n    SELECT\n    doi,\n    CONCAT('https://doi.org/', doi) as doi_url,\n    in_dspacedb,\n    in_openaire,\n    in_openalex\n    FROM add_openaire\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "hub_doi_openalex", "package": null, "version": null}, {"name": "hub_doi_dspacedb", "package": null, "version": null}, {"name": "hub_openaire_doi", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_doi_openalex", "model.dbt_unlp.hub_doi_dspacedb", "model.dbt_unlp.hub_openaire_doi"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_resourcetype": {"database": "dw_cic", "schema": "stg", "name": "dim_resourcetype", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/global/01_dimensions/dim_resourcetype.sql", "original_file_path": "models/04_dm/global/01_dimensions/dim_resourcetype.sql", "unique_id": "model.dbt_unlp.dim_resourcetype", "fqn": ["dbt_unlp", "04_dm", "global", "01_dimensions", "dim_resourcetype"], "alias": "dim_resourcetype", "checksum": {"name": "sha256", "checksum": "422d8bb906262a357e4fabc94cd7c4885e7ae545dba983e11424cdae96d6a545"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.54772, "relation_name": "\"dw_cic\".\"stg\".\"dim_resourcetype\"", "raw_code": "WITH base AS (\n    SELECT \n        sal_resourcetype_coar.resourcetype_hk,\n        sal_resourcetype_coar.worktype_hk,\n        sat_resourcetype_coar.label_es as label,\n        hub_worktype_openalex.worktype_display_name as worktype_openalex,\n        sat_resourcetype_coar.label as coar_label,\n        sat_resourcetype_coar.parent_label_1,\n        sat_resourcetype_coar.parent_label_2,\n        sat_resourcetype_coar.parent_label_3\n    FROM {{ref('sal_resourcetype_coar')}}\n    INNER JOIN {{ref('sat_resourcetype_coar')}} ON sat_resourcetype_coar.resourcetype_hk = sal_resourcetype_coar.resourcetype_hk\n    INNER JOIN {{ref('hub_worktype_openalex')}} ON hub_worktype_openalex.worktype_hk = sal_resourcetype_coar.worktype_hk\n),\nfinal AS (\n    SELECT \n        *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "sal_resourcetype_coar", "package": null, "version": null}, {"name": "sat_resourcetype_coar", "package": null, "version": null}, {"name": "hub_worktype_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.sal_resourcetype_coar", "model.dbt_unlp.sat_resourcetype_coar", "model.dbt_unlp.hub_worktype_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_person": {"database": "dw_cic", "schema": "stg", "name": "dim_person", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/global/01_dimensions/dim_person.sql", "original_file_path": "models/04_dm/global/01_dimensions/dim_person.sql", "unique_id": "model.dbt_unlp.dim_person", "fqn": ["dbt_unlp", "04_dm", "global", "01_dimensions", "dim_person"], "alias": "dim_person", "checksum": {"name": "sha256", "checksum": "89067f02c6d5c598fcf69b0fef6ab22be8ed4838b3b3bd8caab0a874b37c40cd"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.551104, "relation_name": "\"dw_cic\".\"stg\".\"dim_person\"", "raw_code": "WITH base AS (\n    SELECT \n    \n    FROM {{ref('hub_author_openalex')}}\n    INNER JOIN {{ref('sat_author_openalex')}} ON hub_author_openalex.author_hk = sat_author_openalex.author_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_author_openalex", "package": null, "version": null}, {"name": "sat_author_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_author_openalex", "model.dbt_unlp.sat_author_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_source": {"database": "dw_cic", "schema": "stg", "name": "dim_source", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/global/01_dimensions/dim_source.sql", "original_file_path": "models/04_dm/global/01_dimensions/dim_source.sql", "unique_id": "model.dbt_unlp.dim_source", "fqn": ["dbt_unlp", "04_dm", "global", "01_dimensions", "dim_source"], "alias": "dim_source", "checksum": {"name": "sha256", "checksum": "ab06291929b8d85aacf8730148b96a5b4a3028b9c80c06aef7cf0ea4b64d97f8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.5571744, "relation_name": "\"dw_cic\".\"stg\".\"dim_source\"", "raw_code": "{# WITH base AS (\n    SELECT * \n    FROM {{ref('hub_source_openalex')}}\n    INNER JOIN {{ref('sat_source_openalex')}} ON hub_source_openalex.source_hk = sat_source_openalex.source_hk\n)\n\nSELECT * FROM base #}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_date": {"database": "dw_cic", "schema": "stg", "name": "dim_date", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/global/01_dimensions/dim_date.sql", "original_file_path": "models/04_dm/global/01_dimensions/dim_date.sql", "unique_id": "model.dbt_unlp.dim_date", "fqn": ["dbt_unlp", "04_dm", "global", "01_dimensions", "dim_date"], "alias": "dim_date", "checksum": {"name": "sha256", "checksum": "13b3b3ce9adc2fc192a739d42fbd9377e9302b1f350507f548731f15b713664f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.561533, "relation_name": "\"dw_cic\".\"stg\".\"dim_date\"", "raw_code": "{{ dbt_date.get_date_dimension(\"1900-01-01\", \"2030-12-31\") }}", "language": "sql", "refs": [], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.get_date_dimension"], "nodes": []}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_institution": {"database": "dw_cic", "schema": "stg", "name": "dim_institution", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/global/01_dimensions/dim_institution.sql", "original_file_path": "models/04_dm/global/01_dimensions/dim_institution.sql", "unique_id": "model.dbt_unlp.dim_institution", "fqn": ["dbt_unlp", "04_dm", "global", "01_dimensions", "dim_institution"], "alias": "dim_institution", "checksum": {"name": "sha256", "checksum": "cd092375f447155d41a25fc0d0a4fa19fa274a9646619a0f470bd47d9dafc128"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.5894737, "relation_name": "\"dw_cic\".\"stg\".\"dim_institution\"", "raw_code": "WITH base AS (\n    SELECT * \n    FROM {{ref('hub_institution_openalex')}}\n    INNER JOIN {{ref('sat_institution_openalex')}} ON hub_institution_openalex.institution_hk = sat_institution_openalex.institution_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_institution_openalex", "package": null, "version": null}, {"name": "sat_institution_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_institution_openalex", "model.dbt_unlp.sat_institution_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_type_dspacedb": {"database": "dw_cic", "schema": "stg", "name": "dim_type_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/dspacedb/dims/dim_type_dspacedb.sql", "original_file_path": "models/04_dm/dspacedb/dims/dim_type_dspacedb.sql", "unique_id": "model.dbt_unlp.dim_type_dspacedb", "fqn": ["dbt_unlp", "04_dm", "dspacedb", "dims", "dim_type_dspacedb"], "alias": "dim_type_dspacedb", "checksum": {"name": "sha256", "checksum": "b5f7dc7ef6de620c5293186518839155f54eb2b89b3d5e4ed4eb70f10202651d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.6445498, "relation_name": "\"dw_cic\".\"stg\".\"dim_type_dspacedb\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base AS (\n    SELECT \n        hub.type_hk,\n        hub.type,\n        hub.load_datetime,\n        hub.source\n    FROM {{ref('hub_type_dspacedb')}} hub\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_type_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_type_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_handle_dspacedb": {"database": "dw_cic", "schema": "stg", "name": "dim_handle_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/dspacedb/dims/dim_handle_dspacedb.sql", "original_file_path": "models/04_dm/dspacedb/dims/dim_handle_dspacedb.sql", "unique_id": "model.dbt_unlp.dim_handle_dspacedb", "fqn": ["dbt_unlp", "04_dm", "dspacedb", "dims", "dim_handle_dspacedb"], "alias": "dim_handle_dspacedb", "checksum": {"name": "sha256", "checksum": "005e403dc662954da7c9b756eccc8c20062416ba7968f9a069c188982d3c376a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.648904, "relation_name": "\"dw_cic\".\"stg\".\"dim_handle_dspacedb\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base AS (\n    SELECT \n        hub.handle_hk,\n        hub.handle,\n        hub.load_datetime,\n        hub.source\n    FROM {{ref('hub_handle_dspacedb')}} hub\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_handle_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_handle_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_doi_dspacedb": {"database": "dw_cic", "schema": "stg", "name": "dim_doi_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/dspacedb/dims/dim_doi_dspacedb.sql", "original_file_path": "models/04_dm/dspacedb/dims/dim_doi_dspacedb.sql", "unique_id": "model.dbt_unlp.dim_doi_dspacedb", "fqn": ["dbt_unlp", "04_dm", "dspacedb", "dims", "dim_doi_dspacedb"], "alias": "dim_doi_dspacedb", "checksum": {"name": "sha256", "checksum": "4da2286b5c57498f637ba429033b6489bcaffc19cf94d0997e12cb10781b4aa9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.6520278, "relation_name": "\"dw_cic\".\"stg\".\"dim_doi_dspacedb\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base AS (\n    SELECT \n        hub.doi_hk,\n        hub.doi,\n        hub.load_datetime,\n        hub.source\n    FROM {{ref('hub_doi_dspacedb')}} hub\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_doi_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_doi_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.fact_publication_dspacedb": {"database": "dw_cic", "schema": "stg", "name": "fact_publication_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/dspacedb/facts/fact_publication_dspacedb.sql", "original_file_path": "models/04_dm/dspacedb/facts/fact_publication_dspacedb.sql", "unique_id": "model.dbt_unlp.fact_publication_dspacedb", "fqn": ["dbt_unlp", "04_dm", "dspacedb", "facts", "fact_publication_dspacedb"], "alias": "fact_publication_dspacedb", "checksum": {"name": "sha256", "checksum": "d203e512bd039abd024f0b28ef828ecaeee35b69927d3f6bf74d1a796db6a9bb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.6550066, "relation_name": "\"dw_cic\".\"stg\".\"fact_publication_dspacedb\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base AS (\n    SELECT \n        dim_handle.handle,\n        dim_doi.doi,\n        dim_type.type,\n        sat.title,\n        sat.title_lang,\n        sat.dateissued\n    FROM {{ ref('sal_item_dspacedb') }} sal\n    INNER JOIN {{ ref('dim_handle_dspacedb') }} dim_handle ON dim_handle.handle_hk = sal.handle_hk\n    INNER JOIN {{ ref('dim_doi_dspacedb') }} dim_doi ON dim_doi.doi_hk = sal.doi_hk\n    INNER JOIN {{ ref('link_item_type_dspacedb') }} item_type ON item_type.item_hk = sal.item_hk\n    INNER JOIN {{ ref('dim_type_dspacedb') }} dim_type ON dim_type.type_hk = item_type.type_hk\n    INNER JOIN {{ ref('sat_item_dspacedb') }} sat ON sat.item_hk = sal.item_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "sal_item_dspacedb", "package": null, "version": null}, {"name": "dim_handle_dspacedb", "package": null, "version": null}, {"name": "dim_doi_dspacedb", "package": null, "version": null}, {"name": "link_item_type_dspacedb", "package": null, "version": null}, {"name": "dim_type_dspacedb", "package": null, "version": null}, {"name": "sat_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.sal_item_dspacedb", "model.dbt_unlp.dim_handle_dspacedb", "model.dbt_unlp.dim_doi_dspacedb", "model.dbt_unlp.link_item_type_dspacedb", "model.dbt_unlp.dim_type_dspacedb", "model.dbt_unlp.sat_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_resourcetype_openalex": {"database": "dw_cic", "schema": "stg", "name": "dim_resourcetype_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openalex/dims/dim_resourcetype_openalex.sql", "original_file_path": "models/04_dm/openalex/dims/dim_resourcetype_openalex.sql", "unique_id": "model.dbt_unlp.dim_resourcetype_openalex", "fqn": ["dbt_unlp", "04_dm", "openalex", "dims", "dim_resourcetype_openalex"], "alias": "dim_resourcetype_openalex", "checksum": {"name": "sha256", "checksum": "ce5d17ee74a68266b93b94f685dc3319a7a80f7ec57bc138baaf7a2e0c599d03"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.6580389, "relation_name": "\"dw_cic\".\"stg\".\"dim_resourcetype_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base AS (\n    SELECT \n        hub.worktype_hk,\n        hub.worktype_display_name,\n        hub.load_datetime,\n        hub.source\n    FROM {{ref('hub_worktype_openalex')}} hub\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_worktype_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_worktype_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_author_openalex": {"database": "dw_cic", "schema": "stg", "name": "dim_author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openalex/dims/dim_author_openalex.sql", "original_file_path": "models/04_dm/openalex/dims/dim_author_openalex.sql", "unique_id": "model.dbt_unlp.dim_author_openalex", "fqn": ["dbt_unlp", "04_dm", "openalex", "dims", "dim_author_openalex"], "alias": "dim_author_openalex", "checksum": {"name": "sha256", "checksum": "30d2621c6431f40af13df51dc73ff1897f3d2ac291c8bdd387928eacb443f128"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.6622436, "relation_name": "\"dw_cic\".\"stg\".\"dim_author_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT\n        work2author.work_hk,\n        hub_orcid.orcid\n    FROM {{ref('link_work2author_openalex')}} work2author\n    INNER JOIN {{ref('hub_work_openalex')}} hub_orcid ON hub_orcid.orcid_hk = work2author.orcid_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "link_work2author_openalex", "package": null, "version": null}, {"name": "hub_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.link_work2author_openalex", "model.dbt_unlp.hub_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_pid_openalex": {"database": "dw_cic", "schema": "stg", "name": "dim_pid_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openalex/dims/dim_pid_openalex.sql", "original_file_path": "models/04_dm/openalex/dims/dim_pid_openalex.sql", "unique_id": "model.dbt_unlp.dim_pid_openalex", "fqn": ["dbt_unlp", "04_dm", "openalex", "dims", "dim_pid_openalex"], "alias": "dim_pid_openalex", "checksum": {"name": "sha256", "checksum": "55bf594e193ee37ff32af7ded8a275929f4cace5eb64113e54077f92eebc470b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.6653917, "relation_name": "\"dw_cic\".\"stg\".\"dim_pid_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT\n        sal_work.work_hk,\n        hub_work.work_id,\n        hub_doi.doi,\n        hub_mag.mag,\n        hub_pmcid.pmcid,\n        hub_pmid.pmid\n    FROM {{ref('sal_work_openalex')}} sal_work\n    INNER JOIN {{ref('hub_work_openalex')}} hub_work ON hub_work.work_hk = sal_work.work_hk\n    INNER JOIN {{ref('hub_doi_openalex')}} hub_doi ON hub_doi.doi_hk = sal_work.doi_hk\n    INNER JOIN {{ref('hub_mag_openalex')}} hub_mag ON hub_mag.mag_hk = sal_work.mag_hk\n    INNER JOIN {{ref('hub_pmcid_openalex')}} hub_pmcid ON hub_pmcid.pmcid_hk = sal_work.pmcid_hk\n    INNER JOIN {{ref('hub_pmid_openalex')}} hub_pmid ON hub_pmid.pmid_hk = sal_work.pmid_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "sal_work_openalex", "package": null, "version": null}, {"name": "hub_work_openalex", "package": null, "version": null}, {"name": "hub_doi_openalex", "package": null, "version": null}, {"name": "hub_mag_openalex", "package": null, "version": null}, {"name": "hub_pmcid_openalex", "package": null, "version": null}, {"name": "hub_pmid_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.sal_work_openalex", "model.dbt_unlp.hub_work_openalex", "model.dbt_unlp.hub_doi_openalex", "model.dbt_unlp.hub_mag_openalex", "model.dbt_unlp.hub_pmcid_openalex", "model.dbt_unlp.hub_pmid_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.fact_publication_openalex": {"database": "dw_cic", "schema": "stg", "name": "fact_publication_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openalex/facts/fact_publication_openalex.sql", "original_file_path": "models/04_dm/openalex/facts/fact_publication_openalex.sql", "unique_id": "model.dbt_unlp.fact_publication_openalex", "fqn": ["dbt_unlp", "04_dm", "openalex", "facts", "fact_publication_openalex"], "alias": "fact_publication_openalex", "checksum": {"name": "sha256", "checksum": "e45454e88792c95cef28c1d3dceb7431b0b685b5c38f0bbcc7264e8fdce70312"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738081076.6688929, "relation_name": "\"dw_cic\".\"stg\".\"fact_publication_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT\n        {# sal.work_hk, #}\n        dim_pid.work_id as work_url,\n        sat.title,\n        sat.publication_date as publication_date,\n        sat.countries_distinct_count,\n        sat.institutions_distinct_count,\n        sat.fwci,\n        sat.has_fulltext,\n        sat.fulltext_origin,\n        sat.cited_by_count,\n        sat.is_retracted,\n        sat.is_paratext,\n        sat.locations_count,\n        sat.referenced_works_count,\n        sat.updated_date,\n        sat.created_date,\n        sat.any_repository_has_fulltext,\n        sat.is_oa,\n        sat.oa_status,\n        sat.oa_url,\n        sat.cited_by_percentile_year_max,\n        sat.cited_by_percentile_year_min,\n        sat.citation_normalized_percentile_is_in_top_10_percent,\n        sat.citation_normalized_percentile_is_in_top_1_percent,\n        sat.citation_normalized_percentile_value,\n        sat.apc_list_currency,\n        sat.apc_list_provenance,\n        sat.apc_list_value,\n        sat.apc_list_value_usd,\n        sat.apc_paid_currency,\n        sat.apc_paid_provenance,\n        sat.apc_paid_value,\n        sat.apc_paid_value_usd,\n        sat.indexed_in_arxiv,\n        sat.indexed_in_doaj,\n        sat.indexed_in_crossref,\n        sat.indexed_in_pubmed,\n        dim_pid.doi,\n        dim_pid.mag,\n        dim_pid.pmcid,\n        dim_pid.pmid,\n        dim_resourcetype_openalex.worktype_display_name as worktype_label\n    FROM {{ref('sal_work_openalex')}} sal\n    INNER JOIN {{ref('sat_work_openalex')}} sat ON sal.work_hk = sat.work_hk\n    INNER JOIN {{ref('dim_pid_openalex')}} dim_pid ON dim_pid.work_hk = sal.work_hk\n    INNER JOIN {{ref('link_work2worktype_openalex')}} ON link_work2worktype_openalex.work_hk = sal.work_hk\n    INNER JOIN {{ref('dim_resourcetype_openalex')}} ON dim_resourcetype_openalex.worktype_hk = link_work2worktype_openalex.worktype_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "sal_work_openalex", "package": null, "version": null}, {"name": "sat_work_openalex", "package": null, "version": null}, {"name": "dim_pid_openalex", "package": null, "version": null}, {"name": "link_work2worktype_openalex", "package": null, "version": null}, {"name": "dim_resourcetype_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.sal_work_openalex", "model.dbt_unlp.sat_work_openalex", "model.dbt_unlp.dim_pid_openalex", "model.dbt_unlp.link_work2worktype_openalex", "model.dbt_unlp.dim_resourcetype_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_resourcetype_coar2worktype_openalex": {"database": "dw_cic", "schema": "stg_coar", "name": "stg_resourcetype_coar2worktype_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/coar/stg_resourcetype_coar2worktype_openalex.sql", "original_file_path": "models/02_stg/coar/stg_resourcetype_coar2worktype_openalex.sql", "unique_id": "model.dbt_unlp.stg_resourcetype_coar2worktype_openalex", "fqn": ["dbt_unlp", "02_stg", "coar", "stg_resourcetype_coar2worktype_openalex"], "alias": "stg_resourcetype_coar2worktype_openalex", "checksum": {"name": "sha256", "checksum": "cc1ecd0c0e1f1adcc99fb7b7e7c6bcb212112c6db82fd3640a89b5d49024da98"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "coar"}, "created_at": 1738081076.672523, "relation_name": "\"dw_cic\".\"stg_coar\".\"stg_resourcetype_coar2worktype_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'map_resourcetype_coar2worktype_openalex'\nderived_columns:\n  source: \"!SEED\"\n  load_datetime: load_datetime\nhashed_columns:\n  resourcetype_hk: resourcetype_id\n  worktype_hk: worktype\n  sal_resourcetype_hk:\n    - resourcetype_id\n    - worktype\n  resourcetype_hashdiff:\n    is_hashdiff: true\n    columns:\n      - resourcetype_id\n      - worktype\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{% set source_model = metadata_dict['source_model'] %}\n{% set derived_columns = metadata_dict['derived_columns'] %}\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=source_model,\n                     derived_columns=derived_columns,\n                     null_columns=none,\n                     hashed_columns=hashed_columns,\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "map_resourcetype_coar2worktype_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.map_resourcetype_coar2worktype_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_resourcetype_coar": {"database": "dw_cic", "schema": "stg_coar", "name": "stg_resourcetype_coar", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/coar/stg_resourcetype_coar.sql", "original_file_path": "models/02_stg/coar/stg_resourcetype_coar.sql", "unique_id": "model.dbt_unlp.stg_resourcetype_coar", "fqn": ["dbt_unlp", "02_stg", "coar", "stg_resourcetype_coar"], "alias": "stg_resourcetype_coar", "checksum": {"name": "sha256", "checksum": "a32d7f0f889895254f456ea1d3a1c2970c827159d9b4031778c9c5fee77b7e46"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "coar"}, "created_at": 1738081076.6985562, "relation_name": "\"dw_cic\".\"stg_coar\".\"stg_resourcetype_coar\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'raw_resourcetype_coar'\nderived_columns:\n  source: \"!SEED\"\n  load_datetime: load_datetime\nhashed_columns:\n  resourcetype_hk: resourcetype_id\n  resourcetype_hashdiff:\n    is_hashdiff: true\n    columns:\n      - resourcetype_id\n      - label\n      - parent_label_1\n      - parent_label_2\n      - parent_label_3\n      - label_es\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{% set source_model = metadata_dict['source_model'] %}\n{% set derived_columns = metadata_dict['derived_columns'] %}\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=source_model,\n                     derived_columns=derived_columns,\n                     null_columns=none,\n                     hashed_columns=hashed_columns,\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "raw_resourcetype_coar", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.raw_resourcetype_coar"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_openaire_researchproduct": {"database": "dw_cic", "schema": "stg_openaire", "name": "stg_openaire_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openaire/stg_openaire_researchproduct.sql", "original_file_path": "models/02_stg/openaire/stg_openaire_researchproduct.sql", "unique_id": "model.dbt_unlp.stg_openaire_researchproduct", "fqn": ["dbt_unlp", "02_stg", "openaire", "stg_openaire_researchproduct"], "alias": "stg_openaire_researchproduct", "checksum": {"name": "sha256", "checksum": "867d17635e5425f908e6029c926a20a390d207632407b47d7b63ee2b6cd11f94"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "openaire"}, "created_at": 1738081076.7534015, "relation_name": "\"dw_cic\".\"stg_openaire\".\"stg_openaire_researchproduct\"", "raw_code": "{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"openaire_researchproduct\"\nderived_columns:\n  source: \"!OPENAIRE\"\n  load_datetime: load_datetime\n  effective_from: date_acceptance\n  start_date: date_acceptance\n  end_date: to_date('9999-12-31', 'YYYY-MM-DD')\nhashed_columns:\n  researchproduct_hk: researchproduct_id\n  researchproduct_hashdiff:\n    is_hashdiff: true\n    columns:\n      - researchproduct_id\n      - date_collection\n      - date_acceptance\n      - description\n      - publisher\n      - isgreen\n      - openaccesscolor\n      - isindiamondjournal\n      - publiclyfunded\n      - load_datetime\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "openaire_researchproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.openaire_researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_researchproduct2date_openaire": {"database": "dw_cic", "schema": "stg_openaire", "name": "stg_researchproduct2date_openaire", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openaire/stg_researchproduct2date_openaire.sql", "original_file_path": "models/02_stg/openaire/stg_researchproduct2date_openaire.sql", "unique_id": "model.dbt_unlp.stg_researchproduct2date_openaire", "fqn": ["dbt_unlp", "02_stg", "openaire", "stg_researchproduct2date_openaire"], "alias": "stg_researchproduct2date_openaire", "checksum": {"name": "sha256", "checksum": "23bb8c46ff7601f01d31d78d1a245d2f67c8c22e52e350a0fce575a5a7e5f605"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "openaire"}, "created_at": 1738081076.7894547, "relation_name": "\"dw_cic\".\"stg_openaire\".\"stg_researchproduct2date_openaire\"", "raw_code": "{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"openaire_researchproduct2relevantdate\"\nderived_columns:\n  source: \"!OPENAIRE\"\n  load_datetime: load_datetime\nhashed_columns:\n  researchproduct_hk: researchproduct_id\n  date_hk: date_id\n  researchproduct2date_hk:\n    - researchproduct_id\n    - date_id\n  researchproduct2date_hashdiff:\n    is_hashdiff: true\n    columns:\n      - researchproduct_id\n      - date_id\n      - date_text\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "openaire_researchproduct2relevantdate", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.openaire_researchproduct2relevantdate"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_researchproduct2pid_openaire": {"database": "dw_cic", "schema": "stg_openaire", "name": "stg_researchproduct2pid_openaire", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openaire/stg_researchproduct2pid_openaire.sql", "original_file_path": "models/02_stg/openaire/stg_researchproduct2pid_openaire.sql", "unique_id": "model.dbt_unlp.stg_researchproduct2pid_openaire", "fqn": ["dbt_unlp", "02_stg", "openaire", "stg_researchproduct2pid_openaire"], "alias": "stg_researchproduct2pid_openaire", "checksum": {"name": "sha256", "checksum": "16f8f2a2d0f47be75c8bab49f5dbb1addf4efe0f6d17333cd0f8f6cdad26ecd4"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "openaire"}, "created_at": 1738081076.8210416, "relation_name": "\"dw_cic\".\"stg_openaire\".\"stg_researchproduct2pid_openaire\"", "raw_code": "{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"openaire_researchproduct2pid\"\nderived_columns:\n  source: \"!OPENAIRE\"\n  load_datetime: load_datetime\nhashed_columns:\n  researchproduct_hk: researchproduct_id\n  doi_hk: doi\n  pmid_hk: pmid\n  pmc_hk: pmc\n  arxiv_hk: arxiv\n  handle_hk: handle\n  mag_hk: mag\n  researchproduct2pid_hk: \n    - researchproduct_id\n    - doi\n    - pmid\n    - pmc\n    - arxiv\n    - handle\n    - mag\n  researchproduct2pid_hashdiff:\n    is_hashdiff: true\n    columns:\n      - researchproduct_id\n      - doi\n      - pmid\n      - pmc\n      - arxiv\n      - handle\n      - mag\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "openaire_researchproduct2pid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.openaire_researchproduct2pid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_item_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "stg_item_dspacedb", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/dspacedb/stg_item_dspacedb.sql", "original_file_path": "models/02_stg/dspacedb/stg_item_dspacedb.sql", "unique_id": "model.dbt_unlp.stg_item_dspacedb", "fqn": ["dbt_unlp", "02_stg", "dspacedb", "stg_item_dspacedb"], "alias": "stg_item_dspacedb", "checksum": {"name": "sha256", "checksum": "b1a715b6550348e1dd1592f24b62eeee516d5b7cd104be3e15df73efca4c6b11"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "dspacedb"}, "created_at": 1738081076.8583906, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"stg_item_dspacedb\"", "raw_code": "{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"norm_item_dspacedb\"\nderived_columns:\n  source: \"!IR_DSPACEDB\"\n  load_datetime: load_datetime\n  effective_from: last_modified\n  start_date: last_modified\n  end_date: to_date('9999-12-31', 'YYYY-MM-DD')\nhashed_columns:\n  item_hk: uuid\n  doi_hk: doi\n  item_doi_hk:\n    - uuid\n    - doi\n  handle_hk: handle\n  item_handle_hk:\n    - uuid\n    - handle\n  sal_item_hk:\n    - uuid\n    - doi\n    - handle  \n  submitter_hk: submitter_id\n  item_submitter_hk:\n    - uuid\n    - submitter_id\n  owningcollection_hk: owning_collection\n  item_owningcollection_hk:\n    - uuid\n    - owning_collection\n  type_hk: type\n  item_type_hk:\n    - uuid\n    - type\n  item_hashdiff:\n    is_hashdiff: true\n    columns:\n      - in_archive\n      - withdrawn\n      - last_modified\n      - discoverable\n      - uuid\n      - submitter_id\n      - owning_collection\n      - load_datetime\n      - title\n      - title_lang\n      - type\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n{% set source_model = metadata_dict['source_model'] %}\n{% set derived_columns = metadata_dict['derived_columns'] %}\n{% set hashed_columns = metadata_dict['hashed_columns'] %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=source_model,\n                     derived_columns=derived_columns,\n                     null_columns=none,\n                     hashed_columns=hashed_columns,\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "norm_item_dspacedb", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.norm_item_dspacedb"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_language_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "stg_language_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openalex/stg_language_openalex.sql", "original_file_path": "models/02_stg/openalex/stg_language_openalex.sql", "unique_id": "model.dbt_unlp.stg_language_openalex", "fqn": ["dbt_unlp", "02_stg", "openalex", "stg_language_openalex"], "alias": "stg_language_openalex", "checksum": {"name": "sha256", "checksum": "b70d7e13c42a25fd6aa89faba55dfd55b12502c32187fee9783a119f88b505d4"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "openalex"}, "created_at": 1738081077.061819, "relation_name": "\"dw_cic\".\"stg_openalex\".\"stg_language_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'openalex': 'language'\nderived_columns:\n  source: \"!OPENALEX\"\n  load_datetime: load_datetime\nhashed_columns:\n  language_hk: language_id\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [], "sources": [["openalex", "language"]], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["source.dbt_unlp.openalex.language"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_work_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "stg_work_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openalex/stg_work_openalex.sql", "original_file_path": "models/02_stg/openalex/stg_work_openalex.sql", "unique_id": "model.dbt_unlp.stg_work_openalex", "fqn": ["dbt_unlp", "02_stg", "openalex", "stg_work_openalex"], "alias": "stg_work_openalex", "checksum": {"name": "sha256", "checksum": "8acf4fc00806a4868221d741ec42ae78fe757e1dd8d0049401b795bdbe2719cb"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "openalex"}, "created_at": 1738081077.077183, "relation_name": "\"dw_cic\".\"stg_openalex\".\"stg_work_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"norm_work_openalex\"\nderived_columns:\n  source: \"!OPENALEX\"\n  load_datetime: load_datetime\n  effective_from: publication_date\n  start_date: publication_date\n  end_date: to_date('9999-12-31', 'YYYY-MM-DD')\nhashed_columns:\n  work_hk: work_id\n  doi_hk: doi\n  mag_hk: mag\n  pmid_hk: pmid\n  pmcid_hk: pmcid\n  sal_work_hk:\n    - work_id\n    - doi\n    - mag\n    - pmid\n    - pmcid\n  worktype_hk: type\n  work2worktype_hk:\n    - work_id\n    - type\n  language_hk: language\n  work2language_hk:\n    - work_id\n    - language\n  work_hashdiff:\n    is_hashdiff: true\n    columns:\n      - work_id\n      - doi\n      - title\n      - display_name\n      - publication_date\n      - language\n      - type\n      - countries_distinct_count\n      - institutions_distinct_count\n      - fwci\n      - has_fulltext\n      - fulltext_origin\n      - cited_by_count\n      - is_retracted\n      - is_paratext\n      - locations_count\n      - referenced_works_count\n      - updated_date\n      - created_date\n      - mag\n      - pmcid\n      - pmid\n      - any_repository_has_fulltext\n      - is_oa\n      - oa_status\n      - oa_url\n      - cited_by_percentile_year_max\n      - cited_by_percentile_year_min\n      - citation_normalized_percentile_is_in_top_10_percent\n      - citation_normalized_percentile_is_in_top_1_percent\n      - citation_normalized_percentile_value\n      - apc_list_currency\n      - apc_list_provenance\n      - apc_list_value\n      - apc_list_value_usd\n      - apc_paid_currency\n      - apc_paid_provenance\n      - apc_paid_value\n      - apc_paid_value_usd\n      - indexed_in_arxiv\n      - indexed_in_doaj\n      - indexed_in_crossref\n      - indexed_in_pubmed\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "norm_work_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.norm_work_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_work2location_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "stg_work2location_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openalex/stg_work2location_openalex.sql", "original_file_path": "models/02_stg/openalex/stg_work2location_openalex.sql", "unique_id": "model.dbt_unlp.stg_work2location_openalex", "fqn": ["dbt_unlp", "02_stg", "openalex", "stg_work2location_openalex"], "alias": "stg_work2location_openalex", "checksum": {"name": "sha256", "checksum": "ca3fc5b5cbab3d5817a4d24e5ff41c3ed9e4619acb468751dd5efaeec8d3418d"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "openalex"}, "created_at": 1738081077.1494029, "relation_name": "\"dw_cic\".\"stg_openalex\".\"stg_work2location_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'openalex': 'work2location'\nderived_columns:\n  source: \"!OPENALEX\"\n  load_datetime: load_datetime\nhashed_columns:\n  work_hk: work_id\n  source_hk: source_id\n  work_source_hk:\n    - work_id\n    - source_id\n  source_type_hk: source_type\n  work_source_type:\n    - work_id\n    - source_type\n  source_host_organization_hk: source_host_organization\n  work_source_host_organization:\n    - work_id\n    - source_host_organization\n  license_hk: license\n  version_hk: version\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [], "sources": [["openalex", "work2location"]], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["source.dbt_unlp.openalex.work2location"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_worktype_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "stg_worktype_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openalex/stg_worktype_openalex.sql", "original_file_path": "models/02_stg/openalex/stg_worktype_openalex.sql", "unique_id": "model.dbt_unlp.stg_worktype_openalex", "fqn": ["dbt_unlp", "02_stg", "openalex", "stg_worktype_openalex"], "alias": "stg_worktype_openalex", "checksum": {"name": "sha256", "checksum": "5a21a087477ce88481ef4253d9293fb8fa9b072ade68925e3e08492fa8012a49"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "openalex"}, "created_at": 1738081077.1802156, "relation_name": "\"dw_cic\".\"stg_openalex\".\"stg_worktype_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'openalex': 'worktype'\nderived_columns:\n  source: \"!OPENALEX\"\n  load_datetime: load_datetime\nhashed_columns:\n  worktype_hk: worktype_display_name\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [], "sources": [["openalex", "worktype"]], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["source.dbt_unlp.openalex.worktype"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_work2authorship_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "stg_work2authorship_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openalex/stg_work2authorship_openalex.sql", "original_file_path": "models/02_stg/openalex/stg_work2authorship_openalex.sql", "unique_id": "model.dbt_unlp.stg_work2authorship_openalex", "fqn": ["dbt_unlp", "02_stg", "openalex", "stg_work2authorship_openalex"], "alias": "stg_work2authorship_openalex", "checksum": {"name": "sha256", "checksum": "d829787acbbdb19027c2c7abcec62fd4437c0b681a09c38bc29eb4f9de5e0a31"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "openalex"}, "created_at": 1738081077.1959283, "relation_name": "\"dw_cic\".\"stg_openalex\".\"stg_work2authorship_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'openalex': 'work2authorship'\nderived_columns:\n  source: \"!OPENALEX\"\n  load_datetime: load_datetime\nhashed_columns:\n  work_hk: work_id\n  author_hk: author_id\n  work2author_hk:\n    - work_id\n    - author_id\n  orcid_hk: author_orcid\n  author2orcid_hk:\n    - author_id\n    - author_orcid\n  institution_hk: institution_id\n  work_institution_hk:\n    - work_id\n    - institution_id\n  ror_hk: institution_ror\n  institution2ror_hk:\n    - institution_id\n    - institution_ror\n  author_hashdiff:\n    is_hashdiff: true\n    columns:\n      - author_display_name\n  institution_hashdiff:\n    is_hashdiff: true\n    columns:\n      - institution_display_name\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [], "sources": [["openalex", "work2authorship"]], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["source.dbt_unlp.openalex.work2authorship"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_author_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "stg_author_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openalex/stg_author_openalex.sql", "original_file_path": "models/02_stg/openalex/stg_author_openalex.sql", "unique_id": "model.dbt_unlp.stg_author_openalex", "fqn": ["dbt_unlp", "02_stg", "openalex", "stg_author_openalex"], "alias": "stg_author_openalex", "checksum": {"name": "sha256", "checksum": "416cb65b82482160be696f3211b5aadf016af4f10e0bd3537434935072f37cfe"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "openalex"}, "created_at": 1738081077.2324593, "relation_name": "\"dw_cic\".\"stg_openalex\".\"stg_author_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"norm_author_openalex\"\nderived_columns:\n  source: \"!OPENALEX\"\n  load_datetime: load_datetime\nhashed_columns:\n  author_hk: author_id\n  orcid_hk: orcid\n  author_hashdiff:\n    is_hashdiff: true\n    columns:\n      - author_id\n      - orcid\n      - display_name\n      - works_count\n      - cited_by_count\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "norm_author_openalex", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.norm_author_openalex"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_license_openalex": {"database": "dw_cic", "schema": "stg_openalex", "name": "stg_license_openalex", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openalex/stg_license_openalex.sql", "original_file_path": "models/02_stg/openalex/stg_license_openalex.sql", "unique_id": "model.dbt_unlp.stg_license_openalex", "fqn": ["dbt_unlp", "02_stg", "openalex", "stg_license_openalex"], "alias": "stg_license_openalex", "checksum": {"name": "sha256", "checksum": "377dc5625008e3ff85952fcb259659df7ad934cee13b7e15055349e33cfbd8e3"}, "config": {"enabled": true, "alias": null, "schema": "openalex", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "openalex"}, "created_at": 1738081077.2555068, "relation_name": "\"dw_cic\".\"stg_openalex\".\"stg_license_openalex\"", "raw_code": "{{ config(materialized='table') }}\n\n{%- set yaml_metadata -%}\nsource_model: \n  'openalex': 'license'\nderived_columns:\n  source: \"!OPENALEX\"\n  load_datetime: load_datetime\nhashed_columns:\n  license_hk: license_id\n\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [], "sources": [["openalex", "license"]], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["source.dbt_unlp.openalex.license"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "seed.dbt_unlp.seed_accessright_coar": {"database": "dw_cic", "schema": "stg_coar", "name": "seed_accessright_coar", "resource_type": "seed", "package_name": "dbt_unlp", "path": "coar/seed_accessright_coar.csv", "original_file_path": "seeds/coar/seed_accessright_coar.csv", "unique_id": "seed.dbt_unlp.seed_accessright_coar", "fqn": ["dbt_unlp", "coar", "seed_accessright_coar"], "alias": "seed_accessright_coar", "checksum": {"name": "sha256", "checksum": "c989ab0fbb4d4545a29f025577ef7849327887bbd860254f489332002f4fcb5a"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "coar"}, "created_at": 1738081077.2801335, "relation_name": "\"dw_cic\".\"stg_coar\".\"seed_accessright_coar\"", "raw_code": "", "root_path": "/home/pablo/dev/CIC/dw-cic/dbt-cic", "depends_on": {"macros": []}}, "seed.dbt_unlp.seed_resourcetype_coar": {"database": "dw_cic", "schema": "stg_coar", "name": "seed_resourcetype_coar", "resource_type": "seed", "package_name": "dbt_unlp", "path": "coar/seed_resourcetype_coar.csv", "original_file_path": "seeds/coar/seed_resourcetype_coar.csv", "unique_id": "seed.dbt_unlp.seed_resourcetype_coar", "fqn": ["dbt_unlp", "coar", "seed_resourcetype_coar"], "alias": "seed_resourcetype_coar", "checksum": {"name": "sha256", "checksum": "60340abc499860f6a7acf53e16c9ecc856010248d209b59f2cae6a85e297bc01"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "coar"}, "created_at": 1738081077.2829053, "relation_name": "\"dw_cic\".\"stg_coar\".\"seed_resourcetype_coar\"", "raw_code": "", "root_path": "/home/pablo/dev/CIC/dw-cic/dbt-cic", "depends_on": {"macros": []}}, "seed.dbt_unlp.seed_resourcetype_coar2worktype_openalex": {"database": "dw_cic", "schema": "stg_coar", "name": "seed_resourcetype_coar2worktype_openalex", "resource_type": "seed", "package_name": "dbt_unlp", "path": "coar/seed_resourcetype_coar2worktype_openalex.csv", "original_file_path": "seeds/coar/seed_resourcetype_coar2worktype_openalex.csv", "unique_id": "seed.dbt_unlp.seed_resourcetype_coar2worktype_openalex", "fqn": ["dbt_unlp", "coar", "seed_resourcetype_coar2worktype_openalex"], "alias": "seed_resourcetype_coar2worktype_openalex", "checksum": {"name": "sha256", "checksum": "1e6c804e40b259e04526b6ebd2468539ae13420b2af54cc8734bcc040969fc14"}, "config": {"enabled": true, "alias": null, "schema": "coar", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "coar"}, "created_at": 1738081077.28548, "relation_name": "\"dw_cic\".\"stg_coar\".\"seed_resourcetype_coar2worktype_openalex\"", "raw_code": "", "root_path": "/home/pablo/dev/CIC/dw-cic/dbt-cic", "depends_on": {"macros": []}}, "seed.dbt_unlp.seed_dspacedb": {"database": "dw_cic", "schema": "stg_dspacedb", "name": "seed_dspacedb", "resource_type": "seed", "package_name": "dbt_unlp", "path": "dspacedb/seed_dspacedb.csv", "original_file_path": "seeds/dspacedb/seed_dspacedb.csv", "unique_id": "seed.dbt_unlp.seed_dspacedb", "fqn": ["dbt_unlp", "dspacedb", "seed_dspacedb"], "alias": "seed_dspacedb", "checksum": {"name": "sha256", "checksum": "f327f66075935aaa62fccd6468163bdc8a744ae0c6ec0ef58ce34ff8c123df92"}, "config": {"enabled": true, "alias": null, "schema": "dspacedb", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "delimiter": ",", "quote_columns": null}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "dspacedb"}, "created_at": 1738081077.2880473, "relation_name": "\"dw_cic\".\"stg_dspacedb\".\"seed_dspacedb\"", "raw_code": "", "root_path": "/home/pablo/dev/CIC/dw-cic/dbt-cic", "depends_on": {"macros": []}}, "model.dbt_unlp.dim_date_issued_openaire": {"database": "dw_cic", "schema": "stg", "name": "dim_date_issued_openaire", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openaire/dims/dim_date_issued_openaire.sql", "original_file_path": "models/04_dm/openaire/dims/dim_date_issued_openaire.sql", "unique_id": "model.dbt_unlp.dim_date_issued_openaire", "fqn": ["dbt_unlp", "04_dm", "openaire", "dims", "dim_date_issued_openaire"], "alias": "dim_date_issued_openaire", "checksum": {"name": "sha256", "checksum": "3f8fe0909f7d49d8192b4ab95c174db0d6b715d17eed0be1ec5b16e5cd72fd5b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738082777.2771394, "relation_name": "\"dw_cic\".\"stg\".\"dim_date_issued_openaire\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT \n        researchproduct_hk,\n        date_text\n    FROM {{ref('dim_date_openaire')}} \n    WHERE date_id = 'issued'\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "dim_date_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.dim_date_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_date_openaire": {"database": "dw_cic", "schema": "stg", "name": "dim_date_openaire", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openaire/dims/dim_date_openaire.sql", "original_file_path": "models/04_dm/openaire/dims/dim_date_openaire.sql", "unique_id": "model.dbt_unlp.dim_date_openaire", "fqn": ["dbt_unlp", "04_dm", "openaire", "dims", "dim_date_openaire"], "alias": "dim_date_openaire", "checksum": {"name": "sha256", "checksum": "cfd1961ea4bc57596c42976b00ee8551127877a4f809107e74ff8d9cb7868530"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738082777.2818797, "relation_name": "\"dw_cic\".\"stg\".\"dim_date_openaire\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT \n        lnk.researchproduct_hk,\n        hub_researchproduct.researchproduct_id,\n        hub_date.date_id,\n        sat_date.date_text\n    FROM {{ref('lnk_openaire_researchproduct2date')}} lnk\n    INNER JOIN {{ref('hub_openaire_researchproduct')}} hub_researchproduct ON hub_researchproduct.researchproduct_hk = lnk.researchproduct_hk\n    INNER JOIN {{ref('hub_openaire_date')}} hub_date ON hub_date.date_hk = lnk.date_hk\n    INNER JOIN {{ref('sat_openaire_researchproduct2date')}} sat_date ON sat_date.researchproduct2date_hk = lnk.researchproduct2date_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "lnk_openaire_researchproduct2date", "package": null, "version": null}, {"name": "hub_openaire_researchproduct", "package": null, "version": null}, {"name": "hub_openaire_date", "package": null, "version": null}, {"name": "sat_openaire_researchproduct2date", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.lnk_openaire_researchproduct2date", "model.dbt_unlp.hub_openaire_researchproduct", "model.dbt_unlp.hub_openaire_date", "model.dbt_unlp.sat_openaire_researchproduct2date"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.fact_publication": {"database": "dw_cic", "schema": "stg", "name": "fact_publication", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/global/02_facts/fact_publication.sql", "original_file_path": "models/04_dm/global/02_facts/fact_publication.sql", "unique_id": "model.dbt_unlp.fact_publication", "fqn": ["dbt_unlp", "04_dm", "global", "02_facts", "fact_publication"], "alias": "fact_publication", "checksum": {"name": "sha256", "checksum": "a46173a6ac82cc83085dafbb0b5a80ce68dfd411d5c7ad9663a61318a9f2534e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738082777.320139, "relation_name": "\"dw_cic\".\"stg\".\"fact_publication\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH dspacedb as (\n    SELECT\n        dspacedb.title,\n        dspacedb.doi,\n        dspacedb.dateissued\n    FROM {{ ref('fact_publication_dspacedb') }} dspacedb\n),\n\nadd_openalex as (\n    SELECT\n        COALESCE(dspacedb.title, openalex.title) as title,\n        COALESCE(dspacedb.doi, openalex.doi) as doi,\n        COALESCE(dspacedb.dateissued, openalex.publication_date) as publication_date,\n        COALESCE(openalex.countries_distinct_count, 0) as openalex_countries_distinct_count,\n        COALESCE(openalex.institutions_distinct_count, 0) as openalex_institutions_distinct_count,\n        COALESCE(openalex.fwci, 0) as openalex_fwci,\n        COALESCE(openalex.has_fulltext, false) as openalex_has_fulltext,\n        COALESCE(openalex.fulltext_origin, 'NO DATA') as openalex_fulltext_origin,\n        COALESCE(openalex.cited_by_count, 0) as openalex_cited_by_count,\n        COALESCE(openalex.is_retracted, false) as openalex_is_retracted,\n        COALESCE(openalex.is_paratext, false) as openalex_is_paratext,\n        COALESCE(openalex.locations_count, 0) as openalex_locations_count,\n        COALESCE(openalex.referenced_works_count, 0) as openalex_referenced_works_count,\n        COALESCE(openalex.any_repository_has_fulltext, false) as openalex_any_repository_has_fulltext,\n        COALESCE(openalex.is_oa, false) as openalex_is_oa,\n        COALESCE(openalex.oa_status, 'NO DATA') as openalex_oa_status,\n        COALESCE(openalex.oa_url, 'NO DATA') as openalex_oa_url,\n        COALESCE(openalex.cited_by_percentile_year_max, 0) as openalex_cited_by_percentile_year_max,\n        COALESCE(openalex.cited_by_percentile_year_min, 0) as openalex_cited_by_percentile_year_min,\n        COALESCE(openalex.citation_normalized_percentile_is_in_top_10_percent, 'NO DATA') as openalex_citation_normalized_percentile_is_in_top_10_percent,\n        COALESCE(openalex.citation_normalized_percentile_is_in_top_1_percent, 'NO DATA') as openalex_citation_normalized_percentile_is_in_top_1_percent,\n        COALESCE(openalex.citation_normalized_percentile_value, 0) as openalex_citation_normalized_percentile_value,\n        COALESCE(openalex.apc_list_currency, 'NO DATA') as openalex_apc_list_currency,\n        COALESCE(openalex.apc_list_provenance, 'NO DATA') as openalex_apc_list_provenance,\n        COALESCE(openalex.apc_list_value, 0) as openalex_apc_list_value,\n        COALESCE(openalex.apc_list_value_usd, 0) as openalex_apc_list_value_usd,\n        COALESCE(openalex.apc_paid_currency, 'NO DATA') as openalex_apc_paid_currency,\n        COALESCE(openalex.apc_paid_provenance, 'NO DATA') as openalex_apc_paid_provenance,\n        COALESCE(openalex.apc_paid_value, 0) as openalex_apc_paid_value,\n        COALESCE(openalex.apc_paid_value_usd, 0) as openalex_apc_paid_value_usd,\n        COALESCE(openalex.indexed_in_arxiv, false) as openalex_indexed_in_arxiv,\n        COALESCE(openalex.indexed_in_doaj, false) as openalex_indexed_in_doaj,\n        COALESCE(openalex.indexed_in_crossref, false) as openalex_indexed_in_crossref,\n        COALESCE(openalex.indexed_in_pubmed, false) as openalex_indexed_in_pubmed\n    FROM dspacedb\n    LEFT JOIN {{ ref('fact_publication_openalex') }} openalex ON openalex.doi = dspacedb.doi\n),\n\nbase as (\n    SELECT\n        add_openalex.title,\n        add_openalex.doi,\n        add_openalex.openalex_countries_distinct_count,\n        add_openalex.openalex_institutions_distinct_count,\n        add_openalex.openalex_fwci,\n        add_openalex.openalex_has_fulltext,\n        add_openalex.openalex_cited_by_count,\n        add_openalex.openalex_is_retracted,\n        add_openalex.openalex_is_paratext,\n        add_openalex.openalex_locations_count,\n        add_openalex.openalex_referenced_works_count,\n        add_openalex.openalex_any_repository_has_fulltext,\n        add_openalex.openalex_is_oa,\n        add_openalex.openalex_cited_by_percentile_year_max,\n        add_openalex.openalex_cited_by_percentile_year_min,\n        add_openalex.openalex_citation_normalized_percentile_value,\n        add_openalex.openalex_apc_list_value,\n        add_openalex.openalex_apc_list_value_usd,\n        add_openalex.openalex_apc_paid_value,\n        add_openalex.openalex_apc_paid_value_usd,\n        add_openalex.openalex_indexed_in_arxiv,\n        add_openalex.openalex_indexed_in_doaj,\n        add_openalex.openalex_indexed_in_crossref,\n        add_openalex.openalex_indexed_in_pubmed,\n        openaire.attrank as openaire_attrank,\n        openaire.citation_count as openaire_citation_count,\n        openaire.total_downloads as openaire_total_downloads,\n        openaire.incubation_citation_count as openaire_incubation_citation_count,\n        openaire.pagerank as openaire_pagerank,\n        openaire.ram as openaire_ram,\n        openaire.total_views as openaire_total_views,\n        COALESCE(add_openalex.publication_date, openaire.date_issued) as publication_date\n    FROM add_openalex\n    LEFT JOIN {{ ref('fact_publication_openaire_search') }} openaire ON openaire.doi = add_openalex.doi\n),\n\nfact as (\n    SELECT \n        base.*,\n        dim_doi.in_dspacedb,\n        dim_doi.in_openaire,\n        dim_doi.in_openalex\n    FROM base\n    LEFT JOIN {{ ref('dim_doi') }} ON dim_doi.doi = base.doi\n)\n\nSELECT * FROM fact", "language": "sql", "refs": [{"name": "fact_publication_dspacedb", "package": null, "version": null}, {"name": "fact_publication_openalex", "package": null, "version": null}, {"name": "fact_publication_openaire_search", "package": null, "version": null}, {"name": "dim_doi", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.fact_publication_dspacedb", "model.dbt_unlp.fact_publication_openalex", "model.dbt_unlp.fact_publication_openaire_search", "model.dbt_unlp.dim_doi"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.fact_publication_openaire_search": {"database": "dw_cic", "schema": "stg", "name": "fact_publication_openaire_search", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openaire/facts/fact_publication_openaire_search.sql", "original_file_path": "models/04_dm/openaire/facts/fact_publication_openaire_search.sql", "unique_id": "model.dbt_unlp.fact_publication_openaire_search", "fqn": ["dbt_unlp", "04_dm", "openaire", "facts", "fact_publication_openaire_search"], "alias": "fact_publication_openaire_search", "checksum": {"name": "sha256", "checksum": "551e250b78580912942db302c5f54fdfb44d5f097904a37d82858eb1bbfcafff"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738082777.324475, "relation_name": "\"dw_cic\".\"stg\".\"fact_publication_openaire_search\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT\n        CONCAT('https://api.openaire.eu/search/researchProducts?resultID=', hub.researchproduct_id) openaire_url,\n        sat.date_collection,\n        sat.date_acceptance,\n        sat.publisher,\n        sat.isgreen,\n        sat.openaccesscolor,\n        sat.isindiamondjournal,\n        sat.publiclyfunded,\n        dim_pid.researchproduct_id,\n        dim_pid.arxiv,\n        dim_pid.doi,\n        dim_pid.handle,\n        dim_pid.mag,\n        dim_pid.pmc,\n        dim_pid.pmid\n    FROM {{ref('hub_openaire_researchproduct')}} hub\n    INNER JOIN {{ref('sat_openaire_researchproduct')}} sat ON sat.researchproduct_hk = hub.researchproduct_hk\n    INNER JOIN {{ref('dim_pid_openaire')}} dim_pid ON dim_pid.researchproduct_hk = hub.researchproduct_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_openaire_researchproduct", "package": null, "version": null}, {"name": "sat_openaire_researchproduct", "package": null, "version": null}, {"name": "dim_pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_openaire_researchproduct", "model.dbt_unlp.sat_openaire_researchproduct", "model.dbt_unlp.dim_pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.dim_pid_openaire": {"database": "dw_cic", "schema": "stg", "name": "dim_pid_openaire", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openaire/dims/dim_pid_openaire.sql", "original_file_path": "models/04_dm/openaire/dims/dim_pid_openaire.sql", "unique_id": "model.dbt_unlp.dim_pid_openaire", "fqn": ["dbt_unlp", "04_dm", "openaire", "dims", "dim_pid_openaire"], "alias": "dim_pid_openaire", "checksum": {"name": "sha256", "checksum": "98f04a74b94986d4146abcbc282c7469e83a92a06847d853bf58d500a2e21f6d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738082777.3285744, "relation_name": "\"dw_cic\".\"stg\".\"dim_pid_openaire\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT \n        sal.researchproduct_hk,\n        hub_researchproduct.researchproduct_id,\n        hub_arxiv.arxiv,\n        hub_doi.doi,\n        hub_handle.handle,\n        hub_mag.mag,\n        hub_pmc.pmc,\n        hub_pmid.pmid\n    FROM {{ref('sal_openaire_researchproduct')}} sal\n    INNER JOIN {{ref('hub_openaire_researchproduct')}} hub_researchproduct ON hub_researchproduct.researchproduct_hk = sal.researchproduct_hk\n    INNER JOIN {{ref('hub_openaire_arxiv')}} hub_arxiv ON hub_arxiv.arxiv_hk = sal.arxiv_hk\n    INNER JOIN {{ref('hub_openaire_doi')}} hub_doi ON hub_doi.doi_hk = sal.doi_hk\n    INNER JOIN {{ref('hub_openaire_handle')}} hub_handle ON hub_handle.handle_hk = sal.handle_hk\n    INNER JOIN {{ref('hub_openaire_mag')}} hub_mag ON hub_mag.mag_hk = sal.mag_hk\n    INNER JOIN {{ref('hub_openaire_pmc')}} hub_pmc ON hub_pmc.pmc_hk = sal.pmc_hk\n    INNER JOIN {{ref('hub_openaire_pmid')}} hub_pmid ON hub_pmid.pmid_hk = sal.pmid_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "sal_openaire_researchproduct", "package": null, "version": null}, {"name": "hub_openaire_researchproduct", "package": null, "version": null}, {"name": "hub_openaire_arxiv", "package": null, "version": null}, {"name": "hub_openaire_doi", "package": null, "version": null}, {"name": "hub_openaire_handle", "package": null, "version": null}, {"name": "hub_openaire_mag", "package": null, "version": null}, {"name": "hub_openaire_pmc", "package": null, "version": null}, {"name": "hub_openaire_pmid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.sal_openaire_researchproduct", "model.dbt_unlp.hub_openaire_researchproduct", "model.dbt_unlp.hub_openaire_arxiv", "model.dbt_unlp.hub_openaire_doi", "model.dbt_unlp.hub_openaire_handle", "model.dbt_unlp.hub_openaire_mag", "model.dbt_unlp.hub_openaire_pmc", "model.dbt_unlp.hub_openaire_pmid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.sat_openaire_graph_researchproduct": {"database": "dw_cic", "schema": "stg_openaire_graph", "name": "sat_openaire_graph_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire_graph/satellites/sat_openaire_graph_researchproduct.sql", "original_file_path": "models/03_dv/openaire_graph/satellites/sat_openaire_graph_researchproduct.sql", "unique_id": "model.dbt_unlp.sat_openaire_graph_researchproduct", "fqn": ["dbt_unlp", "03_dv", "openaire_graph", "satellites", "sat_openaire_graph_researchproduct"], "alias": "sat_openaire_graph_researchproduct", "checksum": {"name": "sha256", "checksum": "314a7dfddcf85d024ab0ce5f34120ca83643a81f10d87a15c3447f29edf1f041"}, "config": {"enabled": true, "alias": null, "schema": "openaire_graph", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire_graph"}, "created_at": 1738082777.3512468, "relation_name": "\"dw_cic\".\"stg_openaire_graph\".\"sat_openaire_graph_researchproduct\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"stg_openaire_graph_researchproduct\"\nsrc_pk: \"researchproduct_hk\"\nsrc_hashdiff:\n  source_column: \"researchproduct_hashdiff\"\n  alias: \"hashdiff\"\nsrc_payload:\n  - publicly_funded\n  - type\n  - main_title\n  - publication_date\n  - is_green\n  - is_in_diamond_journal\n  - language_code\n  - language_label\n  - best_access_right\n  - citation_class\n  - citation_count\n  - impulse\n  - impulse_class\n  - influence\n  - influence_class\n  - popularity\n  - popularity_class\n  - load_datetime\nsrc_eff: \"load_datetime\"\nsrc_ldts: \"load_datetime\"\nsrc_source: \"source\"\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.sat(src_pk=metadata_dict[\"src_pk\"],\n                   src_hashdiff=metadata_dict[\"src_hashdiff\"],\n                   src_payload=metadata_dict[\"src_payload\"],\n                   src_eff=metadata_dict[\"src_eff\"],\n                   src_ldts=metadata_dict[\"src_ldts\"],\n                   src_source=metadata_dict[\"src_source\"],\n                   source_model=metadata_dict[\"source_model\"])   }}", "language": "sql", "refs": [{"name": "stg_openaire_graph_researchproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.sat"], "nodes": ["model.dbt_unlp.stg_openaire_graph_researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_openaire_graph_researchproduct": {"database": "dw_cic", "schema": "stg_openaire_graph", "name": "stg_openaire_graph_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openaire_graph/stg_openaire_graph_researchproduct.sql", "original_file_path": "models/02_stg/openaire_graph/stg_openaire_graph_researchproduct.sql", "unique_id": "model.dbt_unlp.stg_openaire_graph_researchproduct", "fqn": ["dbt_unlp", "02_stg", "openaire_graph", "stg_openaire_graph_researchproduct"], "alias": "stg_openaire_graph_researchproduct", "checksum": {"name": "sha256", "checksum": "a577e2c87d91dc2502b078fe3649981c93779f8df3c9279eadcb70e94419dc26"}, "config": {"enabled": true, "alias": null, "schema": "openaire_graph", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "openaire_graph"}, "created_at": 1738082777.470508, "relation_name": "\"dw_cic\".\"stg_openaire_graph\".\"stg_openaire_graph_researchproduct\"", "raw_code": "{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"openaire_graph_researchproduct\"\nderived_columns:\n  source: \"!OPENAIRE\"\n  load_datetime: load_datetime\n--  effective_from: date_acceptance\n--  start_date: date_acceptance\n--  end_date: to_date('9999-12-31', 'YYYY-MM-DD')\nhashed_columns:\n  researchproduct_hk: researchproduct_id\n  researchproduct_hashdiff:\n    is_hashdiff: true\n    columns:\n      - open_access_color\n      - publicly_funded\n      - type\n      - main_title\n      - publication_date\n      - researchproduct_id\n      - is_green\n      - is_in_diamond_journal\n      - language_code\n      - language_label\n      - best_access_right\n      - citation_class\n      - citation_count\n      - impulse\n      - impulse_class\n      - influence\n      - influence_class\n      - popularity\n      - popularity_class\n      - load_datetime\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "openaire_graph_researchproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.openaire_graph_researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_graph_researchproduct": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_graph_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire_graph/researchproduct/openaire_graph_researchproduct.sql", "original_file_path": "models/01_base/openaire_graph/researchproduct/openaire_graph_researchproduct.sql", "unique_id": "model.dbt_unlp.openaire_graph_researchproduct", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct"], "alias": "openaire_graph_researchproduct", "checksum": {"name": "sha256", "checksum": "1b861348fecc1eac80e3de6b5ff8ffdc1ee54015feb59a974347caddccd40d80"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738082777.5037227, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_graph_researchproduct\"", "raw_code": "with source as (\n        select * from {{ source('openaire_graph_researchproduct', 'researchproduct') }}\n  ),\n  renamed as (\n      select\n        {{ adapter.quote(\"id\") }}::varchar as researchproduct_id,\n        COALESCE({{ adapter.quote(\"openAccessColor\") }}::varchar, 'NO DATA') as open_access_color,\n        COALESCE({{ adapter.quote(\"publiclyFunded\") }}::varchar, 'NO DATA') as publicly_funded,\n        COALESCE({{ adapter.quote(\"type\") }}::varchar, 'NO DATA') as type,\n        COALESCE({{ adapter.quote(\"mainTitle\") }}::varchar, 'NO DATA') as main_title,\n        {{ dbt_date.convert_timezone(adapter.quote(\"publicationDate\")) }} as publication_date,\n        COALESCE({{ adapter.quote(\"isGreen\") }}::boolean, FALSE) as is_green,\n        COALESCE({{ adapter.quote(\"isInDiamondJournal\") }}::boolean, FALSE) as is_in_diamond_journal,\n        COALESCE({{ adapter.quote(\"language_code\") }}::varchar, 'NO DATA') as language_code,\n        COALESCE({{ adapter.quote(\"language_label\") }}::varchar, 'NO DATA') as language_label,\n        COALESCE({{ adapter.quote(\"bestAccessRight_label\") }}::varchar, 'NO DATA') as best_access_right,\n        COALESCE({{ adapter.quote(\"citationImpact.citationClass\") }}::varchar, 'NO DATA') as citation_class,\n        COALESCE({{ adapter.quote(\"citationImpact.citationCount\") }}::int , 0) as citation_count,\n        COALESCE({{ adapter.quote(\"citationImpact.impulse\") }}::float, 0) as impulse,\n        COALESCE({{ adapter.quote(\"citationImpact.impulseClass\") }}::varchar, 'NO DATA') as impulse_class,\n        COALESCE({{ adapter.quote(\"citationImpact.influence\") }}::float, 0) as influence,\n        COALESCE({{ adapter.quote(\"citationImpact.influenceClass\") }}::varchar, 'NO DATA') as influence_class,\n        COALESCE({{ adapter.quote(\"citationImpact.popularity\") }}::float, 0) as popularity,\n        COALESCE({{ adapter.quote(\"citationImpact.popularityClass\") }}::varchar, 'NO DATA') as popularity_class,\n        {{ dbt_date.convert_timezone(\"load_datetime\") }} as load_datetime\n      from source\n  )\n  select * from renamed", "language": "sql", "refs": [], "sources": [["openaire_graph_researchproduct", "researchproduct"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone"], "nodes": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_graph_researchproduct2author": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_graph_researchproduct2author", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire_graph/researchproduct/openaire_graph_researchproduct2author.sql", "original_file_path": "models/01_base/openaire_graph/researchproduct/openaire_graph_researchproduct2author.sql", "unique_id": "model.dbt_unlp.openaire_graph_researchproduct2author", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct2author"], "alias": "openaire_graph_researchproduct2author", "checksum": {"name": "sha256", "checksum": "ae0270b68c6ca494d530d9729fa7334b920e1b7081e55861d66c460132d44a1e"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738082777.5181081, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_graph_researchproduct2author\"", "raw_code": "with source as (\n        select * from {{ source('openaire_graph_researchproduct', 'researchproduct2author') }}\n  ),\n  renamed as (\n      select\n        COALESCE({{ adapter.quote(\"id\") }}::varchar, 'NO DATA') as id,\n        COALESCE({{ adapter.quote(\"fullName\") }}::varchar, 'NO DATA') as full_name,\n        COALESCE({{ adapter.quote(\"name\") }}::varchar, 'NO DATA') as name,\n        COALESCE({{ adapter.quote(\"pid\") }}::varchar, 'NO DATA') as pid,\n        COALESCE({{ adapter.quote(\"rank\") }}::int, 0) as rank,\n        COALESCE({{ adapter.quote(\"surname\") }}::varchar, 'NO DATA') as surname\n\n      from source\n  )\n  select * from renamed", "language": "sql", "refs": [], "sources": [["openaire_graph_researchproduct", "researchproduct2author"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct2author"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_graph_originalid": {"database": "dw_cic", "schema": "stg_openaire_graph", "name": "hub_openaire_graph_originalid", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire_graph/hubs/hub_openaire_graph_originalid.sql", "original_file_path": "models/03_dv/openaire_graph/hubs/hub_openaire_graph_originalid.sql", "unique_id": "model.dbt_unlp.hub_openaire_graph_originalid", "fqn": ["dbt_unlp", "03_dv", "openaire_graph", "hubs", "hub_openaire_graph_originalid"], "alias": "hub_openaire_graph_originalid", "checksum": {"name": "sha256", "checksum": "c1c4a6ba5627b99e07aae085d7df774555151ebb0ef3770e857b0c77e104cf5f"}, "config": {"enabled": true, "alias": null, "schema": "openaire_graph", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire_graph"}, "created_at": 1738082777.5266013, "relation_name": "\"dw_cic\".\"stg_openaire_graph\".\"hub_openaire_graph_originalid\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_openaire_graph_researchproduct2originalid'\nsrc_pk: original_hk\nsrc_nk: original_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_openaire_graph_researchproduct2originalid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_openaire_graph_researchproduct2originalid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.link_openaire_graph_researchproduct2originalid": {"database": "dw_cic", "schema": "stg_openaire_graph", "name": "link_openaire_graph_researchproduct2originalid", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire_graph/links/link_openaire_graph_researchproduct2originalid.sql", "original_file_path": "models/03_dv/openaire_graph/links/link_openaire_graph_researchproduct2originalid.sql", "unique_id": "model.dbt_unlp.link_openaire_graph_researchproduct2originalid", "fqn": ["dbt_unlp", "03_dv", "openaire_graph", "links", "link_openaire_graph_researchproduct2originalid"], "alias": "link_openaire_graph_researchproduct2originalid", "checksum": {"name": "sha256", "checksum": "0e21b16ac4f1ebc264b92f47ee77e1b29e5c0b3c7fc31fc2a0b5173639d739ee"}, "config": {"enabled": true, "alias": null, "schema": "openaire_graph", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire_graph"}, "created_at": 1738082777.5510635, "relation_name": "\"dw_cic\".\"stg_openaire_graph\".\"link_openaire_graph_researchproduct2originalid\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set source_model = \"stg_openaire_graph_researchproduct2originalid\" -%}\n{%- set src_pk = \"researchproduct2originalid_hk\" -%}\n{%- set src_fk = [\"researchproduct_hk\",\"original_hk\"] -%}\n{%- set src_ldts = \"load_datetime\" -%}\n{%- set src_source = \"source\" -%}\n\n{{ automate_dv.link(src_pk=src_pk, src_fk=src_fk, src_ldts=src_ldts,\n                    src_source=src_source, source_model=source_model) }}", "language": "sql", "refs": [{"name": "stg_openaire_graph_researchproduct2originalid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.link"], "nodes": ["model.dbt_unlp.stg_openaire_graph_researchproduct2originalid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_graph_researchproduct2subject": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_graph_researchproduct2subject", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire_graph/researchproduct/openaire_graph_researchproduct2subject.sql", "original_file_path": "models/01_base/openaire_graph/researchproduct/openaire_graph_researchproduct2subject.sql", "unique_id": "model.dbt_unlp.openaire_graph_researchproduct2subject", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct2subject"], "alias": "openaire_graph_researchproduct2subject", "checksum": {"name": "sha256", "checksum": "db701955d1ad3879a2ca4224e7e6ade63e3e6ab2b635d8b6e3687ad745a5801f"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738082777.5911057, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_graph_researchproduct2subject\"", "raw_code": "with source as (\n        select * from {{ source('openaire_graph_researchproduct', 'researchproduct2subject') }}\n  ),\n  renamed as (\n      select\n        COALESCE({{ adapter.quote(\"id\") }}::varchar, 'NO DATA') as id,\n        COALESCE({{ adapter.quote(\"provenance\") }}::varchar, 'NO DATA' ) as provenance,\n        COALESCE({{ adapter.quote(\"subject.scheme\") }}::varchar, 'NO DATA') as subject_scheme,\n        COALESCE({{ adapter.quote(\"subject.value\") }}::varchar, 'NO DATA') as subject_value\n\n      from source\n  )\n  select * from renamed", "language": "sql", "refs": [], "sources": [["openaire_graph_researchproduct", "researchproduct2subject"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct2subject"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_researchproduct": {"database": "dw_cic", "schema": "stg_openaire", "name": "hub_openaire_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire/hubs/hub_openaire_researchproduct.sql", "original_file_path": "models/03_dv/openaire/hubs/hub_openaire_researchproduct.sql", "unique_id": "model.dbt_unlp.hub_openaire_researchproduct", "fqn": ["dbt_unlp", "03_dv", "openaire", "hubs", "hub_openaire_researchproduct"], "alias": "hub_openaire_researchproduct", "checksum": {"name": "sha256", "checksum": "dd09025d7523e63b4e729ea2a4c80cca7c4e30f4a77d18e4ce198f79713f1d05"}, "config": {"enabled": true, "alias": null, "schema": "openaire", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire"}, "created_at": 1738082985.4049149, "relation_name": "\"dw_cic\".\"stg_openaire\".\"hub_openaire_researchproduct\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_researchproduct2pid_openaire'\n--source_model: [\"stg_researchproduct2pid_openaire\", \"stg_openaire_graph_researchproduct\"]\nsrc_pk: researchproduct_hk\nsrc_nk: researchproduct_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_researchproduct2pid_openaire", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_researchproduct2pid_openaire"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_researchproduct2measure": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_researchproduct2measure", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/measure/openaire_researchproduct2measure.sql", "original_file_path": "models/01_base/openaire/researchproduct/measure/openaire_researchproduct2measure.sql", "unique_id": "model.dbt_unlp.openaire_researchproduct2measure", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "measure", "openaire_researchproduct2measure"], "alias": "openaire_researchproduct2measure", "checksum": {"name": "sha256", "checksum": "156779d3e46edb64396a58ec3a444342e115d739e5a462a59370821582c00e5e"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738083534.2667255, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_researchproduct2measure\"", "raw_code": "-- FIXME\n{{ config(materialized='table') }}\n\nwith source as (\n      select * from {{ source('openaire', 'researchproduct2measure') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"dri:objIdentifier\") }} as researchproduct_id,\n        {{ adapter.quote(\"@id\") }} as measure_id,\n        {{ adapter.quote(\"@score\") }}::float as measure_score,\n        {{ adapter.quote(\"@class\") }} as measure_class,\n        {{ adapter.quote(\"@datasource\") }} measure_datasource,\n        {{ adapter.quote(\"load_datetime\") }}\n    from source\n),\n\nbase as (\n    select\n        researchproduct_id,\n        SUM(CASE WHEN measure_id = 'impulse' THEN measure_score ELSE 0 END) AS impulse,\n        (CASE WHEN measure_id = 'impulse' THEN measure_class ELSE 'NO DATA' END) AS impulse_class,\n        SUM(CASE WHEN measure_id = 'influence_alt' THEN measure_score ELSE 0 END) AS influence_alt,\n        (CASE WHEN measure_id = 'influence_alt' THEN measure_class ELSE 'NO DATA' END) AS influence_alt_class,\n        SUM(CASE WHEN measure_id = 'impulse' THEN measure_score ELSE 0 END) AS popularity,\n        (CASE WHEN measure_id = 'impulse' THEN measure_class ELSE 'NO DATA' END) AS popularity_class,\n        SUM(CASE WHEN measure_id = 'popularity_alt' THEN measure_score ELSE 0 END) AS popularity_alt,\n        (CASE WHEN measure_id = 'popularity_alt' THEN measure_class ELSE 'NO DATA' END) AS popularity_alt_class,\n        SUM(CASE WHEN measure_id = 'influence' THEN measure_score ELSE 0 END) AS influence,\n        (CASE WHEN measure_id = 'influence' THEN measure_class ELSE 'NO DATA' END) AS influence_class,\n        SUM(CASE WHEN measure_id = 'downloads' THEN measure_score ELSE 0 END) AS downloads,\n        SUM(CASE WHEN measure_id = 'views' THEN measure_score ELSE 0 END) AS views,\n        COALESCE(measure_datasource, 'NO DATA') as measure_datasource,\n        load_datetime\n    from renamed\n    GROUP BY researchproduct_id, load_datetime, measure_datasource, impulse_class, influence_alt_class, popularity_alt_class, influence_class\n    ORDER BY 1\n)\n\nselect * from base\n--select * from renamed", "language": "sql", "refs": [], "sources": [["openaire", "researchproduct2measure"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire.researchproduct2measure"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_researchproduct": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire/researchproduct/openaire_researchproduct.sql", "original_file_path": "models/01_base/openaire/researchproduct/openaire_researchproduct.sql", "unique_id": "model.dbt_unlp.openaire_researchproduct", "fqn": ["dbt_unlp", "01_base", "openaire", "researchproduct", "openaire_researchproduct"], "alias": "openaire_researchproduct", "checksum": {"name": "sha256", "checksum": "3c731d8b38bc7b326d2c6eca5303180a0a1a8547931991ac410d76c38d0671fc"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738083549.7662575, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_researchproduct\"", "raw_code": "with source as (\n      select * from {{ source('openaire', 'researchproduct') }}\n),\nrenamed as (\n    select\n        {{ adapter.quote(\"dri:objIdentifier\") }} as researchproduct_id,\n        {{ adapter.quote(\"dri:dateOfCollection\") }} as date_collection,\n        {{ adapter.quote(\"dri:dateOfTransformation\") }} as date_transformation,\n        {{ adapter.quote(\"fulltext\") }},\n        {{ adapter.quote(\"dateofacceptance\") }} as date_acceptance,\n        {{ adapter.quote(\"description\") }},\n        {{ adapter.quote(\"publisher\") }},\n        {{ adapter.quote(\"isgreen\") }},\n        {{ adapter.quote(\"openaccesscolor\") }},\n        {{ adapter.quote(\"isindiamondjournal\") }},\n        {{ adapter.quote(\"publiclyfunded\") }},\n        {{ adapter.quote(\"load_datetime\") }}\n\n    from source\n),\n\nbase as (\n    SELECT\n        researchproduct_id::varchar,\n        {{ dbt_date.convert_timezone(\"date_collection\") }} as date_collection,\n        {{ dbt_date.convert_timezone(\"date_acceptance\") }} as date_acceptance,\n        description,\n        publisher,\n        isgreen,\n        COALESCE(openaccesscolor, 'NO DATA') as openaccesscolor,\n        COALESCE(isindiamondjournal::varchar, 'NO DATA') as isindiamondjournal,\n        COALESCE(publiclyfunded::varchar, 'NO DATA') as publiclyfunded,\n        -- TODO agregar m\u00e9tricas de impacto\n        load_datetime\n    FROM\n        renamed\n),\n\nfinal as (\n    select * from base\n)\n\nselect * from final", "language": "sql", "refs": [], "sources": [["openaire", "researchproduct"]], "metrics": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone"], "nodes": ["source.dbt_unlp.openaire.researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.openaire_graph_researchproduct2originalid": {"database": "dw_cic", "schema": "stg_base", "name": "openaire_graph_researchproduct2originalid", "resource_type": "model", "package_name": "dbt_unlp", "path": "01_base/openaire_graph/researchproduct/openaire_graph_researchproduct2originalid.sql", "original_file_path": "models/01_base/openaire_graph/researchproduct/openaire_graph_researchproduct2originalid.sql", "unique_id": "model.dbt_unlp.openaire_graph_researchproduct2originalid", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct2originalid"], "alias": "openaire_graph_researchproduct2originalid", "checksum": {"name": "sha256", "checksum": "4119033a24f4dc3d66b6e1ce5396114c3ddf71618906c74f8711b234dfa43a71"}, "config": {"enabled": true, "alias": null, "schema": "base", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "schema": "base"}, "created_at": 1738083869.3119633, "relation_name": "\"dw_cic\".\"stg_base\".\"openaire_graph_researchproduct2originalid\"", "raw_code": "with source as (\n        select * from {{ source('openaire_graph_researchproduct', 'researchproduct2originalId') }}\n  ),\n  renamed as (\n      select\n        COALESCE({{ adapter.quote(\"id\") }}::varchar, 'NO DATA') as researchproduct_id,\n        COALESCE({{ adapter.quote(\"originalId\") }}::varchar, 'NO DATA') as original_id,\n        load_datetime\n      from source\n  )\n  select * from renamed", "language": "sql", "refs": [], "sources": [["openaire_graph_researchproduct", "researchproduct2originalId"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct2originalId"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.stg_openaire_graph_researchproduct2originalid": {"database": "dw_cic", "schema": "stg_openaire_graph", "name": "stg_openaire_graph_researchproduct2originalid", "resource_type": "model", "package_name": "dbt_unlp", "path": "02_stg/openaire_graph/stg_openaire_graph_researchproduct2originalid.sql", "original_file_path": "models/02_stg/openaire_graph/stg_openaire_graph_researchproduct2originalid.sql", "unique_id": "model.dbt_unlp.stg_openaire_graph_researchproduct2originalid", "fqn": ["dbt_unlp", "02_stg", "openaire_graph", "stg_openaire_graph_researchproduct2originalid"], "alias": "stg_openaire_graph_researchproduct2originalid", "checksum": {"name": "sha256", "checksum": "a41ab49aa3124f987cc32cdd2fe9999c985f80e35d820c4bb7de243c616921c7"}, "config": {"enabled": true, "alias": null, "schema": "openaire_graph", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "schema": "openaire_graph"}, "created_at": 1738083946.8164062, "relation_name": "\"dw_cic\".\"stg_openaire_graph\".\"stg_openaire_graph_researchproduct2originalid\"", "raw_code": "{{ config(materialized='view') }}\n\n{%- set yaml_metadata -%}\nsource_model: \"openaire_graph_researchproduct2originalid\"\nderived_columns:\n  source: \"!OPENAIRE\"\n  load_datetime: load_datetime\nhashed_columns:\n  researchproduct_hk: researchproduct_id\n  original_hk: original_id\n  researchproduct2originalid_hk:\n    - researchproduct_id\n    - original_id\n{%- endset -%}\n\n{% set metadata_dict = fromyaml(yaml_metadata) %}\n\n{{ automate_dv.stage(include_source_columns=true,\n                     source_model=metadata_dict['source_model'],\n                     derived_columns=metadata_dict['derived_columns'],\n                     null_columns=none,\n                     hashed_columns=metadata_dict['hashed_columns'],\n                     ranked_columns=none) }}", "language": "sql", "refs": [{"name": "openaire_graph_researchproduct2originalid", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.stage"], "nodes": ["model.dbt_unlp.openaire_graph_researchproduct2originalid"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.hub_openaire_graph_researchproduct": {"database": "dw_cic", "schema": "stg_openaire_graph", "name": "hub_openaire_graph_researchproduct", "resource_type": "model", "package_name": "dbt_unlp", "path": "03_dv/openaire_graph/hubs/hub_openaire_graph_researchproduct.sql", "original_file_path": "models/03_dv/openaire_graph/hubs/hub_openaire_graph_researchproduct.sql", "unique_id": "model.dbt_unlp.hub_openaire_graph_researchproduct", "fqn": ["dbt_unlp", "03_dv", "openaire_graph", "hubs", "hub_openaire_graph_researchproduct"], "alias": "hub_openaire_graph_researchproduct", "checksum": {"name": "sha256", "checksum": "17ccac728c6d2619f58d3a047cec033d8ca2097603b152ebeac52cf899713cfe"}, "config": {"enabled": true, "alias": null, "schema": "openaire_graph", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "incremental", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "schema": "openaire_graph"}, "created_at": 1738084047.8918538, "relation_name": "\"dw_cic\".\"stg_openaire_graph\".\"hub_openaire_graph_researchproduct\"", "raw_code": "{{ config(materialized='incremental') }}\n\n{%- set yaml_metadata -%}\nsource_model: 'stg_openaire_graph_researchproduct'\nsrc_pk: researchproduct_hk\nsrc_nk: researchproduct_id\nsrc_ldts: load_datetime\nsrc_source: source\n{%- endset -%}\n\nWITH base AS (\n    {% set metadata_dict = fromyaml(yaml_metadata) %}\n    {{ automate_dv.hub(src_pk=metadata_dict[\"src_pk\"],\n                    src_nk=metadata_dict[\"src_nk\"], \n                    src_ldts=metadata_dict[\"src_ldts\"],\n                    src_source=metadata_dict[\"src_source\"],\n                    source_model=metadata_dict[\"source_model\"]) }}\n),\n\nfinal AS (\n    SELECT *\n    FROM base\n)\n\nSELECT * FROM final", "language": "sql", "refs": [{"name": "stg_openaire_graph_researchproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.automate_dv.hub"], "nodes": ["model.dbt_unlp.stg_openaire_graph_researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.dbt_unlp.fact_publication_openaire_graph": {"database": "dw_cic", "schema": "stg", "name": "fact_publication_openaire_graph", "resource_type": "model", "package_name": "dbt_unlp", "path": "04_dm/openaire/facts/fact_publication_openaire_graph.sql", "original_file_path": "models/04_dm/openaire/facts/fact_publication_openaire_graph.sql", "unique_id": "model.dbt_unlp.fact_publication_openaire_graph", "fqn": ["dbt_unlp", "04_dm", "openaire", "facts", "fact_publication_openaire_graph"], "alias": "fact_publication_openaire_graph", "checksum": {"name": "sha256", "checksum": "6b573df90d34da141a6b493bafb12cad00ddb6f19d5208e8972819d8d1d07bfb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1738084136.8535771, "relation_name": "\"dw_cic\".\"stg\".\"fact_publication_openaire_graph\"", "raw_code": "{{ config(materialized='table') }}\n\nWITH base as (\n    SELECT\n        hub.researchproduct_id as researchproduct_id,\n        {# sat.description, #}\n        sat_graph.publicly_funded,\n        sat_graph.type,\n        sat_graph.main_title,\n        sat_graph.publication_date,\n        sat_graph.is_green,\n        sat_graph.is_in_diamond_journal,\n        sat_graph.language_code,\n        sat_graph.language_label,\n        sat_graph.best_access_right,\n        sat_graph.citation_class,\n        sat_graph.citation_count,\n        sat_graph.impulse,\n        sat_graph.impulse_class,\n        sat_graph.influence,\n        sat_graph.influence_class,\n        sat_graph.popularity,\n        sat_graph.popularity_class\n    FROM {{ref('hub_openaire_graph_researchproduct')}} hub\n    INNER JOIN {{ref('sat_openaire_graph_researchproduct')}} sat_graph ON sat_graph.researchproduct_hk = hub.researchproduct_hk\n)\n\nSELECT * FROM base", "language": "sql", "refs": [{"name": "hub_openaire_graph_researchproduct", "package": null, "version": null}, {"name": "sat_openaire_graph_researchproduct", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": [], "nodes": ["model.dbt_unlp.hub_openaire_graph_researchproduct", "model.dbt_unlp.sat_openaire_graph_researchproduct"]}, "compiled_path": null, "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}}, "sources": {"source.dbt_unlp.openaire.researchproduct": {"database": "dw_cic", "schema": "ldg_openaire", "name": "researchproduct", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire/schema.yml", "original_file_path": "models/01_base/openaire/schema.yml", "unique_id": "source.dbt_unlp.openaire.researchproduct", "fqn": ["dbt_unlp", "01_base", "openaire", "openaire", "researchproduct"], "source_name": "openaire", "source_description": "Openaire research product", "loader": "", "identifier": "researchproduct", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire\".\"researchproduct\"", "created_at": 1738081077.3641562}, "source.dbt_unlp.openaire.researchproduct2creator": {"database": "dw_cic", "schema": "ldg_openaire", "name": "researchproduct2creator", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire/schema.yml", "original_file_path": "models/01_base/openaire/schema.yml", "unique_id": "source.dbt_unlp.openaire.researchproduct2creator", "fqn": ["dbt_unlp", "01_base", "openaire", "openaire", "researchproduct2creator"], "source_name": "openaire", "source_description": "Openaire research product", "loader": "", "identifier": "researchproduct2creator", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire\".\"researchproduct2creator\"", "created_at": 1738081077.36438}, "source.dbt_unlp.openaire.researchproduct2measure": {"database": "dw_cic", "schema": "ldg_openaire", "name": "researchproduct2measure", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire/schema.yml", "original_file_path": "models/01_base/openaire/schema.yml", "unique_id": "source.dbt_unlp.openaire.researchproduct2measure", "fqn": ["dbt_unlp", "01_base", "openaire", "openaire", "researchproduct2measure"], "source_name": "openaire", "source_description": "Openaire research product", "loader": "", "identifier": "researchproduct2measure", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire\".\"researchproduct2measure\"", "created_at": 1738081077.3645453}, "source.dbt_unlp.openaire.researchproduct2pid": {"database": "dw_cic", "schema": "ldg_openaire", "name": "researchproduct2pid", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire/schema.yml", "original_file_path": "models/01_base/openaire/schema.yml", "unique_id": "source.dbt_unlp.openaire.researchproduct2pid", "fqn": ["dbt_unlp", "01_base", "openaire", "openaire", "researchproduct2pid"], "source_name": "openaire", "source_description": "Openaire research product", "loader": "", "identifier": "researchproduct2pid", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire\".\"researchproduct2pid\"", "created_at": 1738081077.3647056}, "source.dbt_unlp.openaire.researchproduct2relevantdate": {"database": "dw_cic", "schema": "ldg_openaire", "name": "researchproduct2relevantdate", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire/schema.yml", "original_file_path": "models/01_base/openaire/schema.yml", "unique_id": "source.dbt_unlp.openaire.researchproduct2relevantdate", "fqn": ["dbt_unlp", "01_base", "openaire", "openaire", "researchproduct2relevantdate"], "source_name": "openaire", "source_description": "Openaire research product", "loader": "", "identifier": "researchproduct2relevantdate", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire\".\"researchproduct2relevantdate\"", "created_at": 1738081077.3648643}, "source.dbt_unlp.openaire.researchproduct2subject": {"database": "dw_cic", "schema": "ldg_openaire", "name": "researchproduct2subject", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire/schema.yml", "original_file_path": "models/01_base/openaire/schema.yml", "unique_id": "source.dbt_unlp.openaire.researchproduct2subject", "fqn": ["dbt_unlp", "01_base", "openaire", "openaire", "researchproduct2subject"], "source_name": "openaire", "source_description": "Openaire research product", "loader": "", "identifier": "researchproduct2subject", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire\".\"researchproduct2subject\"", "created_at": 1738081077.3650174}, "source.dbt_unlp.dspacedb.bitstream": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "bitstream", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.bitstream", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "bitstream"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "bitstream", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"bitstream\"", "created_at": 1738081077.3651745}, "source.dbt_unlp.dspacedb.bundle": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "bundle", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.bundle", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "bundle"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "bundle", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"bundle\"", "created_at": 1738081077.36533}, "source.dbt_unlp.dspacedb.bundle2bitstream": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "bundle2bitstream", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.bundle2bitstream", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "bundle2bitstream"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "bundle2bitstream", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"bundle2bitstream\"", "created_at": 1738081077.365478}, "source.dbt_unlp.dspacedb.collection": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "collection", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.collection", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "collection"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "collection", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"collection\"", "created_at": 1738081077.3656259}, "source.dbt_unlp.dspacedb.collection2item": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "collection2item", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.collection2item", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "collection2item"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "collection2item", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"collection2item\"", "created_at": 1738081077.3657725}, "source.dbt_unlp.dspacedb.communities2item": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "communities2item", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.communities2item", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "communities2item"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "communities2item", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"communities2item\"", "created_at": 1738081077.3659196}, "source.dbt_unlp.dspacedb.community": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "community", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.community", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "community"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "community", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"community\"", "created_at": 1738081077.3660665}, "source.dbt_unlp.dspacedb.community2collection": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "community2collection", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.community2collection", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "community2collection"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "community2collection", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"community2collection\"", "created_at": 1738081077.3662152}, "source.dbt_unlp.dspacedb.community2community": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "community2community", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.community2community", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "community2community"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "community2community", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"community2community\"", "created_at": 1738081077.366384}, "source.dbt_unlp.dspacedb.community2item": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "community2item", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.community2item", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "community2item"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "community2item", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"community2item\"", "created_at": 1738081077.3665335}, "source.dbt_unlp.dspacedb.handle": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "handle", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.handle", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "handle"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "handle", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"handle\"", "created_at": 1738081077.3666801}, "source.dbt_unlp.dspacedb.doi": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "doi", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.doi", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "doi"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "doi", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"doi\"", "created_at": 1738081077.3668244}, "source.dbt_unlp.dspacedb.item": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "item", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.item", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "item"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "item", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"item\"", "created_at": 1738081077.3669696}, "source.dbt_unlp.dspacedb.item2bundle": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "item2bundle", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.item2bundle", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "item2bundle"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "item2bundle", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"item2bundle\"", "created_at": 1738081077.367115}, "source.dbt_unlp.dspacedb.metadatafieldregistry": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "metadatafieldregistry", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.metadatafieldregistry", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "metadatafieldregistry"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "metadatafieldregistry", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"metadatafieldregistry\"", "created_at": 1738081077.3672705}, "source.dbt_unlp.dspacedb.metadataschemaregistry": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "metadataschemaregistry", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.metadataschemaregistry", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "metadataschemaregistry"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "metadataschemaregistry", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"metadataschemaregistry\"", "created_at": 1738081077.3674152}, "source.dbt_unlp.dspacedb.metadatavalue": {"database": "dw_cic", "schema": "ldg_dspacedb", "name": "metadatavalue", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/dspacedb/schema.yml", "original_file_path": "models/01_base/dspacedb/schema.yml", "unique_id": "source.dbt_unlp.dspacedb.metadatavalue", "fqn": ["dbt_unlp", "01_base", "dspacedb", "dspacedb", "metadatavalue"], "source_name": "dspacedb", "source_description": "DSpace database", "loader": "", "identifier": "metadatavalue", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_dspacedb\".\"metadatavalue\"", "created_at": 1738081077.3675601}, "source.dbt_unlp.openalex.author": {"database": "dw_cic", "schema": "ldg_openalex", "name": "author", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.author", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "author"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "author", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"author\"", "created_at": 1738081077.3683093}, "source.dbt_unlp.openalex.author2affiliation": {"database": "dw_cic", "schema": "ldg_openalex", "name": "author2affiliation", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.author2affiliation", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "author2affiliation"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "author2affiliation", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"author2affiliation\"", "created_at": 1738081077.368475}, "source.dbt_unlp.openalex.author2institution": {"database": "dw_cic", "schema": "ldg_openalex", "name": "author2institution", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.author2institution", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "author2institution"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "author2institution", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"author2institution\"", "created_at": 1738081077.3686218}, "source.dbt_unlp.openalex.author2topic": {"database": "dw_cic", "schema": "ldg_openalex", "name": "author2topic", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.author2topic", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "author2topic"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "author2topic", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"author2topic\"", "created_at": 1738081077.368766}, "source.dbt_unlp.openalex.language": {"database": "dw_cic", "schema": "ldg_openalex", "name": "language", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.language", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "language"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "language", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"language\"", "created_at": 1738081077.3689086}, "source.dbt_unlp.openalex.license": {"database": "dw_cic", "schema": "ldg_openalex", "name": "license", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.license", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "license"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "license", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"license\"", "created_at": 1738081077.3703878}, "source.dbt_unlp.openalex.work": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work\"", "created_at": 1738081077.3706293}, "source.dbt_unlp.openalex.work2authorship": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work2authorship", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work2authorship", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work2authorship"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work2authorship", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work2authorship\"", "created_at": 1738081077.3707929}, "source.dbt_unlp.openalex.work2concept": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work2concept", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work2concept", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work2concept"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work2concept", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work2concept\"", "created_at": 1738081077.3709457}, "source.dbt_unlp.openalex.work2corresponding_author_ids": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work2corresponding_author_ids", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work2corresponding_author_ids", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work2corresponding_author_ids"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work2corresponding_author_ids", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work2corresponding_author_ids\"", "created_at": 1738081077.3710964}, "source.dbt_unlp.openalex.work2primary_location": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work2primary_location", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work2primary_location", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work2primary_location"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work2primary_location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work2primary_location\"", "created_at": 1738081077.3712614}, "source.dbt_unlp.openalex.work2primary_topics": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work2primary_topics", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work2primary_topics", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work2primary_topics"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work2primary_topics", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work2primary_topics\"", "created_at": 1738081077.3714128}, "source.dbt_unlp.openalex.work2referenced_works": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work2referenced_works", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work2referenced_works", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work2referenced_works"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work2referenced_works", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work2referenced_works\"", "created_at": 1738081077.371562}, "source.dbt_unlp.openalex.work2location": {"database": "dw_cic", "schema": "ldg_openalex", "name": "work2location", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.work2location", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "work2location"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "work2location", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"work2location\"", "created_at": 1738081077.3717105}, "source.dbt_unlp.openalex.worktype": {"database": "dw_cic", "schema": "ldg_openalex", "name": "worktype", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openalex/schema.yml", "original_file_path": "models/01_base/openalex/schema.yml", "unique_id": "source.dbt_unlp.openalex.worktype", "fqn": ["dbt_unlp", "01_base", "openalex", "openalex", "worktype"], "source_name": "openalex", "source_description": "Openalex works", "loader": "", "identifier": "worktype", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openalex\".\"worktype\"", "created_at": 1738081077.3718603}, "source.dbt_unlp.openaire_graph_researchproduct.researchproduct": {"database": "dw_cic", "schema": "ldg_openaire_graph", "name": "researchproduct", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire_graph/researchproduct/schema.yml", "original_file_path": "models/01_base/openaire_graph/researchproduct/schema.yml", "unique_id": "source.dbt_unlp.openaire_graph_researchproduct.researchproduct", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct", "researchproduct"], "source_name": "openaire_graph_researchproduct", "source_description": "Openaire research product collected from datasource", "loader": "", "identifier": "researchproduct", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire_graph\".\"researchproduct\"", "created_at": 1738082777.6257503}, "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2author": {"database": "dw_cic", "schema": "ldg_openaire_graph", "name": "researchproduct2author", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire_graph/researchproduct/schema.yml", "original_file_path": "models/01_base/openaire_graph/researchproduct/schema.yml", "unique_id": "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2author", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct", "researchproduct2author"], "source_name": "openaire_graph_researchproduct", "source_description": "Openaire research product collected from datasource", "loader": "", "identifier": "researchproduct2author", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire_graph\".\"researchproduct2author\"", "created_at": 1738082777.626029}, "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2originalId": {"database": "dw_cic", "schema": "ldg_openaire_graph", "name": "researchproduct2originalId", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire_graph/researchproduct/schema.yml", "original_file_path": "models/01_base/openaire_graph/researchproduct/schema.yml", "unique_id": "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2originalId", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct", "researchproduct2originalId"], "source_name": "openaire_graph_researchproduct", "source_description": "Openaire research product collected from datasource", "loader": "", "identifier": "researchproduct2originalId", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire_graph\".\"researchproduct2originalId\"", "created_at": 1738082777.6262717}, "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2subject": {"database": "dw_cic", "schema": "ldg_openaire_graph", "name": "researchproduct2subject", "resource_type": "source", "package_name": "dbt_unlp", "path": "models/01_base/openaire_graph/researchproduct/schema.yml", "original_file_path": "models/01_base/openaire_graph/researchproduct/schema.yml", "unique_id": "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2subject", "fqn": ["dbt_unlp", "01_base", "openaire_graph", "researchproduct", "openaire_graph_researchproduct", "researchproduct2subject"], "source_name": "openaire_graph_researchproduct", "source_description": "Openaire research product collected from datasource", "loader": "", "identifier": "researchproduct2subject", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"dw_cic\".\"ldg_openaire_graph\".\"researchproduct2subject\"", "created_at": 1738082777.6264513}}, "macros": {"macro.dbt_unlp.str_to_date": {"name": "str_to_date", "resource_type": "macro", "package_name": "dbt_unlp", "path": "macros/str_to_date.sql", "original_file_path": "macros/str_to_date.sql", "unique_id": "macro.dbt_unlp.str_to_date", "macro_sql": "{% macro str_to_date(str_date) %}\n(CASE \n    -- Se maneja  el formato con '/', ej: '2018/12/05' o '2018/12'\n    WHEN ({{str_date}} ~ '^\\d{4}/\\d{1,2}/\\d{1,2}$') \n        AND (CAST(SUBSTRING(REPLACE({{str_date}}, '/', '-'), 6, 2) AS INTEGER) BETWEEN 1 AND 12)\n        AND (CAST(SUBSTRING(REPLACE({{str_date}}, '/', '-'), 9, 2) AS INTEGER) BETWEEN 1 AND 31)\n    THEN REPLACE({{str_date}}, '/', '-')\n    \n    WHEN ({{str_date}} ~ '^\\d{4}/\\d{1,2}$') \n        AND (CAST(SUBSTRING(REPLACE({{str_date}}, '/', '-'), 6, 2) AS INTEGER) BETWEEN 1 AND 12)\n    THEN CONCAT(REPLACE({{str_date}}, '/', '-'), '-01')\n\n    -- Se maneja  el formato 'YYYY-' o 'YYYY'\n    WHEN ({{str_date}} ~ '^\\d{4}-$') THEN CONCAT({{str_date}}, '01-01')\n    WHEN ({{str_date}} ~ '^\\d{4}$') THEN CONCAT({{str_date}}, '-01-01')\n\n    -- Se maneja  el formato 'YYYY-MM'\n    WHEN ({{str_date}} ~ '^\\d{4}-\\d{1,2}$')\n        AND (CAST(SUBSTRING({{str_date}}, 6, 2) AS INTEGER) BETWEEN 1 AND 12)\n    THEN CONCAT({{str_date}}, '-01')\n\n    -- Se maneja  el caso de 'YYYY seguido de texto', ej: '1906 TOMO II'\n    WHEN ({{str_date}} ~ '^\\d{4}\\s.+$') THEN CONCAT(SUBSTRING({{str_date}}, 1, 4), '-01-01')\n\n    -- Se Valida formato general de fecha (YYYY-MM-DD)\n    WHEN ({{str_date}} ~ '^\\d{4}-\\d{1,2}-\\d{1,2}$') \n         AND (CAST(SUBSTRING({{str_date}}, 6, 2) AS INTEGER) BETWEEN 1 AND 12) -- Mes v\u00e1lido\n         AND (CAST(SUBSTRING({{str_date}}, 9, 2) AS INTEGER) BETWEEN 1 AND 31) -- D\u00eda v\u00e1lido\n    THEN {{str_date}}\n\n    -- Se devuelve una \"fecha de error\" si el formato es incorrecto o tiene valores inv\u00e1lidos\n    ELSE '9999-12-31'\nEND)::date\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5315776, "supported_languages": null}, "macro.dbt_unlp.select_metadatavalue": {"name": "select_metadatavalue", "resource_type": "macro", "package_name": "dbt_unlp", "path": "macros/select_metadatavalue.sql", "original_file_path": "macros/select_metadatavalue.sql", "unique_id": "macro.dbt_unlp.select_metadatavalue", "macro_sql": "{% macro select_metadatavalue(column_name, short_id, element, qualifier = NULL, authority = False ) %}\n    SELECT \n        mv.resource_id AS item_id,\n        mv.text_value AS {{ column_name }}\n        {% if authority %}\n            , mv.authority\n        {% endif %}\n\n    FROM {{ source('ir', 'metadatavalue') }} mv\n    INNER JOIN {{ source('ir', 'metadatafieldregistry') }} mfr ON mfr.metadata_field_id = mv.metadata_field_id\n    INNER JOIN {{ source('ir', 'metadataschemaregistry') }} msr ON msr.metadata_schema_id = mfr.metadata_schema_id\n    WHERE \n        mv.resource_type_id = 2 \n        and msr.short_id = '{{ short_id }}'\n        and mfr.element = '{{ element }}' \n        {% if qualifier != NULL %}\n            and mfr.qualifier = '{{ qualifier }}'\n        {% else %}\n            and mfr.qualifier is NULL\n        {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5343723, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5353158, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5357912, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5360322, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.536267, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5364876, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {% endif -%}\n  {% if contract_config.enforced and (not temporary) -%}\n      {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} (\n      {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    )\n    {%- set sql = get_select_subquery(sql) %}\n  {% else %}\n    as\n  {% endif %}\n  (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.default__get_column_names", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5497055, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5509017, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5515783, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.552224, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5531902, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      matviewname as name,\n      schemaname as schema,\n      'materialized_view' as type\n    from pg_matviews\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5540733, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5544372, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5552473, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5561514, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5584512, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.559144, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5600011, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5606925, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5617764, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5623803, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5637994, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.564285, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5645342, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_indexes_sql": {"name": "postgres__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_indexes_sql", "macro_sql": "{% macro postgres__get_show_indexes_sql(relation) %}\n    select\n        i.relname                                   as name,\n        m.amname                                    as method,\n        ix.indisunique                              as \"unique\",\n        array_to_string(array_agg(a.attname), ',')  as column_names\n    from pg_index ix\n    join pg_class i\n        on i.oid = ix.indexrelid\n    join pg_am m\n        on m.oid=i.relam\n    join pg_class t\n        on t.oid = ix.indrelid\n    join pg_namespace n\n        on n.oid = t.relnamespace\n    join pg_attribute a\n        on a.attrelid = t.oid\n        and a.attnum = ANY(ix.indkey)\n    where t.relname = '{{ relation.identifier }}'\n      and n.nspname = '{{ relation.schema }}'\n      and t.relkind in ('r', 'm')\n    group by 1, 2, 3\n    order by 1, 2, 3\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5648816, "supported_languages": null}, "macro.dbt_postgres.postgres__get_drop_index_sql": {"name": "postgres__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_drop_index_sql", "macro_sql": "\n\n\n{%- macro postgres__get_drop_index_sql(relation, index_name) -%}\n    drop index if exists \"{{ relation.schema }}\".\"{{ index_name }}\"\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5651824, "supported_languages": null}, "macro.dbt_postgres.postgres__get_relations": {"name": "postgres__get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres__get_relations", "macro_sql": "{% macro postgres__get_relations() -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v', 'm')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5664861, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations() %}\n  {{ return(postgres__get_relations()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.566794, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog_relations": {"name": "postgres__get_catalog_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog_relations", "macro_sql": "{% macro postgres__get_catalog_relations(information_schema, relations) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            when 'm' then 'MATERIALIZED VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n    where (\n      {%- for relation in relations -%}\n        {%- if relation.identifier -%}\n          (upper(sch.nspname) = upper('{{ relation.schema }}') and\n           upper(tbl.relname) = upper('{{ relation.identifier }}'))\n        {%- else-%}\n          upper(sch.nspname) = upper('{{ relation.schema }}')\n        {%- endif -%}\n        {%- if not loop.last %} or {% endif -%}\n      {%- endfor -%}\n    )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p', 'm') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table, [m]aterialized view. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5702558, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n  {%- set relations = [] -%}\n  {%- for schema in schemas -%}\n    {%- set dummy = relations.append({'schema': schema}) -%}\n  {%- endfor -%}\n  {{ return(postgres__get_catalog_relations(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5711124, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_materialized_view": {"name": "postgres__drop_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_materialized_view", "macro_sql": "{% macro postgres__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5714805, "supported_languages": null}, "macro.dbt_postgres.postgres__describe_materialized_view": {"name": "postgres__describe_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/describe.sql", "original_file_path": "macros/relations/materialized_view/describe.sql", "unique_id": "macro.dbt_postgres.postgres__describe_materialized_view", "macro_sql": "{% macro postgres__describe_materialized_view(relation) %}\n    -- for now just get the indexes, we don't need the name or the query yet\n    {% set _indexes = run_query(get_show_indexes_sql(relation)) %}\n    {% do return({'indexes': _indexes}) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5720675, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql": {"name": "postgres__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_create_materialized_view_as_sql(relation, sql) %}\n    create materialized view if not exists {{ relation }} as {{ sql }};\n\n    {% for _index_dict in config.get('indexes', []) -%}\n        {{- get_create_index_sql(relation, _index_dict) -}}\n    {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5727916, "supported_languages": null}, "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql": {"name": "postgres__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql", "macro_sql": "{% macro postgres__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n\n    -- apply a full refresh immediately if needed\n    {% if configuration_changes.requires_full_refresh %}\n\n        {{ get_replace_sql(existing_relation, relation, sql) }}\n\n    -- otherwise apply individual changes as needed\n    {% else %}\n\n        {{ postgres__update_indexes_on_materialized_view(relation, configuration_changes.indexes) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_sql", "macro.dbt_postgres.postgres__update_indexes_on_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.574256, "supported_languages": null}, "macro.dbt_postgres.postgres__update_indexes_on_materialized_view": {"name": "postgres__update_indexes_on_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__update_indexes_on_materialized_view", "macro_sql": "\n\n\n{%- macro postgres__update_indexes_on_materialized_view(relation, index_changes) -%}\n    {{- log(\"Applying UPDATE INDEXES to: \" ~ relation) -}}\n\n    {%- for _index_change in index_changes -%}\n        {%- set _index = _index_change.context -%}\n\n        {%- if _index_change.action == \"drop\" -%}\n\n            {{ postgres__get_drop_index_sql(relation, _index.name) }};\n\n        {%- elif _index_change.action == \"create\" -%}\n\n            {{ postgres__get_create_index_sql(relation, _index.as_node_config) }}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql", "macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.575231, "supported_languages": null}, "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes": {"name": "postgres__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt_postgres.postgres__get_materialized_view_configuration_changes", "macro_sql": "{% macro postgres__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {% set _existing_materialized_view = postgres__describe_materialized_view(existing_relation) %}\n    {% set _configuration_changes = existing_relation.get_materialized_view_config_change_collection(_existing_materialized_view, new_config) %}\n    {% do return(_configuration_changes) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__describe_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5758297, "supported_languages": null}, "macro.dbt_postgres.postgres__refresh_materialized_view": {"name": "postgres__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt_postgres.postgres__refresh_materialized_view", "macro_sql": "{% macro postgres__refresh_materialized_view(relation) %}\n    refresh materialized view {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5761075, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_materialized_view_sql": {"name": "postgres__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_materialized_view_sql", "macro_sql": "{% macro postgres__get_rename_materialized_view_sql(relation, new_name) %}\n    alter materialized view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5764573, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_view": {"name": "postgres__drop_view", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_view", "macro_sql": "{% macro postgres__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.576725, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_view_sql": {"name": "postgres__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_view_sql", "macro_sql": "{% macro postgres__get_replace_view_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace view {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n        {%- endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5778213, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_view_sql": {"name": "postgres__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_view_sql", "macro_sql": "{% macro postgres__get_rename_view_sql(relation, new_name) %}\n    alter view {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5781696, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_table": {"name": "postgres__drop_table", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt_postgres.postgres__drop_table", "macro_sql": "{% macro postgres__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5784478, "supported_languages": null}, "macro.dbt_postgres.postgres__get_replace_table_sql": {"name": "postgres__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt_postgres.postgres__get_replace_table_sql", "macro_sql": "{% macro postgres__get_replace_table_sql(relation, sql) -%}\n\n    {%- set sql_header = config.get('sql_header', none) -%}\n    {{ sql_header if sql_header is not none }}\n\n    create or replace table {{ relation }}\n        {% set contract_config = config.get('contract') %}\n        {% if contract_config.enforced %}\n            {{ get_assert_columns_equivalent(sql) }}\n            {{ get_table_columns_and_constraints() }}\n            {%- set sql = get_select_subquery(sql) %}\n        {% endif %}\n    as (\n        {{ sql }}\n    );\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.579793, "supported_languages": null}, "macro.dbt_postgres.postgres__get_rename_table_sql": {"name": "postgres__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt_postgres.postgres__get_rename_table_sql", "macro_sql": "{% macro postgres__get_rename_table_sql(relation, new_name) %}\n    alter table {{ relation }} rename to {{ new_name }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.580144, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5808992, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5822673, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5831497, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5902753, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5907001, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.591165, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5927165, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.593997, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5947666, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5952802, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5964913, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5972564, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5976942, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5981078, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5985205, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.5994687, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6003983, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.601685, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6043308, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6049957, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6054273, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6061482, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.606728, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6080327, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6089907, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6094213, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6099937, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6106188, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6110332, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6127334, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6129808, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6140785, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6144269, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6147017, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6175206, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6183403, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.619041, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6196022, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6198192, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6203513, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6206436, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.621165, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6214726, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6225786, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6229572, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.623519, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.62381, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6244102, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.624683, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.625202, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6255248, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.626034, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.626258, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6270244, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6273665, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.627854, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6287313, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6301558, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6304653, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6328182, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6332786, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6337376, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6343048, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6346014, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6351104, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6353338, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.63681, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6371965, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6381037, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.639614, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6407747, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6411655, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6415417, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6421049, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6424143, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6429434, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.643251, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6438487, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.644962, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6454494, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6460757, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6474779, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.647761, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.648087, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6489239, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6493564, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6496582, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6499867, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.650262, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6514852, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6518424, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6524322, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6527817, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6533363, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6543362, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.655225, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.655548, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6558442, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6560633, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6564121, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.656572, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6569085, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6572511, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6600494, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.660304, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6606517, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.660884, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.661644, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.662028, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6622496, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.662838, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6632295, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6636992, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.664086, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6645656, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.666017, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.666439, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6669552, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.667434, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.669798, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6741621, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6747108, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6751254, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6756675, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6760461, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6763787, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6767485, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6772614, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.677677, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6787882, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6791759, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6795182, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6798544, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.680166, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6805935, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.680951, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6820242, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6824477, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6827343, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6834552, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6838365, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6841738, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6845658, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.685365, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6862276, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6891975, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6895452, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6899946, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6905909, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6912205, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6918743, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.692249, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6925797, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6930752, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6941962, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6946583, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.694943, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6955152, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.695969, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.6995142, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.699857, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7005258, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7009728, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7014077, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.701786, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.704337, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7050636, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7054536, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7061796, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.706658, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.707924, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7084653, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7102, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7131453, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7143629, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7150004, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.718043, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7205677, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7222831, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7227788, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7235055, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7241442, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.724794, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.726888, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7273183, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7276301, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.727937, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7282486, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7392511, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7401352, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7407296, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7464828, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.747108, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7474732, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7476695, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.747991, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.748265, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7487097, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.750578, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7509778, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7515347, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7524729, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7587113, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7591057, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7596042, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7611136, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.761468, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7618308, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.764816, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7677474, "supported_languages": null}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7730162, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7737737, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7745721, "supported_languages": null}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7754, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.776051, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7813525, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7869895, "supported_languages": ["sql"]}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7947497, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.795587, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7961254, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7991076, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.7996547, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8010793, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8078122, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8084729, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8087697, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8092964, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8095543, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8108122, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8189702, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8215687, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8243434, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8261712, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8289251, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8300955, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.831508, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8320327, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8336146, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8352156, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8357143, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8360994, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8367324, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.837123, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8377392, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8381252, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.83868, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.839067, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.83939, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8399734, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8488617, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8526177, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.853208, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8559833, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.856715, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8582964, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8689122, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8793058, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8813405, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.881902, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.882946, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8833554, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8836458, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8839483, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8841987, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8845882, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8849652, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8863208, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8868024, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8900402, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.8973825, "supported_languages": ["sql"]}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9001, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.90044, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9021575, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.903051, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9042654, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9052227, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.905388, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9062593, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9067705, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9073815, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9076865, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9084566, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.908881, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9095976, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.909935, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.910911, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9112713, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.912174, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9127047, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9130387, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.913557, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9137807, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9142795, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.914501, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9159763, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9168906, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.917294, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9184403, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9191482, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9195194, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9200532, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.920407, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9209142, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9211898, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081072.9224703, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0011954, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0017273, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0024524, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0029242, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0030804, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0037098, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.004047, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0045986, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0048738, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0054324, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0057077, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0061798, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0063958, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0081532, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0084856, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.008817, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0091274, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0095725, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.009883, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0102062, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.010568, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0108924, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0111933, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0115223, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0118158, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0121362, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0124378, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0129411, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0131562, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0136793, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0139673, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0144272, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0145972, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.015169, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0154564, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0160985, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0164452, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.017683, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0185277, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.019166, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0197058, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.020004, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0207636, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0215416, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0224595, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0229988, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0235968, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0243266, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0248523, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0257633, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0262392, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0268245, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0273864, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0386643, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0432909, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0480645, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.050778, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.052373, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0537949, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.055381, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0568213, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0577106, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0581114, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0593064, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0606096, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.061904, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0624046, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.063178, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0638492, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.065087, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.066426, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0667667, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0670726, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0673838, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0678232, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0681334, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.06844, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.068737, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.069481, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0703874, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0707867, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.071107, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0713465, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.07174, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.07219, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0744486, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0748968, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0752387, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0757604, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0761745, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0765893, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0769494, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0774705, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0781662, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0785859, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0788715, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0791495, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0796094, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0803936, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0806909, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0809915, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0814044, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.081648, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0819454, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0824077, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0833209, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0837727, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0840666, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.084369, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0851328, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0859838, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0869763, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0872965, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0880494, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0885978, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0889056, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0892918, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0897138, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0900922, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.090466, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0909944, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0914352, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0921345, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0925827, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0929527, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0933204, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0974364, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0980356, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.0986724, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.099724, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1007402, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1020615, "supported_languages": null}, "macro.dbt_date.duckdb__from_unixtimestamp": {"name": "duckdb__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.duckdb__from_unixtimestamp", "macro_sql": "\n\n\n{%- macro duckdb__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1026373, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1031787, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1073549, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1079807, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1088288, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1094418, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1103296, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1111045, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1114745, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1119342, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.112547, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.114065, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.114503, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1149633, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1154423, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1158807, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1162922, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1167123, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1173007, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.11865, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1190495, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1193461, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1196332, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1199355, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.120231, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.120524, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.12081, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1213098, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1218078, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1225688, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1228647, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1231549, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1233788, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.123594, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1238086, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1243086, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1255782, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1261153, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1265416, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1269565, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1273959, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1277978, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'MMM' if short else 'MMMM' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1282108, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1286309, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.129389, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1303546, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1306317, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1310515, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1314816, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1318038, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1343572, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1355271, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1370027, "supported_languages": null}, "macro.automate_dv.materialization_vault_insert_by_period_default": {"name": "materialization_vault_insert_by_period_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/vault_insert_by_period_materialization.sql", "original_file_path": "macros/materialisations/vault_insert_by_period_materialization.sql", "unique_id": "macro.automate_dv.materialization_vault_insert_by_period_default", "macro_sql": "{% materialization vault_insert_by_period, default -%}\n\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n    {%- set period = config.get('period', default='day') -%}\n\n    {#- Raise the errors/warnings in this order so that we do not get both -#}\n    {%- if period == 'microsecond' -%}\n        {{ automate_dv.datepart_too_small_error(period=period) }}\n    {%- elif period is in ['millisecond', 'second', 'minute', 'hour'] -%}\n        {{ automate_dv.datepart_not_recommended_warning(period=period) }}\n    {%- endif -%}\n\n    {{ automate_dv.experimental_not_recommended_warning(func_name='vault_insert_by_period') }}\n\n    {% if target.type == \"sqlserver\" %}\n        {%- set target_relation = this.incorporate(type='table') -%}\n    {%  else %}\n        {%- set target_relation = this -%}\n    {% endif %}\n\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n    {%- set timestamp_field = config.require('timestamp_field') -%}\n    {%- set date_source_models = config.get('date_source_models', default=none) -%}\n\n    {%- set start_stop_dates = automate_dv.get_start_stop_dates(timestamp_field, date_source_models) | as_native -%}\n\n    {%- set to_drop = [] -%}\n\n    {%- do automate_dv.check_placeholder(sql) -%}\n\n    {%- do automate_dv.check_num_periods(start_stop_dates.start_date, start_stop_dates.stop_date, period) -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(core_sql=sql, timestamp_field=timestamp_field,\n                                                                       start_timestamp=start_stop_dates.start_date,\n                                                                       stop_timestamp=start_stop_dates.stop_date,\n                                                                       offset=0, period=period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n        {% do to_drop.append(tmp_relation) %}\n\n    {% elif existing_relation.is_view %}\n\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_period).\") }}\n        {% do adapter.drop_relation(existing_relation) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(core_sql=sql, timestamp_field=timestamp_field,\n                                                                       start_timestamp=start_stop_dates.start_date,\n                                                                       stop_timestamp=start_stop_dates.stop_date,\n                                                                       offset=0, period=period) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n    {% elif full_refresh_mode %}\n        {% set filtered_sql = automate_dv.replace_placeholder_with_period_filter(core_sql=sql, timestamp_field=timestamp_field,\n                                                                       start_timestamp=start_stop_dates.start_date,\n                                                                       stop_timestamp=start_stop_dates.stop_date,\n                                                                       offset=0, period=period) %}\n        {% if target.type in ['postgres', 'sqlserver'] %}\n            {{ automate_dv.drop_temporary_special(target_relation) }}\n        {% endif %}\n\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n    {% else %}\n        {% set period_boundaries = automate_dv.get_period_boundaries(target_relation,\n                                                                  timestamp_field,\n                                                                  start_stop_dates.start_date,\n                                                                  start_stop_dates.stop_date,\n                                                                  period) %}\n\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n        {% for i in range(period_boundaries.num_periods) -%}\n\n            {%- set iteration_number = i + 1 -%}\n\n            {%- set period_of_load = automate_dv.get_period_of_load(period, i, period_boundaries.start_timestamp) -%}\n\n            {{ dbt_utils.log_info(\"Running for {} {} of {} ({}) [{}]\".format(period, iteration_number, period_boundaries.num_periods, period_of_load, model.unique_id)) }}\n\n            {% set tmp_relation = make_temp_relation(target_relation) %}\n\n            {% set tmp_table_sql = automate_dv.get_period_filter_sql(target_cols_csv, sql, timestamp_field, period,\n                                                                  period_boundaries.start_timestamp,\n                                                                  period_boundaries.stop_timestamp, i) %}\n\n\n\n            {# This call statement drops and then creates a temporary table #}\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\n            {# See MSSQL note and drop code below #}\n\n            {# Postgres needs to have an alias appended #}\n            {% if target.type == \"postgres\" %}\n                {% set tmp_table_sql = tmp_table_sql ~ ' AS SUBQUERY_ALIAS' %}\n            {% endif %}\n\n            {% call statement() -%}\n                {{ create_table_as(True, tmp_relation, tmp_table_sql) }}\n            {%- endcall %}\n\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                  to_relation=target_relation) }}\n\n            {%- set insert_query_name = 'main-' ~ i -%}\n            {% call statement(insert_query_name, fetch_result=True) -%}\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\n                (\n                    SELECT {{ target_cols_csv }}\n                    FROM {{ tmp_relation.include(schema=True) }}\n                );\n            {%- endcall %}\n\n            {% set result = load_result(insert_query_name) %}\n\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n                {%- if not result['response']['rows_affected'] %}\n                    {% if target.type == \"databricks\" and result['data'] | length > 0 %}\n                        {% set rows_inserted = result['data'][0][1] | int %}\n                    {% else %}\n                        {% set rows_inserted = 0 %}\n                    {% endif %}\n                {%- else %}\n                    {% set rows_inserted = result['response']['rows_affected'] %}\n                {%- endif %}\n            {% else %} {# older versions #}\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n            {% endif %}\n\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n            {{ dbt_utils.log_info(\"Ran for {} {} of {} ({}); {} records inserted [{}]\".format(period, iteration_number,\n                                                                                              period_boundaries.num_periods,\n                                                                                              period_of_load, rows_inserted,\n                                                                                              model.unique_id)) }}\n\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\n            {% if target.type in ['databricks', 'sqlserver'] %}\n                {{ automate_dv.drop_temporary_special(tmp_relation) }}\n            {% else %}\n                {% do to_drop.append(tmp_relation) %}\n            {% endif %}\n\n            {% do adapter.commit() %}\n\n        {% endfor %}\n\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n            {{ tmp_table_sql }}\n        {%- endcall %}\n\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {% set result = load_result('main') %}\n\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n            {%- if not result['response']['rows_affected'] %}\n                {% if target.type == \"databricks\" and result['data'] | length > 0 %}\n                    {% set rows_inserted = result['data'][0][1] | int %}\n                {% else %}\n                    {% set rows_inserted = 0 %}\n                {% endif %}\n            {%- else %}\n                {% set rows_inserted = result['response']['rows_affected'] %}\n            {%- endif %}\n        {% else %} {# older versions #}\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n        {% endif %}\n\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\n            {{ build_sql }}\n        {%- endcall %}\n\n        -- `COMMIT` happens here\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {% if rel.type is not none %}\n            {% do adapter.drop_relation(rel) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set target_relation = target_relation.incorporate(type='table') %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.automate_dv.datepart_too_small_error", "macro.automate_dv.datepart_not_recommended_warning", "macro.automate_dv.experimental_not_recommended_warning", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.automate_dv.get_start_stop_dates", "macro.automate_dv.check_placeholder", "macro.automate_dv.check_num_periods", "macro.dbt.run_hooks", "macro.automate_dv.replace_placeholder_with_period_filter", "macro.dbt.create_table_as", "macro.automate_dv.drop_temporary_special", "macro.automate_dv.get_period_boundaries", "macro.automate_dv.get_period_of_load", "macro.dbt_utils.log_info", "macro.automate_dv.get_period_filter_sql", "macro.dbt.statement", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1664338, "supported_languages": ["sql"]}, "macro.automate_dv.check_placeholder": {"name": "check_placeholder", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/shared_helpers.sql", "original_file_path": "macros/materialisations/shared_helpers.sql", "unique_id": "macro.automate_dv.check_placeholder", "macro_sql": "\n\n{%- macro check_placeholder(model_sql, placeholder='__PERIOD_FILTER__') -%}\n\n    {%- if model_sql.find(placeholder) == -1 -%}\n    {%- set error_message -%}\n    Model '{{ model.unique_id }}' does not include the required string '{{ placeholder }}' in its sql\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.167576, "supported_languages": null}, "macro.automate_dv.materialization_vault_insert_by_rank_default": {"name": "materialization_vault_insert_by_rank_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/vault_insert_by_rank_materialization.sql", "original_file_path": "macros/materialisations/vault_insert_by_rank_materialization.sql", "unique_id": "macro.automate_dv.materialization_vault_insert_by_rank_default", "macro_sql": "{% materialization vault_insert_by_rank, default -%}\n\n    {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n    {% if target.type == \"sqlserver\" %}\n        {%- set target_relation = this.incorporate(type='table') -%}\n    {%  else %}\n        {%- set target_relation = this -%}\n    {% endif %}\n\n    {%- set existing_relation = load_relation(this) -%}\n    {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n    {%- set rank_column = config.require('rank_column') -%}\n    {%- set rank_source_models = config.require('rank_source_models') -%}\n\n    {%- set min_max_ranks = automate_dv.get_min_max_ranks(rank_column, rank_source_models) | as_native -%}\n\n    {#- Raise the errors/warnings in this order so that we do not get both -#}\n    {% if min_max_ranks.max_rank | int > 100000 %}\n        {{ automate_dv.max_iterations_error(func_name='vault_insert_by_rank') }}\n    {% endif %}\n\n    {{ automate_dv.experimental_not_recommended_warning(func_name='vault_insert_by_rank') }}\n\n\n    {%- set to_drop = [] -%}\n\n    {%- do automate_dv.check_placeholder(sql, \"__RANK_FILTER__\") -%}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% if existing_relation is none %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n        {% do to_drop.append(tmp_relation) %}\n\n    {% elif existing_relation.is_view %}\n\n        {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table (vault_insert_by_rank).\") }}\n        {% do adapter.drop_relation(existing_relation) %}\n\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n\n    {% elif full_refresh_mode %}\n        {% set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, 1) %}\n        {% if target.type in ['postgres', 'sqlserver'] %}\n            {{ automate_dv.drop_temporary_special(target_relation) }}\n        {% endif %}\n        {% set build_sql = create_table_as(False, target_relation, filtered_sql) %}\n    {% else %}\n\n        {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n        {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n        {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n        {% for i in range(min_max_ranks.max_rank | int ) -%}\n\n            {%- set iteration_number = i + 1 -%}\n\n            {%- set filtered_sql = automate_dv.replace_placeholder_with_rank_filter(sql, rank_column, iteration_number) -%}\n\n            {{ dbt_utils.log_info(\"Running for {} {} of {} on column '{}' [{}]\".format('rank', iteration_number, min_max_ranks.max_rank, rank_column, model.unique_id)) }}\n\n            {% set tmp_relation = make_temp_relation(target_relation) %}\n\n            {# This call statement drops and then creates a temporary table #}\n            {# but MSSQL will fail to drop any temporary table created by a previous loop iteration #}\n            {# See MSSQL note and drop code below #}\n            {% call statement() -%}\n                {{ create_table_as(True, tmp_relation, filtered_sql) }}\n            {%- endcall %}\n\n            {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                                  to_relation=target_relation) }}\n\n            {%- set insert_query_name = 'main-' ~ i -%}\n            {% call statement(insert_query_name, fetch_result=True) -%}\n                INSERT INTO {{ target_relation }} ({{ target_cols_csv }})\n                (\n                    SELECT {{ target_cols_csv }}\n                    FROM {{ tmp_relation.include(schema=True) }}\n                );\n            {%- endcall %}\n\n            {% set result = load_result(insert_query_name) %}\n            {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n                {# Investigate for Databricks #}\n                {%- if result['response']['rows_affected'] == None %}\n                    {% set rows_inserted = 0 %}\n                {%- else %}\n                    {% set rows_inserted = result['response']['rows_affected'] %}\n                {%- endif %}\n\n            {% else %} {# older versions #}\n                {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n            {% endif %}\n\n            {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n            {%- do loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %}\n\n            {{ dbt_utils.log_info(\"Ran for {} {} of {}; {} records inserted [{}]\".format('rank', iteration_number,\n                                                                                          min_max_ranks.max_rank,\n                                                                                          rows_inserted,\n                                                                                          model.unique_id)) }}\n\n            {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n            {# the connection or session that created it so drop it now before the commit below closes this session #}                                                                            model.unique_id)) }}\n            {% if target.type in ['databricks', 'sqlserver'] %}\n                {{ automate_dv.drop_temporary_special(tmp_relation) }}\n            {% else %}\n                {% do to_drop.append(tmp_relation) %}\n            {% endif %}\n\n            {% do adapter.commit() %}\n\n        {% endfor %}\n        {% call noop_statement('main', \"INSERT {}\".format(loop_vars['sum_rows_inserted']) ) -%}\n            {{ filtered_sql }}\n        {%- endcall %}\n    {% endif %}\n\n    {% if build_sql is defined %}\n        {% call statement(\"main\", fetch_result=True) %}\n            {{ build_sql }}\n        {% endcall %}\n\n        {% set result = load_result('main') %}\n\n        {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n            {% set rows_inserted = result['response']['rows_affected'] %}\n        {% else %} {# older versions #}\n            {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n        {% endif %}\n\n        {% call noop_statement('main', \"BASE LOAD {}\".format(rows_inserted)) -%}\n            {{ build_sql }}\n        {%- endcall %}\n\n        -- `COMMIT` happens here\n        {% do adapter.commit() %}\n    {% endif %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {% for rel in to_drop %}\n        {% if rel.type is not none %}\n            {% do adapter.drop_relation(rel) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set target_relation = target_relation.incorporate(type='table') %}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.automate_dv.get_min_max_ranks", "macro.automate_dv.max_iterations_error", "macro.automate_dv.experimental_not_recommended_warning", "macro.automate_dv.check_placeholder", "macro.dbt.run_hooks", "macro.automate_dv.replace_placeholder_with_rank_filter", "macro.dbt.create_table_as", "macro.automate_dv.drop_temporary_special", "macro.dbt_utils.log_info", "macro.dbt.statement", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.184125, "supported_languages": ["sql"]}, "macro.automate_dv.incremental_pit_replace": {"name": "incremental_pit_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.incremental_pit_replace", "macro_sql": "{% macro incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n\n    {{ adapter.dispatch('incremental_pit_replace', 'automate_dv')(tmp_relation=tmp_relation,\n                                                                    target_relation=target_relation,\n                                                                    statement_name=\"main\") }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__incremental_pit_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1873715, "supported_languages": null}, "macro.automate_dv.default__incremental_pit_replace": {"name": "default__incremental_pit_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.default__incremental_pit_replace", "macro_sql": "{% macro default__incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    TRUNCATE TABLE {{ target_relation }};\n\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1881745, "supported_languages": null}, "macro.automate_dv.databricks__incremental_pit_replace": {"name": "databricks__incremental_pit_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.databricks__incremental_pit_replace", "macro_sql": "{% macro databricks__incremental_pit_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    INSERT OVERWRITE {{ target_relation }} ({{ dest_cols_csv }})\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }};\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.188938, "supported_languages": null}, "macro.automate_dv.incremental_bridge_replace": {"name": "incremental_bridge_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.incremental_bridge_replace", "macro_sql": "{% macro incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n\n    {{ adapter.dispatch('incremental_bridge_replace', 'automate_dv')(tmp_relation=tmp_relation,\n                                                                    target_relation=target_relation,\n                                                                    statement_name=\"main\") }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__incremental_bridge_replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1894538, "supported_languages": null}, "macro.automate_dv.default__incremental_bridge_replace": {"name": "default__incremental_bridge_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.default__incremental_bridge_replace", "macro_sql": "{% macro default__incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    TRUNCATE TABLE {{ target_relation }};\n\n    INSERT INTO {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1902516, "supported_languages": null}, "macro.automate_dv.databricks__incremental_bridge_replace": {"name": "databricks__incremental_bridge_replace", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_bridge_replace.sql", "original_file_path": "macros/materialisations/incremental_pit_bridge_replace.sql", "unique_id": "macro.automate_dv.databricks__incremental_bridge_replace", "macro_sql": "{% macro databricks__incremental_bridge_replace(tmp_relation, target_relation, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    INSERT OVERWRITE {{ target_relation }} ({{ dest_cols_csv }})\n       SELECT {{ dest_cols_csv }}\n       FROM {{ tmp_relation }}\n    ;\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1910074, "supported_languages": null}, "macro.automate_dv.materialization_pit_incremental_default": {"name": "materialization_pit_incremental_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_pit_materialization.sql", "original_file_path": "macros/materialisations/incremental_pit_materialization.sql", "unique_id": "macro.automate_dv.materialization_pit_incremental_default", "macro_sql": "\n\n{%- materialization pit_incremental, default -%}\n\n  {%- set full_refresh_mode = should_full_refresh() -%}\n\n  {% if target.type == \"sqlserver\" %}\n      {%- set target_relation = this.incorporate(type='table') -%}\n  {%  else %}\n      {%- set target_relation = this -%}\n  {% endif %}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {%- set to_drop = [] -%}\n  {%- if existing_relation is none -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\n      {%- do adapter.drop_relation(backup_relation) -%}\n\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n      {%- do to_drop.append(backup_relation) -%}\n  {%- else -%}\n\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\n      {%- do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) -%}\n      {%- set build_sql = automate_dv.incremental_pit_replace(tmp_relation, target_relation) -%}\n{%- endif -%}\n\n  {%- call statement(\"main\") -%}\n      {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {%- do adapter.commit() -%}\n\n  {%- for rel in to_drop -%}\n      {%- do adapter.drop_relation(rel) -%}\n  {%- endfor -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.automate_dv.incremental_pit_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.1961505, "supported_languages": ["sql"]}, "macro.automate_dv.is_any_incremental": {"name": "is_any_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_any_incremental", "macro_sql": "\n\n{%- macro is_any_incremental() -%}\n    {%- if automate_dv.is_vault_insert_by_period() or automate_dv.is_vault_insert_by_rank() or automate_dv.is_pit_incremental() or automate_dv.is_bridge_incremental() or is_incremental() -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_vault_insert_by_period", "macro.automate_dv.is_vault_insert_by_rank", "macro.automate_dv.is_pit_incremental", "macro.automate_dv.is_bridge_incremental", "macro.dbt.is_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.198172, "supported_languages": null}, "macro.automate_dv.is_vault_insert_by_period": {"name": "is_vault_insert_by_period", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_vault_insert_by_period", "macro_sql": "{% macro is_vault_insert_by_period() %}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'vault_insert_by_period'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.199295, "supported_languages": null}, "macro.automate_dv.is_vault_insert_by_rank": {"name": "is_vault_insert_by_rank", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_vault_insert_by_rank", "macro_sql": "{% macro is_vault_insert_by_rank() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'vault_insert_by_rank'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2003758, "supported_languages": null}, "macro.automate_dv.is_bridge_incremental": {"name": "is_bridge_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_bridge_incremental", "macro_sql": "{% macro is_bridge_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'bridge_incremental'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2014558, "supported_languages": null}, "macro.automate_dv.is_pit_incremental": {"name": "is_pit_incremental", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/mat_is_checks.sql", "original_file_path": "macros/materialisations/mat_is_checks.sql", "unique_id": "macro.automate_dv.is_pit_incremental", "macro_sql": "{% macro is_pit_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n\n            {{ return(relation is not none\n                      and relation.type == 'table'\n                      and model.config.materialized == 'pit_incremental'\n                      and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2025065, "supported_languages": null}, "macro.automate_dv.wrap_warning": {"name": "wrap_warning", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/error_messages.sql", "original_file_path": "macros/materialisations/error_messages.sql", "unique_id": "macro.automate_dv.wrap_warning", "macro_sql": "{% macro wrap_warning(warning_message) %}\n\n    {%- set new_message = [] -%}\n    {%- set length_list = [] -%}\n\n    {%- for ln in warning_message.split('\\n') -%}\n        {%- do new_message.append((ln | trim)) -%}\n        {%- do length_list.append((ln | length)) -%}\n    {%- endfor -%}\n\n    {%- set max_line_length = length_list | max -%}\n    {%- set padding_length = (max_line_length - 7) // 2 -%}\n\n    {%- set border = modules.itertools.repeat('=', padding_length) | join ('') ~ 'WARNING' ~ modules.itertools.repeat('=', padding_length) | join ('') -%}\n\n    {%- set wrapped_message = '\\n' ~ border ~ '\\n' ~ new_message | join('\\n') ~ '\\n' ~ border -%}\n\n    {%- do return(wrapped_message) -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.207042, "supported_languages": null}, "macro.automate_dv.datepart_too_small_error": {"name": "datepart_too_small_error", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/error_messages.sql", "original_file_path": "macros/materialisations/error_messages.sql", "unique_id": "macro.automate_dv.datepart_too_small_error", "macro_sql": "\n\n\n{%- macro datepart_too_small_error(period) -%}\n\n    {%- set message -%}\n    This datepart ({{ period }}) is too small and not recommended, consider using a different datepart value (e.g. day) or rank column.\n    'vault_insert_by_x' materialisations are intended for experimental or testing purposes only. They are not intended for use in production.\n\n    Please see: https://automate-dv.readthedocs.io/en/latest/materialisations/\n    {%- endset -%}\n\n    {%- if execute -%}\n    {{- exceptions.raise_compiler_error(message) -}}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2075841, "supported_languages": null}, "macro.automate_dv.datepart_not_recommended_warning": {"name": "datepart_not_recommended_warning", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/error_messages.sql", "original_file_path": "macros/materialisations/error_messages.sql", "unique_id": "macro.automate_dv.datepart_not_recommended_warning", "macro_sql": "{%- macro datepart_not_recommended_warning(period) -%}\n\n    {%- set message -%}\n    This datepart ({{ period }}) is too small and not recommended, consider using a different datepart value (e.g. day) or rank column.\n    'vault_insert_by_x' materialisations are intended for experimental or testing purposes only. They are not intended for use in production.\n\n    Please see: https://automate-dv.readthedocs.io/en/latest/materialisations/\n    {%- endset -%}\n\n    {%- if execute -%}\n    {{- exceptions.warn(automate_dv.wrap_warning(message)) -}}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.wrap_warning"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.208161, "supported_languages": null}, "macro.automate_dv.max_iterations_error": {"name": "max_iterations_error", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/error_messages.sql", "original_file_path": "macros/materialisations/error_messages.sql", "unique_id": "macro.automate_dv.max_iterations_error", "macro_sql": "{%- macro max_iterations_error() -%}\n\n    {%- set message -%}\n    Max iterations is 100,000. Consider using a different datepart value (e.g. day), rank column or loading data for a shorter time period.\n    'vault_insert_by_x' materialisations are intended for experimental or testing purposes only. They are not intended for use in production.\n\n    Please see: https://automate-dv.readthedocs.io/en/latest/materialisations/\n    {%- endset %}\n\n    {%- if execute -%}\n    {{- exceptions.raise_compiler_error(message) -}}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2086256, "supported_languages": null}, "macro.automate_dv.experimental_not_recommended_warning": {"name": "experimental_not_recommended_warning", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/error_messages.sql", "original_file_path": "macros/materialisations/error_messages.sql", "unique_id": "macro.automate_dv.experimental_not_recommended_warning", "macro_sql": "{%- macro experimental_not_recommended_warning(func_name) -%}\n\n    {%- set message -%}\n    This functionality ({{ func_name }}) is intended for experimental or testing purposes only.\n    Its behavior, reliability, and performance have not been thoroughly vetted for production environments.\n    Using this functionality in a live production setting may result in unpredictable outcomes, data loss, or system instability.\n    {%- endset -%}\n\n    {%- if execute -%}\n    {{- exceptions.warn(automate_dv.wrap_warning(message)) -}}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.wrap_warning"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.209192, "supported_languages": null}, "macro.automate_dv.drop_temporary_special": {"name": "drop_temporary_special", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/drop_temporary.sql", "original_file_path": "macros/materialisations/drop_temporary.sql", "unique_id": "macro.automate_dv.drop_temporary_special", "macro_sql": "{% macro drop_temporary_special(tmp_relation) %}\n    {# In databricks and sqlserver a temporary view/table can only be dropped by #}\n    {# the connection or session that created it so drop it now before the commit below closes this session #}\n\n    {%- set drop_query_name = 'DROP_QUERY-' ~ i -%}\n    {% call statement(drop_query_name, fetch_result=True) -%}\n        {% if target.type == 'databricks' %}\n            DROP VIEW {{ tmp_relation }};\n        {% elif target.type == 'sqlserver' %}\n            DROP TABLE {{ tmp_relation }};\n        {% elif target.type == 'postgres' %}\n            DROP TABLE {{ tmp_relation }};\n        {% endif %}\n    {%- endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.210678, "supported_languages": null}, "macro.automate_dv.materialization_bridge_incremental_default": {"name": "materialization_bridge_incremental_default", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/incremental_bridge_materialization.sql", "original_file_path": "macros/materialisations/incremental_bridge_materialization.sql", "unique_id": "macro.automate_dv.materialization_bridge_incremental_default", "macro_sql": "\n\n{%- materialization bridge_incremental, default -%}\n\n  {%- set full_refresh_mode = should_full_refresh() -%}\n\n  {% if target.type == \"sqlserver\" %}\n      {%- set target_relation = this.incorporate(type='table') -%}\n  {%  else %}\n      {%- set target_relation = this -%}\n  {% endif %}\n  {%- set existing_relation = load_relation(this) -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {%- set to_drop = [] -%}\n  {%- if existing_relation is none -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n  {%- elif existing_relation.is_view or full_refresh_mode -%}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {%- set backup_identifier = existing_relation.identifier ~ \"__dbt_backup\" -%}\n      {%- set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) -%}\n      {%- do adapter.drop_relation(backup_relation) -%}\n\n      {%- do adapter.rename_relation(target_relation, backup_relation) -%}\n      {%- set build_sql = create_table_as(False, target_relation, sql) -%}\n      {%- do to_drop.append(backup_relation) -%}\n  {%- else -%}\n\n      {%- set tmp_relation = make_temp_relation(target_relation) -%}\n      {%- do run_query(create_table_as(True, tmp_relation, sql)) -%}\n      {%- do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) -%}\n      {%- set build_sql = automate_dv.incremental_bridge_replace(tmp_relation, target_relation) -%}\n{%- endif -%}\n\n  {%- call statement(\"main\") -%}\n      {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {%- do adapter.commit() -%}\n\n  {%- for rel in to_drop -%}\n      {%- do adapter.drop_relation(rel) -%}\n  {%- endfor -%}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.automate_dv.incremental_bridge_replace", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.21602, "supported_languages": ["sql"]}, "macro.automate_dv.get_period_boundaries": {"name": "get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.get_period_boundaries", "macro_sql": "\n\n{%- macro get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set macro = adapter.dispatch('get_period_boundaries',\n                                    'automate_dv')(target_relation=target_relation,\n                                                   timestamp_field=timestamp_field,\n                                                   start_date=start_date,\n                                                   stop_date=stop_date,\n                                                   period=period) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2246637, "supported_languages": null}, "macro.automate_dv.default__get_period_boundaries": {"name": "default__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\n    {%- set datepart = period -%}\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n           SELECT\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\n                COALESCE({{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }},\n                         {{ current_timestamp() }} )::TIMESTAMP AS stop_timestamp\n            FROM {{ target_relation }}\n         )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp',\n                                  'stop_timestamp',\n                                  period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2265456, "supported_languages": null}, "macro.automate_dv.bigquery__get_period_boundaries": {"name": "bigquery__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.bigquery__get_period_boundaries", "macro_sql": "{% macro bigquery__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')\".format(stop_date | lower) -%}\n    {%- set datepart = period -%}\n\n    {% set period_boundary_sql -%}\n        with data as (\n            select\n                COALESCE(\n                    CAST(MAX({{ timestamp_field }}) AS TIMESTAMP),\n                    CAST('{{ start_date }}' AS TIMESTAMP))\n                as START_TIMESTAMP,\n                COALESCE(\n                    CAST({{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }} AS TIMESTAMP),\n                    CAST({{ current_timestamp() }} AS TIMESTAMP))\n                as STOP_TIMESTAMP\n            from {{ target_relation }}\n        )\n        select\n            START_TIMESTAMP,\n            STOP_TIMESTAMP,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 as NUM_PERIODS\n        from data\n    {%- endset %}\n\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2284286, "supported_languages": null}, "macro.automate_dv.sqlserver__get_period_boundaries": {"name": "sqlserver__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.sqlserver__get_period_boundaries", "macro_sql": "{% macro sqlserver__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n    {%- if period is in ['microsecond', 'millisecond', 'second'] -%}\n        {{ automate_dv.datepart_too_small_error(period=period) }}\n    {%- endif -%}\n\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_date = start_date[0:27] %}\n    {% set stop_date = stop_date[0:27] %}\n    {%- set datepart = period -%}\n    {%- set from_date_or_timestamp = \"CAST(NULLIF('{}','none') AS DATETIME2)\".format(stop_date | lower) %}\n\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n           SELECT\n                CAST(COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS DATETIME2)) AS DATETIME2) AS start_timestamp,\n                CAST(COALESCE({{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }},\n                         {{ current_timestamp() }} ) AS DATETIME2) AS stop_timestamp\n            FROM {{ target_relation }}\n      )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.datepart_too_small_error", "macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2309368, "supported_languages": null}, "macro.automate_dv.databricks__get_period_boundaries": {"name": "databricks__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.databricks__get_period_boundaries", "macro_sql": "{% macro databricks__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {%- set from_date_or_timestamp = \"NULLIF('{}','none')::TIMESTAMP\".format(stop_date | lower) -%}\n            {%- set datepart = period -%}\n    {% set period_boundary_sql -%}\n\n        WITH period_data AS (\n            SELECT\n                COALESCE(MAX({{ timestamp_field }}), CAST('{{ start_date }}' AS TIMESTAMP)) AS start_timestamp,\n                COALESCE(\n                {{ automate_dv.timestamp_add(datepart, interval, from_date_or_timestamp) }},\n                         {{ current_timestamp() }}) AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            IF(stop_timestamp < start_timestamp, stop_timestamp, start_timestamp) AS start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2328928, "supported_languages": null}, "macro.automate_dv.postgres__get_period_boundaries": {"name": "postgres__get_period_boundaries", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_boundaries.sql", "unique_id": "macro.automate_dv.postgres__get_period_boundaries", "macro_sql": "{% macro postgres__get_period_boundaries(target_relation, timestamp_field, start_date, stop_date, period) -%}\n\n    {% set period_boundary_sql -%}\n        WITH period_data AS (\n            SELECT\n                COALESCE(MAX({{ timestamp_field }}), '{{ start_date }}')::TIMESTAMP AS start_timestamp,\n                COALESCE({{ automate_dv.timestamp_add('millisecond', 86399999, \"NULLIF('\" ~ stop_date | lower ~ \"','none')::TIMESTAMP\") }},\n                         {{ current_timestamp() }} )::TIMESTAMP AS stop_timestamp\n            FROM {{ target_relation }}\n        )\n        SELECT\n            start_timestamp,\n            stop_timestamp,\n            {{ datediff('start_timestamp', 'stop_timestamp', period) }} + 1 AS num_periods\n        FROM period_data\n    {%- endset %}\n\n    {% set period_boundaries_dict = automate_dv.get_query_results_as_dict(period_boundary_sql) %}\n\n    {% set period_boundaries = {'start_timestamp': period_boundaries_dict['START_TIMESTAMP'][0] | string,\n                                'stop_timestamp': period_boundaries_dict['STOP_TIMESTAMP'][0] | string,\n                                'num_periods': period_boundaries_dict['NUM_PERIODS'][0] | int} %}\n\n    {% do return(period_boundaries) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.timestamp_add", "macro.dbt.current_timestamp", "macro.dbt.datediff", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2346642, "supported_languages": null}, "macro.automate_dv.get_period_filter_sql": {"name": "get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.get_period_filter_sql", "macro_sql": "\n\n{%- macro get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {% set macro = adapter.dispatch('get_period_filter_sql',\n                                    'automate_dv')(target_cols_csv=target_cols_csv,\n                                                   base_sql=base_sql,\n                                                   timestamp_field=timestamp_field,\n                                                   period=period,\n                                                   start_timestamp=start_timestamp,\n                                                   stop_timestamp=stop_timestamp,\n                                                   offset=offset) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__get_period_filter_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2382886, "supported_languages": null}, "macro.automate_dv.default__get_period_filter_sql": {"name": "default__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.default__get_period_filter_sql", "macro_sql": "{% macro default__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(core_sql=filtered_sql.sql,\n                                                                                          timestamp_field=timestamp_field,\n                                                                                          start_timestamp=start_timestamp,\n                                                                                          stop_timestamp=stop_timestamp,\n                                                                                          offset=offset, period=period)}) -%}\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2393174, "supported_languages": null}, "macro.automate_dv.sqlserver__get_period_filter_sql": {"name": "sqlserver__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.sqlserver__get_period_filter_sql", "macro_sql": "{% macro sqlserver__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(core_sql=filtered_sql.sql,\n                                                                                          timestamp_field=timestamp_field,\n                                                                                          start_timestamp=start_timestamp,\n                                                                                          stop_timestamp=stop_timestamp,\n                                                                                          offset=offset, period=period)}) -%}\n    {# MSSQL does not allow CTEs in a subquery #}\n    {{ filtered_sql.sql }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2403126, "supported_languages": null}, "macro.automate_dv.postgres__get_period_filter_sql": {"name": "postgres__get_period_filter_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_filter_sql.sql", "unique_id": "macro.automate_dv.postgres__get_period_filter_sql", "macro_sql": "{% macro postgres__get_period_filter_sql(target_cols_csv, base_sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n    {%- set filtered_sql = {'sql': base_sql} -%}\n\n    {%- do filtered_sql.update({'sql': automate_dv.replace_placeholder_with_period_filter(core_sql=filtered_sql.sql,\n                                                                                          timestamp_field=timestamp_field,\n                                                                                          start_timestamp=start_timestamp,\n                                                                                          stop_timestamp=stop_timestamp,\n                                                                                          offset=offset, period=period)}) -%}\n    select {{ target_cols_csv }} from ({{ filtered_sql.sql }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.241337, "supported_languages": null}, "macro.automate_dv.check_num_periods": {"name": "check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "original_file_path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "unique_id": "macro.automate_dv.check_num_periods", "macro_sql": "\n\n{%- macro check_num_periods(start_date, stop_date, period) -%}\n\n    {% set num_periods = adapter.dispatch('check_num_periods',\n                                          'automate_dv')(start_date=start_date,\n                                                         stop_date=stop_date,\n                                                         period=period) %}\n\n    {%- if num_periods > 100000 -%}\n        {{ automate_dv.max_iterations_error() }}\n    {%- endif -%}\n\n    {% do return(num_periods) %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__check_num_periods", "macro.automate_dv.max_iterations_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.243259, "supported_languages": null}, "macro.automate_dv.default__check_num_periods": {"name": "default__check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "original_file_path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "unique_id": "macro.automate_dv.default__check_num_periods", "macro_sql": "{% macro default__check_num_periods(start_date, stop_date, period) %}\n\n    {% set num_periods_check_sql %}\n    SELECT {{ datediff('start_timestamp', 'stop_timestamp', period) }} AS NUM_PERIODS\n    FROM\n    (SELECT CAST('{{ start_date }}' AS {{ dbt.type_timestamp() }}) AS start_timestamp,\n        CAST(NULLIF('{{ stop_date | lower }}', 'none') AS {{ dbt.type_timestamp() }}) AS stop_timestamp) AS SUBQUERY_ALIAS\n    {% endset %}\n    {% set num_periods_dict = automate_dv.get_query_results_as_dict(num_periods_check_sql) %}\n    {% set num_periods = num_periods_dict['NUM_PERIODS'][0] | int %}\n\n    {% do return(num_periods) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt.type_timestamp", "macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2444522, "supported_languages": null}, "macro.automate_dv.sqlserver__check_num_periods": {"name": "sqlserver__check_num_periods", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "original_file_path": "macros/materialisations/period_mat_helpers/check_datediff.sql", "unique_id": "macro.automate_dv.sqlserver__check_num_periods", "macro_sql": "{% macro sqlserver__check_num_periods(start_date, stop_date, period) %}\n\n    {% set num_periods_check_sql %}\n    SELECT DATEDIFF_BIG({{ period }}, CAST('{{ start_date }}' AS DATETIME2),\n        CAST(NULLIF('{{ stop_date | lower }}', 'none') AS DATETIME2)) AS NUM_PERIODS\n    {% endset %}\n    {% set num_periods_dict = automate_dv.get_query_results_as_dict(num_periods_check_sql) %}\n    {% set num_periods = num_periods_dict['NUM_PERIODS'][0] | int %}\n\n    {% do return(num_periods) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2453706, "supported_languages": null}, "macro.automate_dv.get_start_stop_dates": {"name": "get_start_stop_dates", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_start_stop_dates.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_start_stop_dates.sql", "unique_id": "macro.automate_dv.get_start_stop_dates", "macro_sql": "{% macro get_start_stop_dates(timestamp_field, date_source_models) %}\n\n    {% if config.get('start_date', default=none) is not none %}\n        {%- set start_date = config.get('start_date') -%}\n        {%- set stop_date = config.get('stop_date', default=none) -%}\n\n        {% do return({'start_date': start_date,'stop_date': stop_date}) %}\n\n    {% elif date_source_models is not none %}\n        {% if date_source_models is string %}\n            {% set date_source_models = [date_source_models] %}\n        {% endif %}\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in date_source_models %}\n                SELECT\n                    {{ timestamp_field }}\n                    FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ timestamp_field }}) AS MIN, MAX({{ timestamp_field }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = automate_dv.get_query_results_as_dict(query_sql) %}\n\n        {% set start_date = min_max_dict['MIN'][0] | string %}\n        {% set stop_date = min_max_dict['MAX'][0] | string %}\n        {% set min_max_dates = {\"start_date\": start_date, \"stop_date\": stop_date} %}\n\n        {% do return(min_max_dates) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_period' configuration. Must provide 'start_date' and 'stop_date', just 'stop_date', and/or 'date_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2498918, "supported_languages": null}, "macro.automate_dv.get_period_of_load": {"name": "get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.get_period_of_load", "macro_sql": "\n\n{%- macro get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set macro = adapter.dispatch('get_period_of_load',\n                                    'automate_dv')(period=period,\n                                                   offset=offset,\n                                                   start_timestamp=start_timestamp) %}\n\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2527971, "supported_languages": null}, "macro.automate_dv.default__get_period_of_load": {"name": "default__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.default__get_period_of_load", "macro_sql": "\n\n\n{%- macro default__get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC('{{ period }}', DATEADD({{ period }}, {{ offset }}, TO_TIMESTAMP('{{ start_timestamp }}'))) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2537336, "supported_languages": null}, "macro.automate_dv.bigquery__get_period_of_load": {"name": "bigquery__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.bigquery__get_period_of_load", "macro_sql": "{%- macro bigquery__get_period_of_load(period, offset, start_timestamp) -%}\n\n    {% set period_of_load_sql -%}\n        {%- if period is in ['millisecond', 'microsecond', 'second', 'minute', 'hour'] -%}\n        SELECT TIMESTAMP_TRUNC(TIMESTAMP_ADD( TIMESTAMP('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\n        {%- elif period is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\n        {%- else -%}\n        SELECT DATE_TRUNC(DATE_ADD( DATE('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }}  ) AS PERIOD_OF_LOAD\n        {%- endif -%}\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2555645, "supported_languages": null}, "macro.automate_dv.sqlserver__get_period_of_load": {"name": "sqlserver__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.sqlserver__get_period_of_load", "macro_sql": "{%- macro sqlserver__get_period_of_load(period, offset, start_timestamp) -%}\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_timestamp_mssql = start_timestamp[0:23] %}\n\n    {% set period_of_load_sql -%}\n        SELECT DATEADD({{ period }}, DATEDIFF({{period}}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2567258, "supported_languages": null}, "macro.automate_dv.databricks__get_period_of_load": {"name": "databricks__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.databricks__get_period_of_load", "macro_sql": "{%- macro databricks__get_period_of_load(period, offset, start_timestamp) -%}\n    {% do return(automate_dv.default__get_period_of_load(period=period, offset=offset, start_timestamp=start_timestamp)) %}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__get_period_of_load"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2572012, "supported_languages": null}, "macro.automate_dv.postgres__get_period_of_load": {"name": "postgres__get_period_of_load", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "original_file_path": "macros/materialisations/period_mat_helpers/get_period_of_load.sql", "unique_id": "macro.automate_dv.postgres__get_period_of_load", "macro_sql": "{%- macro postgres__get_period_of_load(period, offset, start_timestamp) -%}\n    {# Postgres uses different DateTime arithmetic #}\n    {% set period_of_load_sql -%}\n        SELECT DATE_TRUNC('{{ period }}', TIMESTAMP '{{ start_timestamp }}' + INTERVAL '{{ offset }} {{ period }}') AS period_of_load\n    {%- endset %}\n\n    {% set period_of_load_dict = automate_dv.get_query_results_as_dict(period_of_load_sql) %}\n\n    {% set period_of_load = period_of_load_dict['PERIOD_OF_LOAD'][0] | string %}\n\n    {% do return(period_of_load) %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2581391, "supported_languages": null}, "macro.automate_dv.replace_placeholder_with_period_filter": {"name": "replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.replace_placeholder_with_period_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) -%}\n\n    {% set macro = adapter.dispatch('replace_placeholder_with_period_filter',\n                                    'automate_dv')(core_sql=core_sql,\n                                                timestamp_field=timestamp_field,\n                                                start_timestamp=start_timestamp,\n                                                stop_timestamp=stop_timestamp,\n                                                offset=offset,\n                                                period=period) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__replace_placeholder_with_period_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2635064, "supported_languages": null}, "macro.automate_dv.default__replace_placeholder_with_period_filter": {"name": "default__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.default__replace_placeholder_with_period_filter", "macro_sql": "{% macro default__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n        (TO_TIMESTAMP({{ timestamp_field }})\n        >= DATE_TRUNC('{{ period }}', TO_TIMESTAMP('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}') AND\n             TO_TIMESTAMP({{ timestamp_field }}) < DATE_TRUNC('{{ period }}', TO_TIMESTAMP('{{ start_timestamp }}') + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}'))\n      AND (TO_TIMESTAMP({{ timestamp_field }}) >= TO_TIMESTAMP('{{ start_timestamp }}'))\n    {%- endset -%}\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.264686, "supported_languages": null}, "macro.automate_dv.bigquery__replace_placeholder_with_period_filter": {"name": "bigquery__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.bigquery__replace_placeholder_with_period_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n    {%- if period is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n        {%- set timestamp_field_type = 'DATE' -%}\n    {%- elif period is in ['millisecond', 'microsecond', 'second', 'minute', 'hour'] -%}\n        {%- set timestamp_field_type = 'TIMESTAMP' -%}\n    {%- else -%}\n        {%- set timestamp_field_type = 'DATE' -%}\n    {%- endif -%}\n\n    {%- set period_filter -%}\n            ({{ timestamp_field_type }}({{ timestamp_field }}) >= DATE_TRUNC({{ timestamp_field_type }}_ADD( {{ timestamp_field_type }}('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), {{ period }} ) AND\n             {{ timestamp_field_type }}({{ timestamp_field }}) < DATE_TRUNC({{ timestamp_field_type }}_ADD(TIMESTAMP_ADD( {{ timestamp_field_type }}('{{ start_timestamp }}'), INTERVAL {{ offset }} {{ period }}), INTERVAL 1 {{ period }}), {{ period }} )\n      AND TIMESTAMP({{ timestamp_field }}) >= TIMESTAMP('{{ start_timestamp }}'))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2669334, "supported_languages": null}, "macro.automate_dv.sqlserver__replace_placeholder_with_period_filter": {"name": "sqlserver__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.sqlserver__replace_placeholder_with_period_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n    {%- if period is in ['microsecond', 'millisecond', 'second'] -%}\n        {{ automate_dv.sqlserver_datepart_too_small_error(period=period) }}\n    {%- endif -%}\n\n    {#  MSSQL cannot CAST datetime2 strings with more than 7 decimal places #}\n    {% set start_timestamp_mssql = start_timestamp[0:27] %}\n    {%- set period_filter -%}\n            (CAST({{ timestamp_field }} AS DATETIME2) >= DATEADD({{ period }}, DATEDIFF({{ period }}, 0, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2))), 0) AND\n             CAST({{ timestamp_field }} AS DATETIME2) < DATEADD({{ period }}, 1, DATEADD({{ period }}, {{ offset }}, CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\n      AND (CAST({{ timestamp_field }} AS DATETIME2) >= CAST('{{ start_timestamp_mssql }}' AS DATETIME2)))\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.sqlserver_datepart_too_small_error"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2686744, "supported_languages": null}, "macro.automate_dv.postgres__replace_placeholder_with_period_filter": {"name": "postgres__replace_placeholder_with_period_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "original_file_path": "macros/materialisations/period_mat_helpers/replace_placeholder_with_period_filter.sql", "unique_id": "macro.automate_dv.postgres__replace_placeholder_with_period_filter", "macro_sql": "{% macro postgres__replace_placeholder_with_period_filter(core_sql, timestamp_field, start_timestamp, stop_timestamp, offset, period) %}\n\n    {%- set period_filter -%}\n        {{ timestamp_field }}::TIMESTAMP >= DATE_TRUNC('{{ period }}', TIMESTAMP '{{ start_timestamp }}' + INTERVAL '{{ offset }} {{ period }}')\n        AND {{ timestamp_field }}::TIMESTAMP < DATE_TRUNC('{{ period }}', TIMESTAMP '{{ start_timestamp }}' + INTERVAL '{{ offset }} {{ period }}' + INTERVAL '1 {{ period }}')\n        AND {{ timestamp_field }}::TIMESTAMP >= TIMESTAMP '{{ start_timestamp }}'\n    {%- endset -%}\n    {%- set filtered_sql = core_sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.269859, "supported_languages": null}, "macro.automate_dv.sqlserver_datepart_too_small_error": {"name": "sqlserver_datepart_too_small_error", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/error_messages.sql", "original_file_path": "macros/materialisations/period_mat_helpers/error_messages.sql", "unique_id": "macro.automate_dv.sqlserver_datepart_too_small_error", "macro_sql": "\n\n{%- macro sqlserver_datepart_too_small_error(period) -%}\n\n    {%- set error_message -%}\n    This datepart ({{ period }}) is too small and cannot be used for this purpose in MS SQL Server, consider using a different datepart value (e.g. day).\n    vault_insert_by materialisations are not intended for this purpose, please see https://automate-dv.readthedocs.io/en/latest/materialisations/\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2706952, "supported_languages": null}, "macro.automate_dv.sqlserver_max_iterations_error": {"name": "sqlserver_max_iterations_error", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/period_mat_helpers/error_messages.sql", "original_file_path": "macros/materialisations/period_mat_helpers/error_messages.sql", "unique_id": "macro.automate_dv.sqlserver_max_iterations_error", "macro_sql": "{%- macro sqlserver_max_iterations_error() -%}\n\n    {%- set error_message -%}\n    Max iterations is 100,000. Consider using a different datepart value (e.g. day) or loading data for a shorter time period.\n    vault_insert_by materialisations are not intended for this purpose, please see https://automate-dv.readthedocs.io/en/latest/materialisations/\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2710664, "supported_languages": null}, "macro.automate_dv.replace_placeholder_with_rank_filter": {"name": "replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.replace_placeholder_with_rank_filter", "macro_sql": "\n\n{%- macro replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) -%}\n\n    {% set macro = adapter.dispatch('replace_placeholder_with_rank_filter',\n                                    'automate_dv')(core_sql=core_sql,\n                                                  rank_column=rank_column,\n                                                  rank_iteration=rank_iteration) %}\n    {% do return(macro) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__replace_placeholder_with_rank_filter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2726793, "supported_languages": null}, "macro.automate_dv.default__replace_placeholder_with_rank_filter": {"name": "default__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.default__replace_placeholder_with_rank_filter", "macro_sql": "{% macro default__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n\n    {%- set rank_filter -%}\n    {{ rank_column }}:: INTEGER = {{ rank_iteration }}::INTEGER\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2733638, "supported_languages": null}, "macro.automate_dv.sqlserver__replace_placeholder_with_rank_filter": {"name": "sqlserver__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.sqlserver__replace_placeholder_with_rank_filter", "macro_sql": "{% macro sqlserver__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n\n    {%- set rank_filter -%}\n        CAST({{ rank_column }} AS INT) = CAST({{ rank_iteration }} AS INT)\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2740328, "supported_languages": null}, "macro.automate_dv.bigquery__replace_placeholder_with_rank_filter": {"name": "bigquery__replace_placeholder_with_rank_filter", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/replace_placeholder_with_rank_filter.sql", "unique_id": "macro.automate_dv.bigquery__replace_placeholder_with_rank_filter", "macro_sql": "{% macro bigquery__replace_placeholder_with_rank_filter(core_sql, rank_column, rank_iteration) %}\n    {%- set rank_filter -%}\n        CAST({{ rank_column }} AS INTEGER) = CAST({{ rank_iteration }} AS INTEGER)\n    {%- endset -%}\n\n    {%- set filtered_sql = core_sql | replace(\"__RANK_FILTER__\", rank_filter) -%}\n\n    {% do return(filtered_sql) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.274706, "supported_languages": null}, "macro.automate_dv.get_min_max_ranks": {"name": "get_min_max_ranks", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/materialisations/rank_mat_helpers/get_min_max_ranks.sql", "original_file_path": "macros/materialisations/rank_mat_helpers/get_min_max_ranks.sql", "unique_id": "macro.automate_dv.get_min_max_ranks", "macro_sql": "{% macro get_min_max_ranks(rank_column, rank_source_models) %}\n\n    {% if rank_source_models is not none %}\n\n        {% if rank_source_models is string %}\n            {% set rank_source_models = [rank_source_models] %}\n        {% endif %}\n\n        {% set query_sql %}\n            WITH stage AS (\n            {% for source_model in rank_source_models %}\n                SELECT {{ rank_column }} FROM {{ ref(source_model) }}\n                {% if not loop.last %} UNION ALL {% endif %}\n            {% endfor %})\n\n            SELECT MIN({{ rank_column }}) AS MIN, MAX({{ rank_column }}) AS MAX\n            FROM stage\n        {% endset %}\n\n        {% set min_max_dict = automate_dv.get_query_results_as_dict(query_sql) %}\n\n        {% set min_rank = min_max_dict['MIN'][0] | string %}\n        {% set max_rank = min_max_dict['MAX'][0] | string %}\n        {% set min_max_ranks = {\"min_rank\": min_rank, \"max_rank\": max_rank} %}\n\n        {% do return(min_max_ranks) %}\n\n    {% else %}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid 'vault_insert_by_rank' configuration. Must provide 'rank_column', and 'rank_source_models' options.\") }}\n        {%- endif -%}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.27803, "supported_languages": null}, "macro.automate_dv.prepend_generated_by": {"name": "prepend_generated_by", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/prepend_generated_by.sql", "original_file_path": "macros/internal/helpers/prepend_generated_by.sql", "unique_id": "macro.automate_dv.prepend_generated_by", "macro_sql": "\n\n{%- macro prepend_generated_by() -%}\n-- Generated by AutomateDV (formerly known as dbtvault)\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2782927, "supported_languages": null}, "macro.automate_dv.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/timestamp_add.sql", "original_file_path": "macros/internal/helpers/timestamp_add.sql", "unique_id": "macro.automate_dv.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_date_or_timestamp) %}\n    {{ return(adapter.dispatch('timestamp_add', 'automate_dv')(datepart=datepart, interval=interval,\n                                                               from_date_or_timestamp=from_date_or_timestamp)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2803457, "supported_languages": null}, "macro.automate_dv.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/timestamp_add.sql", "original_file_path": "macros/internal/helpers/timestamp_add.sql", "unique_id": "macro.automate_dv.default__timestamp_add", "macro_sql": "{%- macro default__timestamp_add(datepart, interval, from_date_or_timestamp) -%}\n\n    {%- if datepart is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n        {{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }}\n    {%- elif datepart == 'microsecond' -%}\n        {{ automate_dv.dateadd('microsecond', 1, from_date_or_timestamp) }}\n    {%- elif datepart == 'millisecond' -%}\n        {{ automate_dv.dateadd('microsecond', 999, from_date_or_timestamp) }}\n    {%- elif datepart == 'second' -%}\n        {{ automate_dv.dateadd('millisecond', 999, from_date_or_timestamp) }}\n    {%- elif datepart == 'minute' -%}\n        {{ automate_dv.dateadd('millisecond', 5999, from_date_or_timestamp) }}\n    {%- elif datepart == 'hour' -%}\n        {{ automate_dv.dateadd('millisecond', 3599999, from_date_or_timestamp) }}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2822666, "supported_languages": null}, "macro.automate_dv.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/timestamp_add.sql", "original_file_path": "macros/internal/helpers/timestamp_add.sql", "unique_id": "macro.automate_dv.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_date_or_timestamp) %}\n\n{%- if datepart is in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    {{ automate_dv.dateadd('millisecond', 86399999, from_date_or_timestamp) }}\n{%- elif datepart == 'microsecond' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 1 microsecond)\n{%- elif datepart == 'millisecond' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 999 microsecond)\n{%- elif datepart == 'second' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 999 millisecond)\n{%- elif datepart == 'minute' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 5999 millisecond)\n{%- elif datepart == 'hour' -%}\n    TIMESTAMP_ADD(CAST( {{from_date_or_timestamp}} AS TIMESTAMP), INTERVAL 3599999 millisecond)\n{%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2836602, "supported_languages": null}, "macro.automate_dv.is_list": {"name": "is_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_list", "macro_sql": "\n\n{%- macro is_list(obj, empty_is_false=false) -%}\n\n    {%- if obj is iterable and obj is not string and obj is not mapping -%}\n        {%- if obj is none and obj is undefined and not obj and empty_is_false -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2856605, "supported_languages": null}, "macro.automate_dv.is_nothing": {"name": "is_nothing", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_nothing", "macro_sql": "{%- macro is_nothing(obj) -%}\n\n    {%- if obj is none or obj is undefined or not obj or automate_dv.is_list(obj, empty_is_false=true) -%}\n        {%- do return(true) -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2863646, "supported_languages": null}, "macro.automate_dv.is_something": {"name": "is_something", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_something", "macro_sql": "{%- macro is_something(obj) -%}\n\n    {%- if obj is not none and obj is defined and obj -%}\n        {#- if an empty list, do not consider the object something -#}\n        {% if automate_dv.is_list(empty_is_false=true) %}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2872002, "supported_languages": null}, "macro.automate_dv.is_expression": {"name": "is_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/is_checks.sql", "original_file_path": "macros/internal/helpers/is_checks.sql", "unique_id": "macro.automate_dv.is_expression", "macro_sql": "{%- macro is_expression(obj) -%}\n\n    {%- if obj is string -%}\n        {%- if (obj | first == \"'\" and obj | last == \"'\") or (\"(\" in obj and \")\" in obj) or \"::\" in obj -%}\n            {%- do return(true) -%}\n        {%- else -%}\n            {%- do return(false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do return(false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2882574, "supported_languages": null}, "macro.automate_dv.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.automate_dv.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n    {{ return(adapter.dispatch('dateadd', 'automate_dv')(datepart=datepart,\n                                                     interval=interval,\n                                                     from_date_or_timestamp=from_date_or_timestamp)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.289187, "supported_languages": null}, "macro.automate_dv.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.automate_dv.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ dateadd(datepart, interval, from_date_or_timestamp) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2895572, "supported_languages": null}, "macro.automate_dv.sqlserver__dateadd": {"name": "sqlserver__dateadd", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/dateadd.sql", "original_file_path": "macros/internal/helpers/dateadd.sql", "unique_id": "macro.automate_dv.sqlserver__dateadd", "macro_sql": "{% macro sqlserver__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        CAST({{ from_date_or_timestamp }} AS DATETIME2)\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2899048, "supported_languages": null}, "macro.automate_dv.extract_column_names": {"name": "extract_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/extract_column_names.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/extract_column_names.sql", "unique_id": "macro.automate_dv.extract_column_names", "macro_sql": "\n\n{%- macro extract_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- do extracted_column_names.append(key) -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.291012, "supported_languages": null}, "macro.automate_dv.process_hash_column_excludes": {"name": "process_hash_column_excludes", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/process_hash_column_excludes.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_hash_column_excludes.sql", "unique_id": "macro.automate_dv.process_hash_column_excludes", "macro_sql": "\n\n{%- macro process_hash_column_excludes(hash_columns=none, source_columns=none) -%}\n\n    {%- set processed_hash_columns = {} -%}\n\n    {%- for col, col_mapping in hash_columns.items() -%}\n\n        {%- if col_mapping is mapping -%}\n            {%- if col_mapping.exclude_columns -%}\n\n                {%- if col_mapping.columns -%}\n\n                    {%- set columns_to_hash = automate_dv.process_columns_to_select(source_columns, col_mapping.columns) -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': columns_to_hash}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- else -%}\n\n                    {%- do hash_columns[col].pop('exclude_columns') -%}\n                    {%- do hash_columns[col].update({'columns': source_columns}) -%}\n\n                    {%- do processed_hash_columns.update({col: hash_columns[col]}) -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- do processed_hash_columns.update({col: col_mapping}) -%}\n            {%- endif -%}\n        {%- else -%}\n            {%- do processed_hash_columns.update({col: col_mapping}) -%}\n        {%- endif -%}\n\n    {%- endfor -%}\n\n    {%- do return(processed_hash_columns) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.process_columns_to_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.294423, "supported_languages": null}, "macro.automate_dv.process_columns_to_escape": {"name": "process_columns_to_escape", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/process_columns_to_escape.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_columns_to_escape.sql", "unique_id": "macro.automate_dv.process_columns_to_escape", "macro_sql": "\n\n{%- macro process_columns_to_escape(derived_columns_list=none) -%}\n\n    {%- if derived_columns_list -%}\n\n        {%- set ns = namespace(columns_to_escape=[]) -%}\n        {%- set escape_char_left, escape_char_right = automate_dv.get_escape_characters() -%}\n        {%- set quote_pattern = '\\{}([a-zA-Z\\s]+)\\{}'.format(escape_char_left, escape_char_right) -%}\n        {%- set re = modules.re -%}\n\n        {%- for col_name, col_def in derived_columns_list.items() -%}\n\n            {%- if col_def is mapping -%}\n                {%- if col_def['escape'] == true -%}\n                    {%- if automate_dv.is_list(col_def['source_column']) -%}\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + col_def['source_column'] -%}\n                    {%- else -%}\n                        {%- set ns.columns_to_escape = ns.columns_to_escape + [col_def['source_column']] -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- elif col_def is string -%}\n\n                {#- Find a quoted string in the column definition so that we can escape it everywhere else -#}\n                {% set is_match = re.findall(quote_pattern, col_def, re.IGNORECASE) %}\n\n                {%- if is_match -%}\n                    {%- set ns.columns_to_escape = ns.columns_to_escape + is_match -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(ns.columns_to_escape | unique | list) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_escape_characters", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2979236, "supported_languages": null}, "macro.automate_dv.print_list": {"name": "print_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/print_list.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/print_list.sql", "unique_id": "macro.automate_dv.print_list", "macro_sql": "\n\n{%- macro print_list(list_to_print=none, indent=4, columns_to_escape=none) -%}\n\n    {%- for col_name in list_to_print -%}\n        {%- if col_name | lower in columns_to_escape | map('lower') | list -%}\n            {{- automate_dv.escape_column_name(col_name) | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\n        {%- else -%}\n            {{- col_name | indent(indent) -}}{{ \",\\n    \" if not loop.last }}\n        {%- endif -%}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.2993557, "supported_languages": null}, "macro.automate_dv.process_columns_to_select": {"name": "process_columns_to_select", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/process_columns_to_select.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/process_columns_to_select.sql", "unique_id": "macro.automate_dv.process_columns_to_select", "macro_sql": "\n\n{%- macro process_columns_to_select(columns_list=none, exclude_columns_list=none) -%}\n\n    {% set columns_list = columns_list | list %}\n    {% set exclude_columns_list = exclude_columns_list | list %}\n\n    {% set columns_to_select = [] %}\n\n    {% if not automate_dv.is_list(columns_list) or not automate_dv.is_list(exclude_columns_list)  %}\n\n        {{- exceptions.raise_compiler_error(\"One or both arguments are not of list type.\") -}}\n\n    {%- endif -%}\n\n    {%- if automate_dv.is_something(columns_list) and automate_dv.is_something(exclude_columns_list) -%}\n\n        {%- for col in columns_list -%}\n\n            {%- if (col | upper) not in (exclude_columns_list | map('upper') | list) -%}\n                {%- do columns_to_select.append(col) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {%- do return(columns_to_select) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3015423, "supported_languages": null}, "macro.automate_dv.extract_null_column_names": {"name": "extract_null_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/stage_processing_macros/extract_null_column_names.sql", "original_file_path": "macros/internal/helpers/stage_processing_macros/extract_null_column_names.sql", "unique_id": "macro.automate_dv.extract_null_column_names", "macro_sql": "\n\n{%- macro extract_null_column_names(columns_dict=none) -%}\n\n    {%- set extracted_column_names = [] -%}\n\n    {%- if columns_dict is mapping -%}\n        {%- for key, value in columns_dict.items() -%}\n            {%- if automate_dv.is_something(value) -%}\n                {% if automate_dv.is_list(value) %}\n                    {% for col_name in value %}\n                        {%- do extracted_column_names.append(col_name) -%}\n                        {%- do extracted_column_names.append(col_name ~ \"_ORIGINAL\") -%}\n                    {% endfor %}\n                {%  else %}\n                    {%- do extracted_column_names.append(value) -%}\n                    {%- do extracted_column_names.append(value ~ \"_ORIGINAL\") -%}\n                {% endif %}\n            {%- endif -%}\n        {%- endfor -%}\n\n        {%- do return(extracted_column_names) -%}\n    {%- else -%}\n        {%- do return([]) -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3038607, "supported_languages": null}, "macro.automate_dv.log_relation_sources": {"name": "log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.automate_dv.log_relation_sources", "macro_sql": "{% macro log_relation_sources(relation, source_count) %}\n    {{ return(adapter.dispatch('log_relation_sources', 'automate_dv')(relation=relation, source_count=source_count)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__log_relation_sources"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.304949, "supported_languages": null}, "macro.automate_dv.default__log_relation_sources": {"name": "default__log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.automate_dv.default__log_relation_sources", "macro_sql": "{% macro default__log_relation_sources(relation, source_count) %}\n\n    {%- if 'docs' not in invocation_args_dict['rpc_method'] and execute -%}\n\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}.{}\".format(relation.database, relation.schema, relation.identifier),\n                                                                        source_count)) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.305678, "supported_languages": null}, "macro.automate_dv.databricks__log_relation_sources": {"name": "databricks__log_relation_sources", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/helpers/logging/log_relation_sources.sql", "original_file_path": "macros/internal/helpers/logging/log_relation_sources.sql", "unique_id": "macro.automate_dv.databricks__log_relation_sources", "macro_sql": "{% macro databricks__log_relation_sources(relation, source_count) %}\n\n    {%- if 'docs' not in invocation_args_dict['rpc_method'] and execute -%}\n\n        {%- do dbt_utils.log_info('Loading {} from {} source(s)'.format(\"{}.{}\".format(relation.schema, relation.identifier),\n                                                                        source_count)) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.306364, "supported_languages": null}, "macro.automate_dv.check_required_parameters": {"name": "check_required_parameters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/check_required_parameters.sql", "original_file_path": "macros/internal/metadata_processing/check_required_parameters.sql", "unique_id": "macro.automate_dv.check_required_parameters", "macro_sql": "\n\n{%- macro check_required_parameters() -%}\n\n    {%- set ns = namespace(missing_parameters=[]) -%}\n\n    {%- if kwargs is not none -%}\n\n        {%- for k, v in kwargs.items() %}\n            {%- do ns.missing_parameters.append(k) if v is none -%}\n        {%- endfor -%}\n\n        {%- if ns.missing_parameters -%}\n            {{- exceptions.raise_compiler_error(\"Required parameter(s) missing or none in '{}': {}\".format(this, ns.missing_parameters | join(\", \"))) -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3077335, "supported_languages": null}, "macro.automate_dv.alias_all": {"name": "alias_all", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.automate_dv.alias_all", "macro_sql": "\n\n{%- macro alias_all(columns=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias_all', 'automate_dv')(columns=columns, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.309111, "supported_languages": null}, "macro.automate_dv.default__alias_all": {"name": "default__alias_all", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias_all.sql", "original_file_path": "macros/internal/metadata_processing/alias_all.sql", "unique_id": "macro.automate_dv.default__alias_all", "macro_sql": "\n\n{%- macro default__alias_all(columns, prefix) -%}\n\n{%- if automate_dv.is_list(columns) -%}\n\n    {%- set processed_columns = [] -%}\n\n    {%- for col in columns -%}\n        {%- if col | lower not in processed_columns | map('lower') | list -%}\n\n            {{ automate_dv.alias(alias_config=col, prefix=prefix) }}\n            {%- if not loop.last -%} , {% endif -%}\n\n            {%- if col is mapping -%}\n                {%- if col['source_column'] | lower and col['alias'] | lower -%}\n                    {%- do processed_columns.append(col['source_column']) -%}\n                {% endif -%}\n            {%- else -%}\n                {%- do processed_columns.append(col) -%}\n            {% endif -%}\n        {% endif -%}\n    {%- endfor -%}\n\n{%- elif columns is string -%}\n\n{{ automate_dv.alias(alias_config=columns, prefix=prefix) }}\n\n{%- else -%}\n\n    {%- if execute -%}\n        {{ exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list or a string.\") }}\n    {%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3111885, "supported_languages": null}, "macro.automate_dv.as_constant": {"name": "as_constant", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.automate_dv.as_constant", "macro_sql": "\n\n{%- macro as_constant(column_str=none) -%}\n\n    {{- adapter.dispatch('as_constant', 'automate_dv')(column_str=column_str) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__as_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.312011, "supported_languages": null}, "macro.automate_dv.default__as_constant": {"name": "default__as_constant", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/as_constant.sql", "original_file_path": "macros/internal/metadata_processing/as_constant.sql", "unique_id": "macro.automate_dv.default__as_constant", "macro_sql": "\n\n{%- macro default__as_constant(column_str) -%}\n\n    {%- if column_str is not none and column_str is string and column_str -%}\n\n        {%- if column_str | first == \"!\" -%}\n\n            {{- return(\"'\" ~ column_str[1:] ~ \"'\") -}}\n\n        {%- else -%}\n\n            {{- return(column_str) -}}\n\n        {%- endif -%}\n    {%- else -%}\n        {%- if execute -%}\n            {{ exceptions.raise_compiler_error(\"Invalid columns_str object provided. Must be a string and not null.\") }}\n        {%- endif %}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3130217, "supported_languages": null}, "macro.automate_dv.alias": {"name": "alias", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.automate_dv.alias", "macro_sql": "\n\n{%- macro alias(alias_config=none, prefix=none) -%}\n\n    {{- adapter.dispatch('alias', 'automate_dv')(alias_config=alias_config, prefix=prefix) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__alias"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3144476, "supported_languages": null}, "macro.automate_dv.default__alias": {"name": "default__alias", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/alias.sql", "original_file_path": "macros/internal/metadata_processing/alias.sql", "unique_id": "macro.automate_dv.default__alias", "macro_sql": "\n\n{%- macro default__alias(alias_config=none, prefix=none) -%}\n\n{%- if alias_config is defined and alias_config is not none and alias_config -%}\n\n    {%- if alias_config is mapping -%}\n\n        {%- if alias_config['source_column'] and alias_config['alias'] -%}\n\n            {%- if prefix -%}\n                {{prefix}}.{{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- else -%}\n                {{ alias_config['source_column'] }} AS {{ alias_config['alias'] }}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- else -%}\n\n        {%- if prefix -%}\n\n        {{- automate_dv.prefix([alias_config], prefix) -}}\n\n        {%- else -%}\n\n        {{ alias_config }}\n\n        {%- endif -%}\n\n    {%- endif -%}\n\n{%- else -%}\n\n    {%- if execute -%}\n\n        {{ exceptions.raise_compiler_error(\"Invalid alias configuration:\\nexpected format: {source_column: 'column', alias: 'column_alias'}\\ngot: \" ~ alias_config) }}\n\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3163064, "supported_languages": null}, "macro.automate_dv.multikey": {"name": "multikey", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.automate_dv.multikey", "macro_sql": "\n\n{%- macro multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {{- adapter.dispatch('multikey', 'automate_dv')(columns=columns, prefix=prefix, condition=condition, operator=operator) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3183265, "supported_languages": null}, "macro.automate_dv.default__multikey": {"name": "default__multikey", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/multikey.sql", "original_file_path": "macros/internal/metadata_processing/multikey.sql", "unique_id": "macro.automate_dv.default__multikey", "macro_sql": "\n\n{%- macro default__multikey(columns, prefix=none, condition=none, operator='AND') -%}\n\n    {%- if prefix is string -%}\n        {%- set prefix = [prefix] -%}\n    {%- endif -%}\n\n    {%- if columns is string -%}\n        {%- set columns = [columns] -%}\n    {%- endif -%}\n\n    {%- if condition in ['<>', '!=', '='] -%}\n        {%- for col in columns -%}\n            {%- if prefix -%}\n                {{- automate_dv.prefix([col], prefix[0], alias_target='target') }} {{ condition }} {{ automate_dv.prefix([col], prefix[1]) -}}\n            {%- endif %}\n            {%- if not loop.last %} {{ operator }} {% endif -%}\n        {% endfor -%}\n    {%- else -%}\n        {%- if automate_dv.is_list(columns) -%}\n            {%- for col in columns -%}\n                {{ (prefix[0] ~ '.') if prefix }}{{ col }} {{ condition if condition else '' }}\n                {%- if not loop.last -%} {{ \"\\n    \" ~ operator }} {% endif -%}\n            {%- endfor -%}\n        {%- else -%}\n            {{ prefix[0] ~ '.' if prefix }}{{ columns }} {{ condition if condition else '' }}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.321231, "supported_languages": null}, "macro.automate_dv.process_payload_column_excludes": {"name": "process_payload_column_excludes", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/process_payload_column_excludes.sql", "original_file_path": "macros/internal/metadata_processing/process_payload_column_excludes.sql", "unique_id": "macro.automate_dv.process_payload_column_excludes", "macro_sql": "\n\n{%- macro process_payload_column_excludes(src_pk, src_hashdiff, src_payload, src_extra_columns,\n                                          src_eff, src_ldts, src_source, source_model) -%}\n\n    {%- if src_payload is not mapping -%}\n        {%- do return(src_payload) -%}\n    {%- endif -%}\n\n    {%- set source_model_cols = adapter.get_columns_in_relation(ref(source_model)) -%}\n    {%- set columns_in_metadata = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff,\n                                                                       src_payload, src_extra_columns,\n                                                                       src_eff, src_ldts, src_source]) | map('lower') | list -%}\n\n    {%- set payload_cols = [] -%}\n    {%- for col in source_model_cols -%}\n        {%- if col.column | lower not in columns_in_metadata -%}\n            {%- do payload_cols.append(col.column) -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- if 'exclude_columns' in src_payload.keys() -%}\n        {%- set table_excludes_columns = src_payload.exclude_columns -%}\n\n        {%- if table_excludes_columns -%}\n\n            {%- set excluded_payload = [] -%}\n            {%- set exclude_columns_list = src_payload.columns | map('lower') | list -%}\n\n            {%- for col in payload_cols -%}\n               {%- if col | lower not in exclude_columns_list -%}\n                   {%- do excluded_payload.append(col) -%}\n               {%- endif -%}\n            {%- endfor -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {%- do return(excluded_payload) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3249345, "supported_languages": null}, "macro.automate_dv.concat_ws": {"name": "concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.concat_ws", "macro_sql": "\n\n{%- macro concat_ws(string_list, separator=\"||\") -%}\n\n    {{- adapter.dispatch('concat_ws', 'automate_dv')(string_list=string_list, separator=separator) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3259413, "supported_languages": null}, "macro.automate_dv.default__concat_ws": {"name": "default__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.default__concat_ws", "macro_sql": "\n\n{%- macro default__concat_ws(string_list, separator=\"||\") -%}\n\nCONCAT(\n{%- for str in string_list %}\n    {{ str }}\n{%- if not loop.last %}, '{{ separator }}', {%- endif -%}\n{%- endfor %}\n)\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3265264, "supported_languages": null}, "macro.automate_dv.bigquery__concat_ws": {"name": "bigquery__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.bigquery__concat_ws", "macro_sql": "{%- macro bigquery__concat_ws(string_list, separator=\"||\") -%}\n\n    {{ automate_dv.default__concat_ws(string_list=string_list, separator=separator) }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.326905, "supported_languages": null}, "macro.automate_dv.sqlserver__concat_ws": {"name": "sqlserver__concat_ws", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/concat_ws.sql", "original_file_path": "macros/internal/metadata_processing/concat_ws.sql", "unique_id": "macro.automate_dv.sqlserver__concat_ws", "macro_sql": "{%- macro sqlserver__concat_ws(string_list, separator=\"||\") -%}\n\n    {{ automate_dv.default__concat_ws(string_list=string_list, separator=separator) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3272798, "supported_languages": null}, "macro.automate_dv.escape_column_names": {"name": "escape_column_names", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/escape_column_names.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_names.sql", "unique_id": "macro.automate_dv.escape_column_names", "macro_sql": "\n\n{%- macro escape_column_names(columns=none) -%}\n\n    {%- if automate_dv.is_list(columns) -%}\n        {%- set columns = automate_dv.expand_column_list(columns) -%}\n    {%- endif -%}\n\n    {%- if automate_dv.is_something(columns) -%}\n\n        {%- set col_string = '' -%}\n        {%- set col_list = [] -%}\n        {%- set col_mapping = {} -%}\n\n        {%- if columns is string -%}\n\n            {%- set col_string = automate_dv.escape_column_name(columns) -%}\n\n        {%- elif automate_dv.is_list(columns) -%}\n\n            {%- for col in columns -%}\n\n                {%- if col is string -%}\n\n                    {%- set escaped_col = automate_dv.escape_column_name(col) -%}\n\n                    {%- do col_list.append(escaped_col) -%}\n\n                {%- else -%}\n\n                    {%- if execute -%}\n                        {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string.\") -}}\n                    {%- endif -%}\n\n                {%- endif -%}\n\n            {%- endfor -%}\n\n        {%- elif columns is mapping -%}\n\n            {%- if columns['source_column'] and columns['alias'] -%}\n\n                {%- set escaped_source_col = automate_dv.escape_column_name(columns['source_column']) -%}\n                {%- set escaped_alias_col = automate_dv.escape_column_name(columns['alias']) -%}\n                {%- set col_mapping = {\"source_column\": escaped_source_col, \"alias\": escaped_alias_col} -%}\n\n            {%- else -%}\n\n                {%- if execute -%}\n                    {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n                {%- endif %}\n\n            {%- endif -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid column name(s) provided. Must be a string, a list of strings, or a dictionary of hashdiff metadata.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- elif columns == '' -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Expected a column name or a list of column names, got an empty string\") -}}\n        {%- endif -%}\n\n    {%- endif -%}\n\n    {%- if columns is none -%}\n\n        {%- do return(none) -%}\n\n    {%- elif columns == [] -%}\n\n        {%- do return([]) -%}\n\n    {%- elif columns == {} -%}\n\n        {%- do return({}) -%}\n\n    {%- elif columns is string -%}\n\n        {%- do return(col_string) -%}\n\n    {%- elif automate_dv.is_list(columns) -%}\n\n        {%- do return(col_list) -%}\n\n    {%- elif columns is mapping -%}\n\n        {%- do return(col_mapping) -%}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list", "macro.automate_dv.expand_column_list", "macro.automate_dv.is_something", "macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.335276, "supported_languages": null}, "macro.automate_dv.get_escape_characters": {"name": "get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.get_escape_characters", "macro_sql": "{% macro get_escape_characters() -%}\n\n    {%- set default_escape_char_left, default_escape_char_right = adapter.dispatch('get_escape_characters', 'automate_dv')() -%}\n\n    {%- if ((var('escape_char_left', default_escape_char_left) == '') and (var('escape_char_right', default_escape_char_right) == '')) -%}\n        {%- set warning_message = 'Invalid escape_char_left and escape_char_right value provided. ' +\n                                  'Using platform defaults ({}{})'.format(default_escape_char_left, default_escape_char_right) -%}\n        {%- set escape_chars = (default_escape_char_left, default_escape_char_right) -%}\n\n    {%- elif var('escape_char_left', default_escape_char_left) == '' -%}\n        {%- set warning_message = 'Invalid escape_char_left value provided. Using platform default ({})'.format(default_escape_char_left) -%}\n        {%- set escape_chars = (default_escape_char_left, var('escape_char_right', default_escape_char_right)) -%}\n\n    {%- elif var('escape_char_right', default_escape_char_right) == '' -%}\n        {%- set warning_message = 'Invalid escape_char_right value provided. Using platform default ({})'.format(default_escape_char_right) -%}\n        {%- set escape_chars = (var('escape_char_left', default_escape_char_left), default_escape_char_right) -%}\n\n    {%- else -%}\n       {%- set escape_chars = (var('escape_char_left', default_escape_char_left), var('escape_char_right', default_escape_char_right)) -%}\n    {%- endif -%}\n\n    {%- if execute and warning_message -%}\n        {%- do exceptions.warn(warning_message) -%}\n    {%- endif -%}\n\n    {%- do return(escape_chars) -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3394132, "supported_languages": null}, "macro.automate_dv.snowflake__get_escape_characters": {"name": "snowflake__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.snowflake__get_escape_characters", "macro_sql": "\n\n{%- macro snowflake__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3397975, "supported_languages": null}, "macro.automate_dv.bigquery__get_escape_characters": {"name": "bigquery__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.bigquery__get_escape_characters", "macro_sql": "\n\n{%- macro bigquery__get_escape_characters() %}\n    {%- do return (('`', '`')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.340113, "supported_languages": null}, "macro.automate_dv.sqlserver__get_escape_characters": {"name": "sqlserver__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.sqlserver__get_escape_characters", "macro_sql": "\n\n{%- macro sqlserver__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3404317, "supported_languages": null}, "macro.automate_dv.databricks__get_escape_characters": {"name": "databricks__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.databricks__get_escape_characters", "macro_sql": "\n\n{%- macro databricks__get_escape_characters() %}\n    {%- do return (('`', '`')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3407362, "supported_languages": null}, "macro.automate_dv.postgres__get_escape_characters": {"name": "postgres__get_escape_characters", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/get_escape_characters.sql", "original_file_path": "macros/internal/metadata_processing/get_escape_characters.sql", "unique_id": "macro.automate_dv.postgres__get_escape_characters", "macro_sql": "\n\n{%- macro postgres__get_escape_characters() %}\n    {%- do return (('\"', '\"')) -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.34104, "supported_languages": null}, "macro.automate_dv.expand_column_list": {"name": "expand_column_list", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/expand_column_list.sql", "original_file_path": "macros/internal/metadata_processing/expand_column_list.sql", "unique_id": "macro.automate_dv.expand_column_list", "macro_sql": "\n\n{%- macro expand_column_list(columns=none) -%}\n\n{%- if not columns -%}\n    {%- do return([]) -%}\n{%- endif -%}\n\n{%- set col_list = [] -%}\n\n{%- if automate_dv.is_list(columns) -%}\n\n    {%- set columns = columns | reject(\"none\") %}\n\n    {%- for col in columns -%}\n\n        {%- if col is string -%}\n\n            {%- do col_list.append(col) -%}\n\n        {#- If list of lists -#}\n        {%- elif automate_dv.is_list(col) -%}\n\n            {%- for cols in col -%}\n\n                {%- do col_list.append(cols) -%}\n\n            {%- endfor -%}\n        {%- elif col is mapping -%}\n\n            {%- do col_list.append(col) -%}\n\n        {%- else -%}\n\n            {%- if execute -%}\n                {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list of lists, dictionaries or strings.\") -}}\n            {%- endif %}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n{%- else -%}\n\n    {%- if execute -%}\n        {{- exceptions.raise_compiler_error(\"Invalid columns object provided. Must be a list.\") -}}\n    {%- endif %}\n\n{%- endif -%}\n\n{%- do return(col_list) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3439662, "supported_languages": null}, "macro.automate_dv.escape_column_name": {"name": "escape_column_name", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/escape_column_name.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_name.sql", "unique_id": "macro.automate_dv.escape_column_name", "macro_sql": "\n\n{%- macro escape_column_name(column) -%}\n\n    {{- adapter.dispatch('escape_column_name', 'automate_dv')(column=column) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3447757, "supported_languages": null}, "macro.automate_dv.default__escape_column_name": {"name": "default__escape_column_name", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/internal/metadata_processing/escape_column_name.sql", "original_file_path": "macros/internal/metadata_processing/escape_column_name.sql", "unique_id": "macro.automate_dv.default__escape_column_name", "macro_sql": "\n\n{%- macro default__escape_column_name(column) -%}\n\n    {# Do not escape a constant (single quoted) value #}\n    {%- if column | first == \"'\" and column | last == \"'\" -%}\n        {%- set escaped_column_name = column -%}\n    {%- else -%}\n        {%- set escape_char_left, escape_char_right = automate_dv.get_escape_characters() -%}\n\n        {%- set escaped_column_name = escape_char_left ~ column | replace(escape_char_left, '') | replace(escape_char_right, '') | trim ~ escape_char_right -%}\n    {%- endif -%}\n\n    {%- do return(escaped_column_name) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.get_escape_characters"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.345868, "supported_languages": null}, "macro.automate_dv.postgres__bridge": {"name": "postgres__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/bridge.sql", "original_file_path": "macros/tables/postgres/bridge.sql", "unique_id": "macro.automate_dv.postgres__bridge", "macro_sql": "\n\n{%- macro postgres__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                                as_of_dates_table=as_of_dates_table,\n                                bridge_walk=bridge_walk,\n                                stage_tables_ldts=stage_tables_ldts,\n                                src_extra_columns=src_extra_columns,\n                                src_ldts=src_ldts,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3467777, "supported_languages": null}, "macro.automate_dv.postgres__xts": {"name": "postgres__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/xts.sql", "original_file_path": "macros/tables/postgres/xts.sql", "unique_id": "macro.automate_dv.postgres__xts", "macro_sql": "\n\n{%- macro postgres__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.347557, "supported_languages": null}, "macro.automate_dv.postgres__ma_sat": {"name": "postgres__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/ma_sat.sql", "original_file_path": "macros/tables/postgres/ma_sat.sql", "unique_id": "macro.automate_dv.postgres__ma_sat", "macro_sql": "\n\n{%- macro postgres__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.sqlserver__ma_sat(src_pk=src_pk, src_cdk=src_cdk,\n                                  src_hashdiff=src_hashdiff, src_payload=src_payload,\n                                  src_extra_columns=src_extra_columns, src_eff=src_eff,\n                                  src_ldts=src_ldts, src_source=src_source,\n                                  source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.sqlserver__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3486235, "supported_languages": null}, "macro.automate_dv.postgres__t_link": {"name": "postgres__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/t_link.sql", "original_file_path": "macros/tables/postgres/t_link.sql", "unique_id": "macro.automate_dv.postgres__t_link", "macro_sql": "\n\n{%- macro postgres__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3497639, "supported_languages": null}, "macro.automate_dv.postgres__ref_table": {"name": "postgres__ref_table", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/ref_table.sql", "original_file_path": "macros/tables/postgres/ref_table.sql", "unique_id": "macro.automate_dv.postgres__ref_table", "macro_sql": "\n\n{%- macro postgres__ref_table(src_pk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__ref_table(src_pk=src_pk,\n                                   src_extra_columns=src_extra_columns,\n                                   src_ldts=src_ldts,\n                                   src_source=src_source,\n                                   source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__ref_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3505104, "supported_languages": null}, "macro.automate_dv.postgres__hub": {"name": "postgres__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/hub.sql", "original_file_path": "macros/tables/postgres/hub.sql", "unique_id": "macro.automate_dv.postgres__hub", "macro_sql": "\n\n{%- macro postgres__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\n-#}\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'rr') }}) {{ automate_dv.prefix(source_cols_with_rank, 'rr') }}\n    {%- else %}\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'rr') }}) {{ automate_dv.prefix(source_cols, 'rr') }}\n    {%- endif %}\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    ORDER BY {{ automate_dv.prefix([src_pk], 'rr') }}, {{ automate_dv.prefix([src_ldts], 'rr') }}\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if source_model | length > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n{%- if source_model | length > 1 %}\n\nrow_rank_union AS (\n{#- PostgreSQL has DISTINCT ON which should be more performant than the\n    strategy used by Snowflake ROW_NUMBER() OVER( PARTITION BY ...\n-#}\n    SELECT DISTINCT ON ({{ automate_dv.prefix([src_pk], 'ru') }}) ru.*\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    ORDER BY {{ automate_dv.prefix([src_pk], 'ru') }}, {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3617022, "supported_languages": null}, "macro.automate_dv.postgres__sat": {"name": "postgres__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/sat.sql", "original_file_path": "macros/tables/postgres/sat.sql", "unique_id": "macro.automate_dv.postgres__sat", "macro_sql": "\n\n{%- macro postgres__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set apply_source_filter = config.get('apply_source_filter', false) -%}\n{%- set enable_ghost_record = var('enable_ghost_records', false) %}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set window_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set pk_cols = automate_dv.expand_column_list(columns=[src_pk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'a', alias_target='source') }}\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ automate_dv.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {% endif %}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'b', alias_target='target') }}\n    FROM (\n        SELECT {{ automate_dv.prefix(source_cols, 'current_records', alias_target='target') }},\n            RANK() OVER (\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'current_records') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'current_records') }} DESC\n            ) AS rank\n        FROM {{ this }} AS current_records\n            JOIN (\n                SELECT DISTINCT {{ automate_dv.prefix([src_pk], 'source_data') }}\n                FROM source_data\n            ) AS source_records\n                ON {{ automate_dv.multikey(src_pk, prefix=['source_records','current_records'], condition='=') }}\n    ) AS b\n    WHERE b.rank = 1\n),\n\n{%- if apply_source_filter %}\n\nvalid_stg AS (\n    SELECT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    FROM source_data AS s\n    LEFT JOIN latest_records AS sat\n    ON {{ automate_dv.multikey(src_pk, prefix=['s', 'sat'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='sat', condition='IS NULL') }}\n    OR {{ automate_dv.prefix([src_ldts], 's') }} > (\n        SELECT MAX({{ src_ldts }}) FROM latest_records AS sat\n        WHERE {{ automate_dv.multikey(src_pk, prefix=['sat','s'], condition='=') }}\n    )\n),\n{%- endif %}\n\n{%- endif %}\n\nfirst_record_in_set AS (\n    SELECT * FROM (\n        SELECT\n        {{ automate_dv.prefix(source_cols, 'sd', alias_target='source') }},\n        RANK() OVER (\n                PARTITION BY {{ automate_dv.prefix([src_pk], 'sd', alias_target='source') }}\n                ORDER BY {{ automate_dv.prefix([src_ldts], 'sd', alias_target='source') }} ASC\n            ) as asc_rank\n        {%- if automate_dv.is_any_incremental() and apply_source_filter %}\n        FROM valid_stg as sd\n        {%- else %}\n        FROM source_data as sd\n        {%- endif %}\n    ) AS rin\n    WHERE rin.asc_rank = 1\n),\n\nunique_source_records AS (\n    SELECT\n        {{ automate_dv.prefix(source_cols, 'b', alias_target='source') }}\n    FROM (\n        SELECT DISTINCT\n            {{ automate_dv.prefix(source_cols, 'sd', alias_target='source') }},\n            LAG({{ automate_dv.prefix([src_hashdiff], 'sd', alias_target='source') }}) OVER (\n                PARTITION BY {{ automate_dv.prefix([src_pk], 'sd', alias_target='source') }}\n                ORDER BY {{ automate_dv.prefix([src_ldts], 'sd', alias_target='source') }} ASC) as prev_hashdiff\n        {%- if automate_dv.is_any_incremental() and apply_source_filter %}\n        FROM valid_stg as sd\n        {%- else %}\n        FROM source_data as sd\n        {%- endif %}\n        ) AS b\n    WHERE {{ automate_dv.prefix([src_hashdiff], 'b', alias_target='source') }} != b.prev_hashdiff\n),\n\n\n{%- if enable_ghost_record %}\n\nghost AS (\n    {{ automate_dv.create_ghost_record(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                    src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                    src_eff=src_eff, src_ldts=src_ldts,\n                                    src_source=src_source, source_model=source_model) }}\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n    {%- if enable_ghost_record %}\n    SELECT\n        {{ automate_dv.alias_all(source_cols, 'g') }}\n        FROM ghost AS g\n        {%- if automate_dv.is_any_incremental() %}\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ automate_dv.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'g') }} )\n        {%- endif %}\n    UNION\n    {%- endif %}\n        SELECT {{ automate_dv.alias_all(source_cols, 'frin') }}\n        FROM first_record_in_set AS frin\n        {%- if automate_dv.is_any_incremental() %}\n        LEFT JOIN LATEST_RECORDS lr\n            ON {{ automate_dv.multikey(src_pk, prefix=['lr','frin'], condition='=') }}\n            AND {{ automate_dv.prefix([src_hashdiff], 'lr', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'frin') }}\n            WHERE {{ automate_dv.prefix([src_hashdiff], 'lr', alias_target='target') }} IS NULL\n        {%- endif %}\n        UNION\n        SELECT {{ automate_dv.prefix(source_cols, 'usr', alias_target='source') }}\n        FROM unique_source_records as usr\n)\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.create_ghost_record", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.3871093, "supported_languages": null}, "macro.automate_dv.postgres__eff_sat": {"name": "postgres__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/eff_sat.sql", "original_file_path": "macros/tables/postgres/eff_sat.sql", "unique_id": "macro.automate_dv.postgres__eff_sat", "macro_sql": "\n\n{%- macro postgres__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.388524, "supported_languages": null}, "macro.automate_dv.postgres__pit": {"name": "postgres__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/pit.sql", "original_file_path": "macros/tables/postgres/pit.sql", "unique_id": "macro.automate_dv.postgres__pit", "macro_sql": "\n\n{%- macro postgres__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\n{%- set hash = var('hash', 'MD5') -%}\n\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1)\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{automate_dv.cast_binary(ghost_pk, quote=true)}})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n\n    FROM backfill_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(DECODE(MAX(ENCODE({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}, 'hex')), 'hex'),\n                 {{automate_dv.cast_binary(ghost_pk, quote=true)}})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n\n    {%- endfor %}\n\n    FROM new_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE\n),\n\npit AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n    {% endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost", "macro.automate_dv.cast_binary", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.41552, "supported_languages": null}, "macro.automate_dv.postgres__link": {"name": "postgres__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/postgres/link.sql", "original_file_path": "macros/tables/postgres/link.sql", "unique_id": "macro.automate_dv.postgres__link", "macro_sql": "\n\n{%- macro postgres__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- if not (source_model is iterable and source_model is not string) -%}\n    {%- set source_model = [source_model] -%}\n{%- endif -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n  SELECT * FROM (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if source_model | length == 1 %}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n  ) as l\n  WHERE row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if source_model | length > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if source_model | length > 1 %}\n\nrow_rank_union AS (\n  SELECT * FROM (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n  ) AS a\n  WHERE row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4267778, "supported_languages": null}, "macro.automate_dv.bridge": {"name": "bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/bridge.sql", "original_file_path": "macros/tables/snowflake/bridge.sql", "unique_id": "macro.automate_dv.bridge", "macro_sql": "\n\n{%- macro bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\n\n    {%- if automate_dv.is_something(src_extra_columns) and execute -%}\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\n    {%- endif -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk,\n                                           as_of_dates_table=as_of_dates_table,\n                                           bridge_walk=bridge_walk,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {% for stg in stage_tables_ldts %}\n    {{- \"-- depends_on: \" ~ ref(stg) }}\n    {% endfor %}\n\n    {#- Acquiring the source relation for the AS_OF table -#}\n    {%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n        {%- set source_name = as_of_dates_table | first -%}\n        {%- set source_table_name = as_of_dates_table[source_name] -%}\n        {%- set as_of_dates_table = source(source_name, source_table_name) -%}\n    {%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n        {%- set as_of_dates_table = ref(as_of_dates_table) -%}\n    {%- endif %}\n\n    {{- adapter.dispatch('bridge', 'automate_dv')(src_pk=src_pk,\n                                                  src_extra_columns=src_extra_columns,\n                                                  src_ldts=src_ldts,\n                                                  as_of_dates_table=as_of_dates_table,\n                                                  bridge_walk=bridge_walk,\n                                                  stage_tables_ldts=stage_tables_ldts,\n                                                  source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4332588, "supported_languages": null}, "macro.automate_dv.default__bridge": {"name": "default__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/bridge.sql", "original_file_path": "macros/tables/snowflake/bridge.sql", "unique_id": "macro.automate_dv.default__bridge", "macro_sql": "{%- macro default__bridge(src_pk, src_extra_columns, src_ldts, as_of_dates_table, bridge_walk, stage_tables_ldts, source_model) -%}\n\n{%- set max_datetime = automate_dv.max_datetime() -%}\n\n{#- Setting the new AS_OF dates CTE name -#}\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of'  -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT *\n    FROM {{ as_of_dates_table }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\noverlap AS (\n    {{ automate_dv.bridge_overlap_and_new_rows(src_pk, bridge_walk, 'overlap_pks', 'overlap_as_of') }}\n),\n{%- endif %}\n\nnew_rows AS (\n    {{ automate_dv.bridge_overlap_and_new_rows(src_pk, bridge_walk, ref(source_model), new_as_of_dates_cte) }}\n),\n\n{# Full data from bridge walk(s) -#}\nall_rows AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap\n    {%- endif %}\n),\n\n{# Select most recent set of relationship key(s) for each as of date -#}\ncandidate_rows AS (\n    SELECT *\n    FROM (\n        SELECT *,\n               ROW_NUMBER() OVER (\n               PARTITION BY\n                   AS_OF_DATE,\n                   {% for bridge_step in bridge_walk.keys() -%}\n\n                       {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\n\n                       {{ bridge_link_pk }} {%- if not loop.last %}, {% endif -%}\n\n                   {%- endfor %}\n               ORDER BY\n                   {% for bridge_step in bridge_walk.keys() -%}\n\n                       {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\n\n                       {{ bridge_load_date }} DESC {%- if not loop.last %}, {% endif -%}\n\n                   {%- endfor %}\n               ) AS ROW_NUM\n        FROM all_rows\n    ) AS a\n    WHERE a.ROW_NUM = 1\n),\n\nbridge AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'c') }},\n        c.AS_OF_DATE,\n\n        {% for bridge_step in bridge_walk.keys() %}\n\n        {% set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] %}\n        c.{{ bridge_link_pk }}\n        {%- if not loop.last %}, {%- endif -%}\n        {%- endfor %}\n\n    FROM candidate_rows AS c\n\n{%- for bridge_step in bridge_walk.keys() -%}\n    {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] %}\n\n    {% if loop.first -%} WHERE {%- else -%} AND {%- endif %} {{ automate_dv.cast_date(automate_dv.prefix([bridge_end_date], 'c')) }} = {{ automate_dv.cast_date(max_datetime, true, false) }}\n\n{% endfor -%}\n)\n\nSELECT * FROM bridge\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.max_datetime", "macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.bridge_overlap_and_new_rows", "macro.automate_dv.prefix", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4380162, "supported_languages": null}, "macro.automate_dv.xts": {"name": "xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/xts.sql", "original_file_path": "macros/tables/snowflake/xts.sql", "unique_id": "macro.automate_dv.xts", "macro_sql": "\n\n{%- macro xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_satellite=src_satellite,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not automate_dv.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('xts', 'automate_dv')(src_pk=src_pk,\n                                            src_satellite=src_satellite,\n                                            src_extra_columns=src_extra_columns,\n                                            src_ldts=src_ldts,\n                                            src_source=src_source,\n                                            source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4454489, "supported_languages": null}, "macro.automate_dv.default__xts": {"name": "default__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/xts.sql", "original_file_path": "macros/tables/snowflake/xts.sql", "unique_id": "macro.automate_dv.default__xts", "macro_sql": "{%- macro default__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set hashdiff_col_name_alias = 'HASHDIFF' -%}\n{%- set satellite_name_col_name_alias = 'SATELLITE_NAME' %}\n{%- set satellite_count = src_satellite.keys() | list | length %}\n{%- set stage_count = source_model | length %}\n\n{%- if execute -%}\n    {%- do dbt_utils.log_info('Loading {} from {} source(s) and {} satellite(s)'.format(\"{}.{}.{}\".format(this.database, this.schema, this.identifier),\n                                                                                        stage_count, satellite_count)) -%}\n{%- endif %}\n\n{%- set ns = namespace(last_cte= \"\") %}\n\n{{ 'WITH ' }}\n{%- for src in source_model -%}\n    {%- for satellite in src_satellite.items() -%}\n        {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0] -%}\n        {%- set hashdiff = (satellite[1]['hashdiff'].values() | list)[0] %}\n        {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\n\n{{ cte_name }} AS (\n    SELECT {{ automate_dv.prefix([src_pk], 's') }},\n           s.{{ hashdiff }} AS {{ hashdiff_col_name_alias }},\n           s.{{ satellite_name }} AS {{ satellite_name_col_name_alias }},\n           {%- if automate_dv.is_something(src_extra_columns) -%}\n               {{ automate_dv.prefix([src_extra_columns], 's') }},\n           {%- endif %}\n           s.{{ src_ldts }},\n           s.{{ src_source }}\n    FROM {{ ref(src) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n),\n\n    {%- set ns.last_cte = cte_name %}\n    {%- endfor %}\n{%- endfor %}\n\n{%- if stage_count > 1 or satellite_count > 1 %}\n\nunion_satellites AS (\n    {%- for src in source_model %}\n        {%- for satellite in src_satellite.items() %}\n            {%- set satellite_name = (satellite[1]['sat_name'].values() | list)[0]  %}\n            {%- set cte_name = \"satellite_{}_from_{}\".format(satellite_name, src) | lower %}\n    SELECT * FROM {{ cte_name }}\n            {%- if not loop.last %}\n    UNION ALL\n            {%- endif %}\n        {%- endfor %}\n        {%- if not loop.last %}\n    UNION ALL\n        {%- endif %}\n    {%- endfor %}\n),\n{%- set ns.last_cte = \"union_satellites\" -%}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.{{ hashdiff_col_name_alias }},\n        a.{{ satellite_name_col_name_alias }},\n        {%- if automate_dv.is_something(src_extra_columns) -%}\n            {{ automate_dv.prefix([src_extra_columns], 'a') }},\n        {%- endif %}\n        a.{{ src_ldts }},\n        a.{{ src_source }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n        ON (\n            a.{{ hashdiff_col_name_alias }} = d.{{ hashdiff_col_name_alias }}\n            AND a.{{ src_ldts }} = d.{{ src_ldts }}\n            AND a.{{ satellite_name_col_name_alias }} = d.{{ satellite_name_col_name_alias }}\n        )\n    WHERE d.{{ hashdiff_col_name_alias }} IS NULL\n    AND d.{{ src_ldts }} IS NULL\n    AND d.{{ satellite_name_col_name_alias }} IS NULL\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.log_info", "macro.automate_dv.prefix", "macro.automate_dv.is_something", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4513757, "supported_languages": null}, "macro.automate_dv.ma_sat": {"name": "ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/ma_sat.sql", "original_file_path": "macros/tables/snowflake/ma_sat.sql", "unique_id": "macro.automate_dv.ma_sat", "macro_sql": "\n\n{%- macro ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\n                                           src_payload=src_payload, src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('ma_sat', 'automate_dv')(src_pk=src_pk, src_cdk=src_cdk, src_hashdiff=src_hashdiff,\n                                                 src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                                 src_eff=src_eff, src_ldts=src_ldts,\n                                                 src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4556386, "supported_languages": null}, "macro.automate_dv.default__ma_sat": {"name": "default__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/ma_sat.sql", "original_file_path": "macros/tables/snowflake/ma_sat.sql", "unique_id": "macro.automate_dv.default__ma_sat", "macro_sql": "\n\n{%- macro default__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{# Select unique source records #}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    {% if automate_dv.is_any_incremental() %}\n        ,COUNT(DISTINCT {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }}, {{ automate_dv.prefix(cdk_cols, 's', alias_target='source') }})\n            OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 's') }}) AS source_count\n    {% endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in cdk_cols %}\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ automate_dv.prefix(cdk_cols, 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n        INNER JOIN (\n            SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }}\n            FROM source_data as s\n        ) AS spk\n            ON {{ automate_dv.multikey(src_pk, prefix=['inner_mas', 'spk'], condition='=') }}\n            QUALIFY latest_rank = 1\n    ) AS mas\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ automate_dv.multikey(src_pk, prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ automate_dv.multikey(src_pk, prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n                AND {{ automate_dv.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ automate_dv.multikey(src_pk, prefix=['source_data', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.is_any_incremental", "macro.automate_dv.multikey", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4643624, "supported_languages": null}, "macro.automate_dv.t_link": {"name": "t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/t_link.sql", "original_file_path": "macros/tables/snowflake/t_link.sql", "unique_id": "macro.automate_dv.t_link", "macro_sql": "\n\n{%- macro t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_fk=src_fk, src_eff=src_eff,\n                                              src_ldts=src_ldts, src_source=src_source,\n                                              source_model=source_model) -}}\n\n    {{ automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('t_link', 'automate_dv')(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                                 src_extra_columns=src_extra_columns,\n                                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                                 source_model=source_model) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4672222, "supported_languages": null}, "macro.automate_dv.default__t_link": {"name": "default__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/t_link.sql", "original_file_path": "macros/tables/snowflake/t_link.sql", "unique_id": "macro.automate_dv.default__t_link", "macro_sql": "\n\n{%- macro default__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) %}\n\nWITH stage AS (\n    SELECT {{ source_cols | join(', ') }}\n    FROM {{ ref(source_model) }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    WHERE __PERIOD_FILTER__\n    AND {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    WHERE __RANK_FILTER__\n    AND {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- else %}\n    WHERE {{ automate_dv.multikey(src_pk, condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, condition='IS NOT NULL') }}\n    {%- endif %}\n),\nrecords_to_insert AS (\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 'stg') }}\n    FROM stage AS stg\n    {% if automate_dv.is_any_incremental() -%}\n    LEFT JOIN {{ this }} AS tgt\n    ON {{ automate_dv.multikey(src_pk, prefix=['stg','tgt'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='tgt', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.multikey", "macro.automate_dv.prefix", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4707794, "supported_languages": null}, "macro.automate_dv.ref_table": {"name": "ref_table", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/ref_table.sql", "original_file_path": "macros/tables/snowflake/ref_table.sql", "unique_id": "macro.automate_dv.ref_table", "macro_sql": "\n\n{%- macro ref_table(src_pk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.check_required_parameters(src_pk=src_pk, source_model=source_model) -}}\n\n    {%- if not automate_dv.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{- automate_dv.prepend_generated_by() -}}\n\n    {{- adapter.dispatch('ref_table', 'automate_dv')(src_pk=src_pk, src_extra_columns=src_extra_columns,\n                                                     src_ldts=src_ldts, src_source=src_source,\n                                                     source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__ref_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4733677, "supported_languages": null}, "macro.automate_dv.default__ref_table": {"name": "default__ref_table", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/ref_table.sql", "original_file_path": "macros/tables/snowflake/ref_table.sql", "unique_id": "macro.automate_dv.default__ref_table", "macro_sql": "{%- macro default__ref_table(src_pk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_extra_columns, src_ldts, src_source]) %}\n\nWITH to_insert AS (\n    {%- for src in source_model %}\n    SELECT DISTINCT\n    {{ automate_dv.prefix(source_cols, 'a') }}\n    FROM {{ ref(src) }} AS a\n    WHERE a.{{ src_pk }} IS NOT NULL\n    {%- endfor %}\n),\n\nnon_historized AS (\n    SELECT\n    {{ automate_dv.prefix(source_cols, 'a') }}\n    FROM to_insert AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM non_historized\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.is_any_incremental", "macro.automate_dv.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4756808, "supported_languages": null}, "macro.automate_dv.hub": {"name": "hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "unique_id": "macro.automate_dv.hub", "macro_sql": "\n\n{%- macro hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_nk=src_nk,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not automate_dv.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ automate_dv.log_relation_sources(this, source_model | length) }}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('hub', 'automate_dv')(src_pk=src_pk, src_nk=src_nk,\n                                              src_extra_columns=src_extra_columns,\n                                              src_ldts=src_ldts, src_source=src_source,\n                                              source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.log_relation_sources", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.4821465, "supported_languages": null}, "macro.automate_dv.default__hub": {"name": "default__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/hub.sql", "original_file_path": "macros/tables/snowflake/hub.sql", "unique_id": "macro.automate_dv.default__hub", "macro_sql": "{%- macro default__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.488595, "supported_languages": null}, "macro.automate_dv.sat": {"name": "sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/sat.sql", "original_file_path": "macros/tables/snowflake/sat.sql", "unique_id": "macro.automate_dv.sat", "macro_sql": "\n\n{%- macro sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_hashdiff=src_hashdiff, src_payload=src_payload,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- set src_payload = automate_dv.process_payload_column_excludes(\n                              src_pk=src_pk, src_hashdiff=src_hashdiff,\n                              src_payload=src_payload, src_extra_columns=src_extra_columns, src_eff=src_eff,\n                              src_ldts=src_ldts, src_source=src_source, source_model=source_model) -%}\n\n    {{ automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('sat', 'automate_dv')(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                           src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                           src_eff=src_eff, src_ldts=src_ldts,\n                                           src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.process_payload_column_excludes", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.499505, "supported_languages": null}, "macro.automate_dv.default__sat": {"name": "default__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/sat.sql", "original_file_path": "macros/tables/snowflake/sat.sql", "unique_id": "macro.automate_dv.default__sat", "macro_sql": "{%- macro default__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set apply_source_filter = config.get('apply_source_filter', false) -%}\n{%- set enable_ghost_record = var('enable_ghost_records', false) %}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set window_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set pk_cols = automate_dv.expand_column_list(columns=[src_pk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'a', alias_target='source') }}\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ automate_dv.multikey(src_pk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {% elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {% endif %}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'current_records', alias_target='target') }},\n        RANK() OVER (\n           PARTITION BY {{ automate_dv.prefix([src_pk], 'current_records') }}\n           ORDER BY {{ automate_dv.prefix([src_ldts], 'current_records') }} DESC\n        ) AS rank_num\n    FROM {{ this }} AS current_records\n        JOIN (\n            SELECT DISTINCT {{ automate_dv.prefix([src_pk], 'source_data') }}\n            FROM source_data\n        ) AS source_records\n            ON {{ automate_dv.multikey(src_pk, prefix=['source_records','current_records'], condition='=') }}\n    QUALIFY rank_num = 1\n),\n\n{%- if apply_source_filter %}\n\nvalid_stg AS (\n    SELECT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    FROM source_data AS s\n    LEFT JOIN latest_records AS sat\n    ON {{ automate_dv.multikey(src_pk, prefix=['s', 'sat'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='sat', condition='IS NULL') }}\n    OR {{ automate_dv.prefix([src_ldts], 's') }} > (\n        SELECT MAX({{ src_ldts }}) FROM latest_records AS sat\n        WHERE {{ automate_dv.multikey(src_pk, prefix=['sat','s'], condition='=') }}\n    )\n),\n{%- endif %}\n\n{%- endif %}\n\nfirst_record_in_set AS (\n    SELECT\n    {{ automate_dv.prefix(source_cols, 'sd', alias_target='source') }},\n    RANK() OVER (\n            PARTITION BY {{ automate_dv.prefix([src_pk], 'sd', alias_target='source') }}\n            ORDER BY {{ automate_dv.prefix([src_ldts], 'sd', alias_target='source') }} ASC\n        ) as asc_rank\n    {%- if automate_dv.is_any_incremental() and apply_source_filter %}\n    FROM valid_stg as sd\n    {%- else %}\n    FROM source_data as sd\n    {%- endif %}\n    QUALIFY asc_rank = 1\n),\n\nunique_source_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix(source_cols, 'sd', alias_target='source') }}\n    {%- if automate_dv.is_any_incremental() and apply_source_filter %}\n    FROM valid_stg as sd\n    {%- else %}\n    FROM source_data as sd\n    {%- endif %}\n    QUALIFY {{ automate_dv.prefix([src_hashdiff], 'sd', alias_target='source') }} != LAG({{ automate_dv.prefix([src_hashdiff], 'sd', alias_target='source') }}) OVER (\n        PARTITION BY {{ automate_dv.prefix([src_pk], 'sd', alias_target='source') }}\n        ORDER BY {{ automate_dv.prefix([src_ldts], 'sd', alias_target='source') }} ASC)\n),\n\n\n{%- if enable_ghost_record %}\n\nghost AS (\n    {{ automate_dv.create_ghost_record(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                       src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                       src_eff=src_eff, src_ldts=src_ldts,\n                                       src_source=src_source, source_model=source_model) }}\n),\n\n{%- endif %}\n\nrecords_to_insert AS (\n    {%- if enable_ghost_record %}\n    SELECT\n        {{ automate_dv.alias_all(source_cols, 'g') }}\n        FROM ghost AS g\n        {%- if automate_dv.is_any_incremental() %}\n        WHERE NOT EXISTS ( SELECT 1 FROM {{ this }} AS h WHERE {{ automate_dv.prefix([src_hashdiff], 'h', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'g') }} )\n        {%- endif %}\n    UNION {%- if target.type == 'bigquery' %} DISTINCT {%- endif %}\n    {%- endif %}\n    SELECT {{ automate_dv.alias_all(source_cols, 'frin') }}\n    FROM first_record_in_set AS frin\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN latest_records lr\n        ON {{ automate_dv.multikey(src_pk, prefix=['lr','frin'], condition='=') }}\n        AND {{ automate_dv.prefix([src_hashdiff], 'lr', alias_target='target') }} = {{ automate_dv.prefix([src_hashdiff], 'frin') }}\n        WHERE {{ automate_dv.prefix([src_hashdiff], 'lr', alias_target='target') }} IS NULL\n    {%- endif %}\n    UNION {%- if target.type == 'bigquery' %} DISTINCT {%- endif %}\n    SELECT {{ automate_dv.prefix(source_cols, 'usr', alias_target='source') }}\n    FROM unique_source_records as usr\n)\n\nSELECT * FROM records_to_insert\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.create_ghost_record", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.509627, "supported_languages": null}, "macro.automate_dv.eff_sat": {"name": "eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/eff_sat.sql", "original_file_path": "macros/tables/snowflake/eff_sat.sql", "unique_id": "macro.automate_dv.eff_sat", "macro_sql": "\n\n{%- macro eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                              src_start_date=src_start_date, src_end_date=src_end_date,\n                                              src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                              source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('eff_sat', 'automate_dv')(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                                  src_extra_columns=src_extra_columns,\n                                                  src_start_date=src_start_date, src_end_date=src_end_date,\n                                                  src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                                  source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.515922, "supported_languages": null}, "macro.automate_dv.default__eff_sat": {"name": "default__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/eff_sat.sql", "original_file_path": "macros/tables/snowflake/eff_sat.sql", "unique_id": "macro.automate_dv.default__eff_sat", "macro_sql": "{%- macro default__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list(columns=[src_dfk, src_sfk]) -%}\n{%- set dfk_cols = automate_dv.expand_column_list(columns=[src_dfk]) -%}\n{%- set is_auto_end_dating = config.get('is_auto_end_dating', default=false) %}\n\n{%- set max_datetime = automate_dv.max_datetime() %}\n\nWITH source_data AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='source') }}\n    FROM {{ ref(source_model) }} AS a\n    WHERE {{ automate_dv.multikey(src_dfk, prefix='a', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(src_sfk, prefix='a', condition='IS NOT NULL') }}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n    AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n    AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{# Selecting the most recent records for each link hashkey -#}\nlatest_records AS (\n    SELECT * FROM (\n        SELECT {{ automate_dv.alias_all(source_cols, 'b') }},\n               ROW_NUMBER() OVER (\n                    PARTITION BY {{ automate_dv.prefix([src_pk], 'b') }}\n                    ORDER BY b.{{ src_ldts }} DESC\n               ) AS row_num\n        FROM {{ this }} AS b\n    )\n    {%- if target.type == 'sqlserver' -%}\n        l\n        WHERE l.row_num = 1\n    {%- else -%}\n        AS inner_rank\n        WHERE row_num = 1\n    {%- endif -%}\n),\n\n{# Selecting the open records of the most recent records for each link hashkey -#}\nlatest_open AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'c') }}\n    FROM latest_records AS c\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'c')) }} = {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n),\n\n{# Selecting the closed records of the most recent records for each link hashkey -#}\nlatest_closed AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'd') }}\n    FROM latest_records AS d\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'd')) }} != {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n),\n\n{# Identifying the completely new link relationships to be opened in eff sat -#}\nnew_open_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'f') }},\n        {{ automate_dv.alias_all(fk_cols, 'f') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'f') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        f.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        f.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        f.{{ src_end_date }} AS {{ src_end_date }},\n        f.{{ src_eff }} AS {{ src_eff }},\n        f.{{ src_ldts }},\n        f.{{ src_source }}\n    FROM source_data AS f\n    LEFT JOIN latest_records AS lr\n    ON {{ automate_dv.multikey(src_pk, prefix=['f','lr'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='lr', condition='IS NULL') }}\n),\n\n{# Identifying the currently closed link relationships to be reopened in eff sat -#}\nnew_reopened_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'lc') }},\n        {{ automate_dv.alias_all(fk_cols, 'lc') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'g') }},\n        {% endif -%}\n        {%- if is_auto_end_dating %}\n        g.{{ src_eff }} AS {{ src_start_date }},\n        {% else %}\n        g.{{ src_start_date }} AS {{ src_start_date }},\n        {% endif %}\n        g.{{ src_end_date }} AS {{ src_end_date }},\n        g.{{ src_eff }} AS {{ src_eff }},\n        g.{{ src_ldts }},\n        g.{{ src_source }}\n    FROM source_data AS g\n    INNER JOIN latest_closed AS lc\n    ON {{ automate_dv.multikey(src_pk, prefix=['g','lc'], condition='=') }}\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'g')) }} = {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n),\n\n{%- if is_auto_end_dating %}\n\n{# Creating the closing records -#}\n{# Identifying the currently open relationships that need to be closed due to change in SFK(s) -#}\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'lo') }},\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        lo.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_eff }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    INNER JOIN latest_open AS lo\n    ON {{ automate_dv.multikey(src_dfk, prefix=['lo', 'h'], condition='=') }}\n    WHERE ({{ automate_dv.multikey(src_sfk, prefix=['lo', 'h'], condition='<>', operator='OR') }})\n),\n\n{#- else if (not) is_auto_end_dating -#}\n{% else %}\n\nnew_closed_records AS (\n    SELECT DISTINCT\n        {{ automate_dv.prefix([src_pk], 'lo') }},\n        {{ automate_dv.alias_all(fk_cols, 'lo') }},\n        {% if automate_dv.is_something(src_extra_columns) %}\n            {{ automate_dv.prefix([src_extra_columns], 'h') }},\n        {% endif -%}\n        h.{{ src_start_date }} AS {{ src_start_date }},\n        h.{{ src_end_date }} AS {{ src_end_date }},\n        h.{{ src_eff }} AS {{ src_eff }},\n        h.{{ src_ldts }},\n        lo.{{ src_source }}\n    FROM source_data AS h\n    LEFT JOIN latest_open AS lo\n    ON {{ automate_dv.multikey(src_pk, prefix=['lo', 'h'], condition='=') }}\n    LEFT JOIN latest_closed AS lc\n    ON {{ automate_dv.multikey(src_pk, prefix=['lc', 'h'], condition='=') }}\n    WHERE {{ automate_dv.cast_date(automate_dv.alias(src_end_date, 'h')) }} != {{ automate_dv.cast_date(automate_dv.cast_datetime(max_datetime, as_string=true)) }}\n    AND {{ automate_dv.multikey(src_pk, prefix='lo', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(src_pk, prefix='lc', condition='IS NULL') }}\n),\n\n{#- end if is_auto_end_dating -#}\n{%- endif %}\n\nrecords_to_insert AS (\n    SELECT * FROM new_open_records\n    {% if target.type == 'bigquery' -%}\n        UNION DISTINCT\n    {%- else -%}\n        UNION\n    {%- endif %}\n    SELECT * FROM new_reopened_records\n    {% if target.type == 'bigquery' -%}\n        UNION DISTINCT\n    {%- else -%}\n        UNION\n    {%- endif %}\n    SELECT * FROM new_closed_records\n)\n\n{#- else if not automate_dv.is_any_incremental() -#}\n{%- else %}\n\nrecords_to_insert AS (\n    SELECT {{ automate_dv.alias_all(source_cols, 'i') }}\n    FROM source_data AS i\n)\n\n{#- end if not automate_dv.is_any_incremental() -#}\n{%- endif %}\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.max_datetime", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all", "macro.automate_dv.cast_date", "macro.automate_dv.alias", "macro.automate_dv.cast_datetime", "macro.automate_dv.is_something"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.528082, "supported_languages": null}, "macro.automate_dv.pit": {"name": "pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "unique_id": "macro.automate_dv.pit", "macro_sql": "\n\n{%- macro pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n    {%- if automate_dv.is_something(src_extra_columns) and execute -%}\n      {%- do exceptions.warn(\"WARNING: src_extra_columns not yet available for PITs or Bridges. This parameter will be ignored.\") -%}\n    {%- endif -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk,\n                                           as_of_dates_table=as_of_dates_table,\n                                           satellites=satellites,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {%- for stg in stage_tables_ldts %}\n        {{ \"-- depends_on: \" ~ ref(stg) -}}\n    {%- endfor -%}\n\n    {{ adapter.dispatch('pit', 'automate_dv')(src_pk=src_pk,\n                                           src_extra_columns=src_extra_columns,\n                                           as_of_dates_table=as_of_dates_table,\n                                           satellites=satellites,\n                                           stage_tables_ldts=stage_tables_ldts,\n                                           src_ldts=src_ldts,\n                                           source_model=source_model) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.check_required_parameters", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5455854, "supported_languages": null}, "macro.automate_dv.default__pit": {"name": "default__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/pit.sql", "original_file_path": "macros/tables/snowflake/pit.sql", "unique_id": "macro.automate_dv.default__pit", "macro_sql": "{%- macro default__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\n{%- set hash = var('hash', 'MD5') -%}\n\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1)\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n\n    FROM backfill_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n\n    {%- endfor %}\n\n    FROM new_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE\n),\n\npit AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n    {% endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost", "macro.automate_dv.cast_binary", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5590522, "supported_languages": null}, "macro.automate_dv.link": {"name": "link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "unique_id": "macro.automate_dv.link", "macro_sql": "\n\n{%- macro link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n    {{- automate_dv.check_required_parameters(src_pk=src_pk, src_fk=src_fk,\n                                           src_ldts=src_ldts, src_source=src_source,\n                                           source_model=source_model) -}}\n\n    {%- if not automate_dv.is_list(source_model) -%}\n        {%- set source_model = [source_model] -%}\n    {%- endif -%}\n\n    {{ automate_dv.log_relation_sources(this, source_model | length) }}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('link', 'automate_dv')(src_pk=src_pk, src_fk=src_fk,\n                                               src_extra_columns=src_extra_columns,\n                                               src_ldts=src_ldts, src_source=src_source,\n                                               source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.check_required_parameters", "macro.automate_dv.is_list", "macro.automate_dv.log_relation_sources", "macro.automate_dv.prepend_generated_by", "macro.automate_dv.postgres__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5659683, "supported_languages": null}, "macro.automate_dv.default__link": {"name": "default__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/snowflake/link.sql", "original_file_path": "macros/tables/snowflake/link.sql", "unique_id": "macro.automate_dv.default__link", "macro_sql": "{%- macro default__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if stage_count == 1 %}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5728498, "supported_languages": null}, "macro.automate_dv.databricks__bridge": {"name": "databricks__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/bridge.sql", "original_file_path": "macros/tables/databricks/bridge.sql", "unique_id": "macro.automate_dv.databricks__bridge", "macro_sql": "\n\n{%- macro databricks__bridge(src_pk, src_extra_columns, as_of_dates_table, bridge_walk, stage_tables_ldts, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                                src_extra_columns=src_extra_columns,\n                                src_ldts=src_ldts,\n                                as_of_dates_table=as_of_dates_table,\n                                bridge_walk=bridge_walk,\n                                stage_tables_ldts=stage_tables_ldts,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5738778, "supported_languages": null}, "macro.automate_dv.databricks__xts": {"name": "databricks__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/xts.sql", "original_file_path": "macros/tables/databricks/xts.sql", "unique_id": "macro.automate_dv.databricks__xts", "macro_sql": "\n\n{%- macro databricks__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5746603, "supported_languages": null}, "macro.automate_dv.databricks__ma_sat": {"name": "databricks__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/ma_sat.sql", "original_file_path": "macros/tables/databricks/ma_sat.sql", "unique_id": "macro.automate_dv.databricks__ma_sat", "macro_sql": "\n\n{%- macro databricks__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.sqlserver__ma_sat(src_pk=src_pk, src_cdk=src_cdk,\n                                  src_hashdiff=src_hashdiff, src_payload=src_payload,\n                                  src_extra_columns=src_extra_columns, src_eff=src_eff,\n                                  src_ldts=src_ldts, src_source=src_source,\n                                  source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.sqlserver__ma_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5756211, "supported_languages": null}, "macro.automate_dv.databricks__t_link": {"name": "databricks__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/t_link.sql", "original_file_path": "macros/tables/databricks/t_link.sql", "unique_id": "macro.automate_dv.databricks__t_link", "macro_sql": "\n\n{%- macro databricks__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5765016, "supported_languages": null}, "macro.automate_dv.databricks__ref_table": {"name": "databricks__ref_table", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/ref_table.sql", "original_file_path": "macros/tables/databricks/ref_table.sql", "unique_id": "macro.automate_dv.databricks__ref_table", "macro_sql": "\n\n{%- macro databricks__ref_table(src_pk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__ref_table(src_pk=src_pk,\n                                   src_extra_columns=src_extra_columns,\n                                   src_ldts=src_ldts,\n                                   src_source=src_source,\n                                   source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__ref_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5771942, "supported_languages": null}, "macro.automate_dv.databricks__hub": {"name": "databricks__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/hub.sql", "original_file_path": "macros/tables/databricks/hub.sql", "unique_id": "macro.automate_dv.databricks__hub", "macro_sql": "\n\n{%- macro databricks__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__hub(src_pk=src_pk,\n                             src_nk=src_nk,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__hub"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5779564, "supported_languages": null}, "macro.automate_dv.databricks__sat": {"name": "databricks__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/sat.sql", "original_file_path": "macros/tables/databricks/sat.sql", "unique_id": "macro.automate_dv.databricks__sat", "macro_sql": "\n\n{%- macro databricks__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__sat(src_pk=src_pk,\n                             src_hashdiff=src_hashdiff,\n                             src_payload=src_payload,\n                             src_extra_columns=src_extra_columns,\n                             src_eff=src_eff,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5788672, "supported_languages": null}, "macro.automate_dv.databricks__eff_sat": {"name": "databricks__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/eff_sat.sql", "original_file_path": "macros/tables/databricks/eff_sat.sql", "unique_id": "macro.automate_dv.databricks__eff_sat", "macro_sql": "\n\n{%- macro databricks__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.5798817, "supported_languages": null}, "macro.automate_dv.databricks__pit": {"name": "databricks__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/pit.sql", "original_file_path": "macros/tables/databricks/pit.sql", "unique_id": "macro.automate_dv.databricks__pit", "macro_sql": "\n\n{%- macro databricks__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000' %}\n{%- set hash = var('hash', 'MD5') -%}\n\n{%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1)\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n    {%- endfor %}\n\n    FROM backfill_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list)[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list)[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n        {%- set column_str = \"{}.{}\".format(sat_name | lower ~ '_src', sat_ldts) -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- else %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n                 {{ automate_dv.cast_binary(ghost_pk, quote=true) }})\n        AS {{ sat_name }}_{{ sat_pk_name }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n                 {{ automate_dv.cast_date(ghost_date, as_string=true, datetime=true) }})\n        AS {{ sat_name }}_{{ sat_ldts_name }}\n\n        {%- endif -%}\n\n        {%- if not loop.last -%},{%- endif -%}\n\n    {%- endfor %}\n\n    FROM new_rows_as_of_dates AS a\n\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n\n        LEFT OUTER JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n            ON a.{{ src_pk }} = {{ sat_name | lower }}_src.{{ sat_pk }}\n            AND {{ sat_name | lower ~ '_src'}}.{{ sat_ldts }} <= a.AS_OF_DATE\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE\n),\n\npit AS (\n    SELECT * FROM new_rows\n    {%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n    {% endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost", "macro.automate_dv.cast_binary", "macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6060205, "supported_languages": null}, "macro.automate_dv.databricks__link": {"name": "databricks__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/databricks/link.sql", "original_file_path": "macros/tables/databricks/link.sql", "unique_id": "macro.automate_dv.databricks__link", "macro_sql": "\n\n{%- macro databricks__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__link(src_pk=src_pk,\n                              src_fk=src_fk,\n                              src_extra_columns=src_extra_columns,\n                              src_ldts=src_ldts,\n                              src_source=src_source,\n                              source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6069646, "supported_languages": null}, "macro.automate_dv.bigquery__bridge": {"name": "bigquery__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/bridge.sql", "original_file_path": "macros/tables/bigquery/bridge.sql", "unique_id": "macro.automate_dv.bigquery__bridge", "macro_sql": "\n\n{%- macro bigquery__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                                as_of_dates_table=as_of_dates_table,\n                                bridge_walk=bridge_walk,\n                                stage_tables_ldts=stage_tables_ldts,\n                                src_extra_columns=src_extra_columns,\n                                src_ldts=src_ldts,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6078415, "supported_languages": null}, "macro.automate_dv.bigquery__xts": {"name": "bigquery__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/xts.sql", "original_file_path": "macros/tables/bigquery/xts.sql", "unique_id": "macro.automate_dv.bigquery__xts", "macro_sql": "\n\n{%- macro bigquery__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6086428, "supported_languages": null}, "macro.automate_dv.bigquery__ma_sat": {"name": "bigquery__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/ma_sat.sql", "original_file_path": "macros/tables/bigquery/ma_sat.sql", "unique_id": "macro.automate_dv.bigquery__ma_sat", "macro_sql": "\n\n{%- macro bigquery__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) %}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_cdk, src_payload, src_extra_columns, src_hashdiff, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{# Select unique source records -#}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in src_cdk %}\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n\nsource_data_with_count AS (\n    SELECT a.*,\n           b.source_count\n    FROM source_data a\n    INNER JOIN (\n        SELECT {{ automate_dv.prefix([src_pk], 't') }},\n            COUNT(*) AS source_count\n        FROM (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }}, {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }}, {{ automate_dv.prefix(cdk_cols, 's') }} FROM source_data AS s) AS t\n        GROUP BY {{ automate_dv.prefix([src_pk], 't') }}\n    ) AS b\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','b'], condition='=') }}\n),\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }},\n                                       {{ automate_dv.prefix([src_cdk], 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n    INNER JOIN (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\n        ON {{ automate_dv.multikey(src_pk, prefix=['inner_mas', 'spk'], condition='=') }}\n    ) AS mas\n    WHERE latest_rank = 1\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n{% if not automate_dv.is_any_incremental() %}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n{%- endif %}\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data_with_count') }}\n    FROM source_data_with_count\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data_with_count AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                       lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ automate_dv.multikey(src_pk, prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ automate_dv.multikey(src_pk, prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n{# In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference #}\n{#        AND {{ automate_dv.prefix([src_ldts], 'stage') }} = {{ automate_dv.prefix([src_ldts], 'active_records') }} #}\n                AND {{ automate_dv.multikey(src_cdk, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ automate_dv.multikey(src_pk, prefix=['source_data_with_count', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6207943, "supported_languages": null}, "macro.automate_dv.bigquery__t_link": {"name": "bigquery__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/t_link.sql", "original_file_path": "macros/tables/bigquery/t_link.sql", "unique_id": "macro.automate_dv.bigquery__t_link", "macro_sql": "\n\n{%- macro bigquery__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6217918, "supported_languages": null}, "macro.automate_dv.bigquery__ref_table": {"name": "bigquery__ref_table", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/ref_table.sql", "original_file_path": "macros/tables/bigquery/ref_table.sql", "unique_id": "macro.automate_dv.bigquery__ref_table", "macro_sql": "\n\n{%- macro bigquery__ref_table(src_pk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__ref_table(src_pk=src_pk,\n                                   src_extra_columns=src_extra_columns,\n                                   src_ldts=src_ldts,\n                                   src_source=src_source,\n                                   source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__ref_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6224992, "supported_languages": null}, "macro.automate_dv.bigquery__hub": {"name": "bigquery__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/hub.sql", "original_file_path": "macros/tables/bigquery/hub.sql", "unique_id": "macro.automate_dv.bigquery__hub", "macro_sql": "\n\n{%- macro bigquery__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\n    row_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    QUALIFY row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),\n\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n{%- if stage_count > 1 %}\n\n    row_rank_union AS (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    QUALIFY row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6315134, "supported_languages": null}, "macro.automate_dv.bigquery__sat": {"name": "bigquery__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/sat.sql", "original_file_path": "macros/tables/bigquery/sat.sql", "unique_id": "macro.automate_dv.bigquery__sat", "macro_sql": "\n\n{%- macro bigquery__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                             src_payload=src_payload,\n                             src_extra_columns=src_extra_columns,\n                             src_eff=src_eff, src_ldts=src_ldts,\n                             src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6325176, "supported_languages": null}, "macro.automate_dv.bigquery__eff_sat": {"name": "bigquery__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/eff_sat.sql", "original_file_path": "macros/tables/bigquery/eff_sat.sql", "unique_id": "macro.automate_dv.bigquery__eff_sat", "macro_sql": "\n\n{%- macro bigquery__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6335487, "supported_languages": null}, "macro.automate_dv.bigquery__pit": {"name": "bigquery__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/pit.sql", "original_file_path": "macros/tables/bigquery/pit.sql", "unique_id": "macro.automate_dv.bigquery__pit", "macro_sql": "\n\n{%- macro bigquery__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) %}\n\n{#- Acquiring the source relation for the AS_OF table -#}\n{%- if as_of_dates_table is mapping and as_of_dates_table is not none -%}\n    {%- set source_name = as_of_dates_table | first -%}\n    {%- set source_table_name = as_of_dates_table[source_name] -%}\n    {%- set as_of_table_relation = source(source_name, source_table_name) -%}\n{%- elif as_of_dates_table is not mapping and as_of_dates_table is not none -%}\n    {%- set as_of_table_relation = ref(as_of_dates_table) -%}\n{%- endif -%}\n    {%- set enable_ghost_record = var('enable_ghost_records', false) -%}\n    {%- set hash = var('hash', 'MD5') -%}\n\n{%- if not enable_ghost_record -%}\n{#- Setting ghost values to replace NULLS -#}\n{%- set ghost_pk = '0x0000000000000000' -%}\n{%- set ghost_date = '1900-01-01 00:00:00.000000' %}\n{%- endif -%}\n\n{%- if automate_dv.is_any_incremental() -%}\n    {%- set new_as_of_dates_cte = 'new_rows_as_of' -%}\n{%- else -%}\n    {%- set new_as_of_dates_cte = 'as_of_dates' -%}\n{%- endif %}\n\nWITH as_of_dates AS (\n    SELECT * FROM {{ as_of_table_relation }}\n),\n\n{%- if automate_dv.is_any_incremental() %}\n\n{{ automate_dv.as_of_date_window(src_pk, src_ldts, stage_tables_ldts, ref(source_model)) }},\n\nbackfill_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM new_rows_pks AS a\n    INNER JOIN backfill_as_of AS b\n        ON (1=1 )\n),\n\nbackfill AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] | upper -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] | upper -%}\n        {%- set sat_name = sat_name | upper -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n\n        {% if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n            {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n            {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n\n        {%- else -%}\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n        {%- endif -%}\n        {{- ',' if not loop.last -}}\n    {%- endfor %}\n    FROM backfill_rows_as_of_dates AS a\n\n    {% for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\n\n    {% endfor %}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n    ORDER BY (1)\n),\n{%- endif %}\n\nnew_rows_as_of_dates AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        b.AS_OF_DATE\n    FROM {{ ref(source_model) }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n    ON (1=1)\n),\n\nnew_rows AS (\n    SELECT\n        {{ automate_dv.prefix([src_pk], 'a') }},\n        a.AS_OF_DATE,\n    {%- for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_name = sat_name -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] -%}\n\n        {%- if enable_ghost_record %}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n            {{ automate_dv.binary_ghost(none, hash) }})\n        AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n            {{ automate_dv.date_ghost(date_type = sat_ldts.dtype, alias=none) }})\n        AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n\n        {%- else -%}\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_pk }}),\n        '{{ ghost_pk }}') AS {{ sat_name | upper }}_{{ sat_pk_name | upper }},\n\n        COALESCE(MAX({{ sat_name | lower ~ '_src' }}.{{ sat_ldts }}),\n        PARSE_DATETIME('%F %H:%M:%E6S', '{{ ghost_date }}')) AS {{ sat_name | upper }}_{{ sat_ldts_name | upper }}\n\n        {%- endif -%}\n        {{- \",\" if not loop.last }}\n    {%- endfor %}\n    FROM new_rows_as_of_dates AS a\n\n\n    {% for sat_name in satellites -%}\n        {%- set sat_pk_name = (satellites[sat_name]['pk'].keys() | list )[0] -%}\n        {%- set sat_ldts_name = (satellites[sat_name]['ldts'].keys() | list )[0] -%}\n        {%- set sat_pk = satellites[sat_name]['pk'][sat_pk_name] -%}\n        {%- set sat_ldts = satellites[sat_name]['ldts'][sat_ldts_name] %}\n        LEFT JOIN {{ ref(sat_name) }} AS {{ sat_name | lower ~ '_src' }}\n        {{ \"ON\" | indent(4) }} a.{{ src_pk }} = {{ sat_name | lower ~ '_src' }}.{{ sat_pk }}\n        {{ \"AND\" | indent(4) }} {{ sat_name | lower ~ '_src' }}.{{ sat_ldts }} <= a.AS_OF_DATE\n\n    {% endfor -%}\n\n    GROUP BY\n        {{ automate_dv.prefix([src_pk], 'a') }}, a.AS_OF_DATE\n    ORDER BY (1)\n),\n\npit AS (\n    SELECT * FROM new_rows\n{%- if automate_dv.is_any_incremental() %}\n    UNION ALL\n    SELECT * FROM overlap_pks\n    UNION ALL\n    SELECT * FROM backfill\n{%- endif %}\n)\n\nSELECT DISTINCT * FROM pit\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_any_incremental", "macro.automate_dv.as_of_date_window", "macro.automate_dv.prefix", "macro.automate_dv.binary_ghost", "macro.automate_dv.date_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.659099, "supported_languages": null}, "macro.automate_dv.bigquery__link": {"name": "bigquery__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/bigquery/link.sql", "original_file_path": "macros/tables/bigquery/link.sql", "unique_id": "macro.automate_dv.bigquery__link", "macro_sql": "\n\n{%- macro bigquery__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__link(src_pk=src_pk,\n                              src_fk=src_fk,\n                              src_extra_columns=src_extra_columns,\n                              src_ldts=src_ldts,\n                              src_source=src_source,\n                              source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6608992, "supported_languages": null}, "macro.automate_dv.sqlserver__bridge": {"name": "sqlserver__bridge", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/bridge.sql", "original_file_path": "macros/tables/sqlserver/bridge.sql", "unique_id": "macro.automate_dv.sqlserver__bridge", "macro_sql": "\n\n{%- macro sqlserver__bridge(src_pk, as_of_dates_table, bridge_walk, stage_tables_ldts, src_extra_columns, src_ldts, source_model) -%}\n\n{{- automate_dv.default__bridge(src_pk=src_pk,\n                               as_of_dates_table=as_of_dates_table,\n                               bridge_walk=bridge_walk,\n                               stage_tables_ldts=stage_tables_ldts,\n                               src_extra_columns=src_extra_columns,\n                               src_ldts=src_ldts,\n                               source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__bridge"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6623466, "supported_languages": null}, "macro.automate_dv.sqlserver__xts": {"name": "sqlserver__xts", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/xts.sql", "original_file_path": "macros/tables/sqlserver/xts.sql", "unique_id": "macro.automate_dv.sqlserver__xts", "macro_sql": "\n\n{%- macro sqlserver__xts(src_pk, src_satellite, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__xts(src_pk=src_pk,\n                             src_satellite=src_satellite,\n                             src_extra_columns=src_extra_columns,\n                             src_ldts=src_ldts,\n                             src_source=src_source,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__xts"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6635826, "supported_languages": null}, "macro.automate_dv.sqlserver__ma_sat": {"name": "sqlserver__ma_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/ma_sat.sql", "original_file_path": "macros/tables/sqlserver/ma_sat.sql", "unique_id": "macro.automate_dv.sqlserver__ma_sat", "macro_sql": "\n\n{%- macro sqlserver__ma_sat(src_pk, src_cdk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_payload, src_extra_columns, src_eff, src_ldts, src_source]) -%}\n{%- set rank_cols = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_ldts]) -%}\n{%- set cdk_cols = automate_dv.expand_column_list(columns=[src_cdk]) -%}\n{%- set cols_for_latest = automate_dv.expand_column_list(columns=[src_pk, src_hashdiff, src_cdk, src_ldts]) %}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' -%}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif -%}\n\n{# Select unique source records -#}\nWITH source_data AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols_with_rank, 's', alias_target='source') }}\n    {%- else %}\n    SELECT DISTINCT {{ automate_dv.prefix(source_cols, 's', alias_target='source') }}\n    {%- endif %}\n    FROM {{ ref(source_model) }} AS s\n    WHERE {{ automate_dv.multikey(src_pk, prefix='s', condition='IS NOT NULL') }}\n    {%- for child_key in src_cdk %}\n        AND {{ automate_dv.multikey(child_key, prefix='s', condition='IS NOT NULL') }}\n    {%- endfor %}\n    {%- if model.config.materialized == 'vault_insert_by_period' %}\n        AND __PERIOD_FILTER__\n    {%- elif model.config.materialized == 'vault_insert_by_rank' %}\n        AND __RANK_FILTER__\n    {%- endif %}\n),\n\n{# if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n\nsource_data_with_count AS (\n    SELECT a.*,\n           b.source_count\n    FROM source_data a\n    INNER JOIN\n    (\n        SELECT {{ automate_dv.prefix([src_pk], 't') }},\n               COUNT(*) AS source_count\n        FROM (\n            SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }},\n                            {{ automate_dv.prefix([src_hashdiff], 's', alias_target='source') }},\n                            {{ automate_dv.prefix(cdk_cols, 's') }}\n            FROM source_data AS s\n        ) AS t\n        GROUP BY {{ automate_dv.prefix([src_pk], 't') }}\n    ) AS b\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','b'], condition='=') }}\n),\n\n{# Select latest records from satellite, restricted to PKs in source data -#}\nlatest_records AS (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'mas', alias_target='target') }},\n           mas.latest_rank,\n           DENSE_RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'mas') }}\n                              ORDER BY {{ automate_dv.prefix([src_hashdiff], 'mas', alias_target='target') }}, {{ automate_dv.prefix(cdk_cols, 'mas') }} ASC\n           ) AS check_rank\n    FROM (\n    SELECT {{ automate_dv.prefix(cols_for_latest, 'inner_mas', alias_target='target') }},\n           RANK() OVER (PARTITION BY {{ automate_dv.prefix([src_pk], 'inner_mas') }}\n                        ORDER BY {{ automate_dv.prefix([src_ldts], 'inner_mas') }} DESC\n           ) AS latest_rank\n    FROM {{ this }} AS inner_mas\n    INNER JOIN (SELECT DISTINCT {{ automate_dv.prefix([src_pk], 's') }} FROM source_data as s ) AS spk\n        ON {{ automate_dv.multikey(src_pk, prefix=['inner_mas', 'spk'], condition='=') }}\n        {%- if target.type =='databricks' %}\n        QUALIFY latest_rank = 1\n        {%- endif %}\n    ) AS mas\n    {% if target.type == 'sqlserver' or target.type == 'postgres' -%}\n    WHERE latest_rank = 1\n    {% endif -%}\n),\n\n{# Select summary details for each group of latest records -#}\nlatest_group_details AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'lr') }},\n           {{ automate_dv.prefix([src_ldts], 'lr') }},\n           MAX(lr.check_rank) AS latest_count\n    FROM latest_records AS lr\n    GROUP BY {{ automate_dv.prefix([src_pk], 'lr') }}, {{ automate_dv.prefix([src_ldts], 'lr') }}\n),\n\n{# endif any_incremental -#}\n{%- endif %}\n\n{# Select groups of source records where at least one member does not appear in a group of latest records -#}\nrecords_to_insert AS (\n{% if not automate_dv.is_any_incremental() -%}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data') }}\n    FROM source_data\n{%- endif -%}\n\n{#- if any_incremental -#}\n{% if automate_dv.is_any_incremental() %}\n    SELECT {{ automate_dv.alias_all(source_cols, 'source_data_with_count') }}\n    FROM source_data_with_count\n    WHERE EXISTS (\n        SELECT 1\n        FROM source_data_with_count AS stage\n        WHERE NOT EXISTS (\n            SELECT 1\n            FROM (\n                SELECT {{ automate_dv.prefix(cols_for_latest, 'lr', alias_target='target') }},\n                lg.latest_count\n                FROM latest_records AS lr\n                INNER JOIN latest_group_details AS lg\n                    ON {{ automate_dv.multikey(src_pk, prefix=['lr', 'lg'], condition='=') }}\n                    AND {{ automate_dv.prefix([src_ldts], 'lr') }} = {{ automate_dv.prefix([src_ldts], 'lg') }}\n            ) AS active_records\n            WHERE {{ automate_dv.multikey(src_pk, prefix=['stage', 'active_records'], condition='=') }}\n                AND {{ automate_dv.prefix([src_hashdiff], 'stage') }} = {{ automate_dv.prefix([src_hashdiff], 'active_records', alias_target='target') }}\n{#- In order to maintain the parallel with the standard satellite, we don''t allow for groups of records to be updated if the ldts is the only difference -#}\n{#-        AND {{ automate_dv.prefix([src_ldts], 'stage') }} = {{ automate_dv.prefix([src_ldts], 'active_records') }} #}\n                AND {{ automate_dv.multikey(cdk_cols, prefix=['stage', 'active_records'], condition='=') }}\n                AND stage.source_count = active_records.latest_count\n        )\n        AND {{ automate_dv.multikey(src_pk, prefix=['source_data_with_count', 'stage'], condition='=') }}\n    )\n{# endif any_incremental -#}\n{%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental", "macro.automate_dv.alias_all"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.677893, "supported_languages": null}, "macro.automate_dv.sqlserver__t_link": {"name": "sqlserver__t_link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/t_link.sql", "original_file_path": "macros/tables/sqlserver/t_link.sql", "unique_id": "macro.automate_dv.sqlserver__t_link", "macro_sql": "\n\n{%- macro sqlserver__t_link(src_pk, src_fk, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__t_link(src_pk=src_pk, src_fk=src_fk, src_payload=src_payload,\n                                src_extra_columns=src_extra_columns,\n                                src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__t_link"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.679025, "supported_languages": null}, "macro.automate_dv.sqlserver__ref_table": {"name": "sqlserver__ref_table", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/ref_table.sql", "original_file_path": "macros/tables/sqlserver/ref_table.sql", "unique_id": "macro.automate_dv.sqlserver__ref_table", "macro_sql": "\n\n{%- macro sqlserver__ref_table(src_pk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__ref_table(src_pk=src_pk,\n                                   src_extra_columns=src_extra_columns,\n                                   src_ldts=src_ldts,\n                                   src_source=src_source,\n                                   source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__ref_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.679803, "supported_languages": null}, "macro.automate_dv.sqlserver__hub": {"name": "sqlserver__hub", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/hub.sql", "original_file_path": "macros/tables/sqlserver/hub.sql", "unique_id": "macro.automate_dv.sqlserver__hub", "macro_sql": "\n\n{%- macro sqlserver__hub(src_pk, src_nk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_nk, src_extra_columns, src_ldts, src_source]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ source_cols_with_rank | join(', ') }}\n    {%- else %}\n    SELECT {{ source_cols | join(', ') }}\n    {%- endif %}\n    FROM (\n        {%- if model.config.materialized == 'vault_insert_by_rank' %}\n        SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n        {%- else %}\n        SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n        {%- endif %}\n               ROW_NUMBER() OVER(\n                   PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n                   ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n               ) AS row_number\n        FROM {{ ref(src) }} AS rr\n        WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    ) h\n    WHERE h.row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n),{{ \"\\n\" if not loop.last }}\n{% endfor -%}\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- endif -%}\n\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT *\n    FROM (\n        SELECT ru.*,\n               ROW_NUMBER() OVER(\n                   PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n                   ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n               ) AS row_rank_number\n        FROM {{ ns.last_cte }} AS ru\n        WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    ) h\n    WHERE h.row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6903875, "supported_languages": null}, "macro.automate_dv.sqlserver__sat": {"name": "sqlserver__sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/sat.sql", "original_file_path": "macros/tables/sqlserver/sat.sql", "unique_id": "macro.automate_dv.sqlserver__sat", "macro_sql": "\n\n{%- macro sqlserver__sat(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.postgres__sat(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                             src_payload=src_payload, src_extra_columns=src_extra_columns,\n                             src_eff=src_eff, src_ldts=src_ldts,\n                             src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.postgres__sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6913586, "supported_languages": null}, "macro.automate_dv.sqlserver__eff_sat": {"name": "sqlserver__eff_sat", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/eff_sat.sql", "original_file_path": "macros/tables/sqlserver/eff_sat.sql", "unique_id": "macro.automate_dv.sqlserver__eff_sat", "macro_sql": "\n\n{%- macro sqlserver__eff_sat(src_pk, src_dfk, src_sfk, src_extra_columns, src_start_date, src_end_date, src_eff, src_ldts, src_source, source_model) -%}\n\n{{- automate_dv.default__eff_sat(src_pk=src_pk, src_dfk=src_dfk, src_sfk=src_sfk,\n                                 src_extra_columns=src_extra_columns,\n                                 src_start_date=src_start_date, src_end_date=src_end_date,\n                                 src_eff=src_eff, src_ldts=src_ldts, src_source=src_source,\n                                 source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__eff_sat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.692364, "supported_languages": null}, "macro.automate_dv.sqlserver__pit": {"name": "sqlserver__pit", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/pit.sql", "original_file_path": "macros/tables/sqlserver/pit.sql", "unique_id": "macro.automate_dv.sqlserver__pit", "macro_sql": "\n\n{%- macro sqlserver__pit(src_pk, src_extra_columns, as_of_dates_table, satellites, stage_tables_ldts, src_ldts, source_model) -%}\n\n{{- automate_dv.default__pit(src_pk=src_pk,\n                             src_extra_columns=src_extra_columns,\n                             as_of_dates_table=as_of_dates_table,\n                             satellites=satellites,\n                             stage_tables_ldts=stage_tables_ldts,\n                             src_ldts=src_ldts,\n                             source_model=source_model) -}}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__pit"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.6931794, "supported_languages": null}, "macro.automate_dv.sqlserver__link": {"name": "sqlserver__link", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/tables/sqlserver/link.sql", "original_file_path": "macros/tables/sqlserver/link.sql", "unique_id": "macro.automate_dv.sqlserver__link", "macro_sql": "\n\n{%- macro sqlserver__link(src_pk, src_fk, src_extra_columns, src_ldts, src_source, source_model) -%}\n\n{%- set source_cols = automate_dv.expand_column_list(columns=[src_pk, src_fk, src_extra_columns, src_ldts, src_source]) -%}\n{%- set fk_cols = automate_dv.expand_column_list([src_fk]) -%}\n\n{%- if model.config.materialized == 'vault_insert_by_rank' %}\n    {%- set source_cols_with_rank = source_cols + [config.get('rank_column')] -%}\n{%- endif %}\n\n{{ 'WITH ' -}}\n\n{%- set stage_count = source_model | length -%}\n\n{%- set ns = namespace(last_cte= \"\") -%}\n\n{%- for src in source_model -%}\n\n{%- set source_number = loop.index | string -%}\n\nrow_rank_{{ source_number }} AS (\n    SELECT *\n    FROM\n    (\n    {%- if model.config.materialized == 'vault_insert_by_rank' %}\n    SELECT {{ automate_dv.prefix(source_cols_with_rank, 'rr') }},\n    {%- else %}\n    SELECT {{ automate_dv.prefix(source_cols, 'rr') }},\n    {%- endif %}\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'rr') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'rr') }}\n           ) AS row_number\n    FROM {{ ref(src) }} AS rr\n    {%- if stage_count == 1 %}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='rr', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='rr', condition='IS NOT NULL') }}\n    {%- endif %}\n    ) l\n    WHERE l.row_number = 1\n    {%- set ns.last_cte = \"row_rank_{}\".format(source_number) %}\n    ),{{ \"\\n\" if not loop.last }}\n    {% endfor -%}\n\n{% if stage_count > 1 %}\nstage_union AS (\n    {%- for src in source_model %}\n    SELECT * FROM row_rank_{{ loop.index | string }}\n    {%- if not loop.last %}\n    UNION ALL\n    {%- endif %}\n    {%- endfor %}\n    {%- set ns.last_cte = \"stage_union\" %}\n),\n{%- endif -%}\n{%- if model.config.materialized == 'vault_insert_by_period' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __PERIOD_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{%- elif model.config.materialized == 'vault_insert_by_rank' %}\nstage_mat_filter AS (\n    SELECT *\n    FROM {{ ns.last_cte }}\n    WHERE __RANK_FILTER__\n    {%- set ns.last_cte = \"stage_mat_filter\" %}\n),\n{% endif %}\n{%- if stage_count > 1 %}\n\nrow_rank_union AS (\n    SELECT *\n    FROM\n    (\n    SELECT ru.*,\n           ROW_NUMBER() OVER(\n               PARTITION BY {{ automate_dv.prefix([src_pk], 'ru') }}\n               ORDER BY {{ automate_dv.prefix([src_ldts], 'ru') }}, {{ automate_dv.prefix([src_source], 'ru') }} ASC\n           ) AS row_rank_number\n    FROM {{ ns.last_cte }} AS ru\n    WHERE {{ automate_dv.multikey(src_pk, prefix='ru', condition='IS NOT NULL') }}\n    AND {{ automate_dv.multikey(fk_cols, prefix='ru', condition='IS NOT NULL') }}\n    ) r\n    WHERE r.row_rank_number = 1\n    {%- set ns.last_cte = \"row_rank_union\" %}\n),\n{% endif %}\nrecords_to_insert AS (\n    SELECT {{ automate_dv.prefix(source_cols, 'a', alias_target='target') }}\n    FROM {{ ns.last_cte }} AS a\n    {%- if automate_dv.is_any_incremental() %}\n    LEFT JOIN {{ this }} AS d\n    ON {{ automate_dv.multikey(src_pk, prefix=['a','d'], condition='=') }}\n    WHERE {{ automate_dv.multikey(src_pk, prefix='d', condition='IS NULL') }}\n    {%- endif %}\n)\n\nSELECT * FROM records_to_insert\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.prefix", "macro.automate_dv.multikey", "macro.automate_dv.is_any_incremental"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7034142, "supported_languages": null}, "macro.automate_dv.max_datetime": {"name": "max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.max_datetime", "macro_sql": "\n\n{%- macro max_datetime() -%}\n\n    {%- do return(adapter.dispatch('max_datetime', 'automate_dv')()) -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__max_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7043538, "supported_languages": null}, "macro.automate_dv.default__max_datetime": {"name": "default__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.default__max_datetime", "macro_sql": "\n\n{%- macro default__max_datetime() %}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7046943, "supported_languages": null}, "macro.automate_dv.sqlserver__max_datetime": {"name": "sqlserver__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.sqlserver__max_datetime", "macro_sql": "{%- macro sqlserver__max_datetime() -%}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.9999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7050083, "supported_languages": null}, "macro.automate_dv.bigquery__max_datetime": {"name": "bigquery__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.bigquery__max_datetime", "macro_sql": "{%- macro bigquery__max_datetime() -%}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999999')) -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7053344, "supported_languages": null}, "macro.automate_dv.postgres__max_datetime": {"name": "postgres__max_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/max_datetime.sql", "original_file_path": "macros/supporting/max_datetime.sql", "unique_id": "macro.automate_dv.postgres__max_datetime", "macro_sql": "{%- macro postgres__max_datetime() %}\n\n    {%- do return(var('max_datetime', '9999-12-31 23:59:59.999')) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7056491, "supported_languages": null}, "macro.automate_dv.prefix": {"name": "prefix", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.automate_dv.prefix", "macro_sql": "\n\n{%- macro prefix(columns, prefix_str, alias_target) -%}\n\n    {{- adapter.dispatch('prefix', 'automate_dv')(columns=columns,\n                                               prefix_str=prefix_str,\n                                               alias_target=alias_target) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7092524, "supported_languages": null}, "macro.automate_dv.default__prefix": {"name": "default__prefix", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/prefix.sql", "original_file_path": "macros/supporting/prefix.sql", "unique_id": "macro.automate_dv.default__prefix", "macro_sql": "{%- macro default__prefix(columns=none, prefix_str=none, alias_target='source') -%}\n\n    {%- set processed_columns = [] -%}\n\n    {%- if columns and prefix_str -%}\n\n        {%- for col in columns -%}\n\n            {%- if col | lower not in processed_columns | map('lower') | list -%}\n\n                {%- if col is mapping -%}\n\n                    {%- if alias_target == 'source' -%}\n\n                        {{- automate_dv.prefix([col['source_column']], prefix_str) -}}\n\n                        {%- do processed_columns.append(col['source_column']) -%}\n\n                    {%- elif alias_target == 'target' -%}\n\n                        {{- automate_dv.prefix([col['alias']], prefix_str) -}}\n\n                         {%- do processed_columns.append(col['alias']) -%}\n\n                    {%- else -%}\n\n                        {{- automate_dv.prefix([col['source_column']], prefix_str) -}}\n\n                        {%- do processed_columns.append(col['source_column']) -%}\n\n                    {%- endif -%}\n\n                    {%- if not loop.last -%} , {% endif %}\n\n                {%- else -%}\n\n                    {%- if col is iterable and col is not string -%}\n\n                        {{- automate_dv.prefix(col, prefix_str) -}}\n\n                        {%- do processed_columns.append(col) -%}\n\n                    {%- elif col is not none -%}\n\n                        {{- prefix_str}}.{{col.strip() -}}\n\n                        {%- do processed_columns.append(col) -%}\n                    {% else %}\n\n                        {%- if execute -%}\n                            {{- exceptions.raise_compiler_error(\"Unexpected or missing configuration for '\" ~ this ~ \"' Unable to prefix columns.\") -}}\n                        {%- endif -%}\n                    {%- endif -%}\n\n                    {{- ', ' if not loop.last -}}\n\n                {%- endif -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n    {%- else -%}\n\n        {%- if execute -%}\n            {{- exceptions.raise_compiler_error(\"Invalid parameters provided to prefix macro. Expected: (columns [list/string], prefix_str [string]) got: (\" ~ columns ~ \", \" ~ prefix_str ~ \")\") -}}\n        {%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7130685, "supported_languages": null}, "macro.automate_dv.hash": {"name": "hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.hash", "macro_sql": "\n\n{%- macro hash(columns=none, alias=none, is_hashdiff=false, columns_to_escape=none) -%}\n\n    {%- if is_hashdiff is none -%}\n        {%- set is_hashdiff = false -%}\n    {%- endif -%}\n\n    {{- adapter.dispatch('hash', 'automate_dv')(columns=columns, alias=alias,\n                                             is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.717702, "supported_languages": null}, "macro.automate_dv.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.default__hash", "macro_sql": "\n\n{%- macro default__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n{%- set hash = var('hash', 'md5') -%}\n{%- set concat_string = var('concat_string', '||') -%}\n{%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n\n{%- set hash_alg = automate_dv.select_hash_alg(hash) -%}\n\n{%- set standardise = automate_dv.standard_column_wrapper() %}\n\n{#- Alpha sort columns before hashing if a hashdiff -#}\n{%- if is_hashdiff and automate_dv.is_list(columns) -%}\n    {%- set columns = columns|sort -%}\n{%- endif -%}\n\n{#- If single column to hash -#}\n{%- if columns is string -%}\n    {%- set column_str = automate_dv.as_constant(columns) -%}\n\n    {%- if automate_dv.is_something(columns_to_escape) -%}\n        {%- if column_str in columns_to_escape -%}\n            {%- set column_str = automate_dv.escape_column_name(column_str) -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', standardise | replace('[EXPRESSION]', column_str)) }} AS {{ alias | indent(4) }}\n\n{#- Else a list of columns to hash -#}\n{%- else -%}\n\n    {%- set all_null = [] -%}\n    {%- set processed_columns = [] -%}\n\n    {%- for column in columns -%}\n        {%- if automate_dv.is_something(columns_to_escape) -%}\n            {%- if column in columns_to_escape -%}\n                {%- set column = automate_dv.escape_column_name(column) -%}\n            {%- endif -%}\n        {%- endif -%}\n\n        {%- set column_str = automate_dv.as_constant(column) -%}\n\n        {%- set column_expression = automate_dv.null_expression(column_str) -%}\n\n        {%- do all_null.append(null_placeholder_string) -%}\n        {%- do processed_columns.append(column_expression) -%}\n\n    {% endfor -%}\n\n    {% if not is_hashdiff -%}\n\n        {%- set concat_sql -%}\n        NULLIF({{ automate_dv.concat_ws(processed_columns, separator=concat_string) -}} {{ ', ' -}}\n               '{{ all_null | join(concat_string) }}')\n        {%- endset -%}\n\n        {%- set hashed_column -%}\n        {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', concat_sql) }} AS {{ alias }}\n        {%- endset -%}\n\n    {%- else -%}\n        {% if automate_dv.is_list(processed_columns) and processed_columns | length > 1 %}\n            {%- set hashed_column -%}\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', automate_dv.concat_ws(processed_columns, separator=concat_string)) }} AS {{ alias }}\n            {%- endset -%}\n        {%- else -%}\n            {%- set hashed_column -%}\n                {{ hash_alg | replace('[HASH_STRING_PLACEHOLDER]', processed_columns[0]) }} AS {{ alias }}\n            {%- endset -%}\n        {%- endif -%}\n    {%- endif -%}\n\n    {{ hashed_column }}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.select_hash_alg", "macro.automate_dv.standard_column_wrapper", "macro.automate_dv.is_list", "macro.automate_dv.as_constant", "macro.automate_dv.is_something", "macro.automate_dv.escape_column_name", "macro.automate_dv.null_expression", "macro.automate_dv.concat_ws"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7230685, "supported_languages": null}, "macro.automate_dv.bigquery__hash": {"name": "bigquery__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.bigquery__hash", "macro_sql": "{%- macro bigquery__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.723593, "supported_languages": null}, "macro.automate_dv.sqlserver__hash": {"name": "sqlserver__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.sqlserver__hash", "macro_sql": "{%- macro sqlserver__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7240756, "supported_languages": null}, "macro.automate_dv.postgres__hash": {"name": "postgres__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.postgres__hash", "macro_sql": "{%- macro postgres__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.72456, "supported_languages": null}, "macro.automate_dv.databricks__hash": {"name": "databricks__hash", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash.sql", "original_file_path": "macros/supporting/hash.sql", "unique_id": "macro.automate_dv.databricks__hash", "macro_sql": "{%- macro databricks__hash(columns, alias, is_hashdiff, columns_to_escape) -%}\n\n    {{ automate_dv.default__hash(columns=columns, alias=alias, is_hashdiff=is_hashdiff, columns_to_escape=columns_to_escape) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7250412, "supported_languages": null}, "macro.automate_dv.as_of_date_window": {"name": "as_of_date_window", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/as_of_date_window.sql", "original_file_path": "macros/supporting/as_of_date_window.sql", "unique_id": "macro.automate_dv.as_of_date_window", "macro_sql": "\n\n{%- macro as_of_date_window(src_pk, src_ldts, stage_tables_ldts, source_model) -%}\n\nlast_safe_load_datetime AS (\n    SELECT MIN(LOAD_DATETIME) AS LAST_SAFE_LOAD_DATETIME\n    FROM (\n\n        {% for stg in stage_tables_ldts -%}\n            {%- set stage_ldts = stage_tables_ldts[stg] -%}\n            SELECT MIN({{ stage_ldts }}) AS LOAD_DATETIME FROM {{ ref(stg) }}\n            {% if not loop.last %} UNION ALL {% endif %}\n        {% endfor -%}\n\n    ) AS l\n),\n\nas_of_grain_old_entries AS (\n    SELECT DISTINCT AS_OF_DATE\n    FROM {{ this }}\n),\n\nas_of_grain_lost_entries AS (\n    SELECT a.AS_OF_DATE\n    FROM as_of_grain_old_entries AS a\n    LEFT OUTER JOIN as_of_dates AS b\n        ON a.AS_OF_DATE = b.AS_OF_DATE\n    WHERE b.AS_OF_DATE IS NULL\n),\n\nas_of_grain_new_entries AS (\n    SELECT a.AS_OF_DATE\n    FROM as_of_dates AS a\n    LEFT OUTER JOIN as_of_grain_old_entries AS b\n        ON a.AS_OF_DATE = b.AS_OF_DATE\n    WHERE b.AS_OF_DATE IS NULL\n),\n\nmin_date AS (\n    SELECT MIN(AS_OF_DATE) AS MIN_DATE\n    FROM as_of_dates\n),\n\nbackfill_as_of AS (\n    SELECT AS_OF_DATE\n    FROM as_of_dates AS a\n\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON a.AS_OF_DATE < l.LAST_SAFE_LOAD_DATETIME\n    {% else %}\n    WHERE a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    {%- endif %}\n),\n\nnew_rows_pks AS (\n    SELECT {{ automate_dv.prefix([src_pk], 'h') }}\n    FROM {{ source_model }} AS h\n\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON h.{{ src_ldts }} >= l.LAST_SAFE_LOAD_DATETIME\n    {% else %}\n    WHERE h.{{ src_ldts }} >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    {%- endif %}\n),\n\nnew_rows_as_of AS (\n    SELECT AS_OF_DATE\n    FROM as_of_dates AS a\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN last_safe_load_datetime as l\n    ON a.AS_OF_DATE >= l.LAST_SAFE_LOAD_DATETIME\n    UNION DISTINCT\n    {% else %}\n    WHERE a.AS_OF_DATE >= (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n    UNION\n    {%- endif %}\n    SELECT as_of_date\n    FROM as_of_grain_new_entries\n),\n\noverlap_pks AS (\n    SELECT a.*\n    FROM {{ this }} AS a\n    INNER JOIN {{ source_model }} as b\n        ON {{ automate_dv.multikey(src_pk, prefix=['a','b'], condition='=') }}\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN min_date\n    ON 1 = 1\n    INNER JOIN last_safe_load_datetime\n    ON 1 = 1\n\tLEFT OUTER JOIN as_of_grain_lost_entries\n\tON a.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\n    WHERE a.AS_OF_DATE >= min_date.MIN_DATE\n        AND a.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\n    {% else %}\n    WHERE a.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\n        AND a.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n        AND a.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\n    {%- endif %}\n),\n\noverlap_as_of AS (\n    SELECT p.AS_OF_DATE\n    FROM as_of_dates AS p\n    {% if target.type == \"bigquery\" -%}\n    INNER JOIN min_date\n    ON 1 = 1\n    INNER JOIN last_safe_load_datetime\n    ON 1 = 1\n\tLEFT OUTER JOIN as_of_grain_lost_entries\n\tON p.AS_OF_DATE = as_of_grain_lost_entries.AS_OF_DATE\n    WHERE p.AS_OF_DATE >= min_date.MIN_DATE\n        AND p.AS_OF_DATE < last_safe_load_datetime.LAST_SAFE_LOAD_DATETIME\n\t\tAND as_of_grain_lost_entries.AS_OF_DATE IS NULL\n    {% else %}\n    WHERE p.AS_OF_DATE >= (SELECT MIN_DATE FROM min_date)\n        AND p.AS_OF_DATE < (SELECT LAST_SAFE_LOAD_DATETIME FROM last_safe_load_datetime)\n        AND p.AS_OF_DATE NOT IN (SELECT AS_OF_DATE FROM as_of_grain_lost_entries)\n    {% endif %}\n)\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.730292, "supported_languages": null}, "macro.automate_dv.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.automate_dv.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'automate_dv')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.731025, "supported_languages": null}, "macro.automate_dv.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/get_query_results_as_dict.sql", "original_file_path": "macros/supporting/get_query_results_as_dict.sql", "unique_id": "macro.automate_dv.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n    {%- set query_results = dbt_utils.get_query_results_as_dict(query) -%}\n    {%- set query_results_processed = {} -%}\n\n    {% for k, v in query_results.items() %}\n        {% do query_results_processed.update({k.upper(): v}) %}\n    {% endfor %}\n\n    {{ return(query_results_processed) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.731963, "supported_languages": null}, "macro.automate_dv.bridge_overlap_and_new_rows": {"name": "bridge_overlap_and_new_rows", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/bridge_shared.sql", "original_file_path": "macros/supporting/bridge_shared.sql", "unique_id": "macro.automate_dv.bridge_overlap_and_new_rows", "macro_sql": "\n\n{%- macro bridge_overlap_and_new_rows(src_pk, bridge_walk, source_model, new_as_of_dates_cte) -%}\n\nSELECT\n    {{ automate_dv.prefix([src_pk], 'a') }},\n    b.AS_OF_DATE,\n    {%- for bridge_step in bridge_walk.keys() -%}\n        {%- set link_table = bridge_walk[bridge_step]['link_table'] -%}\n        {%- set eff_sat_table = bridge_walk[bridge_step]['eff_sat_table'] -%}\n\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\n\n        {%- set bridge_link_pk = bridge_walk[bridge_step]['bridge_link_pk'] -%}\n        {%- set bridge_end_date = bridge_walk[bridge_step]['bridge_end_date'] -%}\n        {%- set bridge_load_date = bridge_walk[bridge_step]['bridge_load_date'] -%}\n\n        {%- set eff_sat_end_date = bridge_walk[bridge_step]['eff_sat_end_date'] -%}\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] %}\n\n        {{- '\\n   ' }} {{ link_table | lower }}.{{ link_pk }} AS {{ bridge_link_pk }},\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_end_date }} AS {{ bridge_end_date }},\n        {{- '\\n   ' }} {{ eff_sat_table | lower }}.{{ eff_sat_load_date }} AS {{ bridge_load_date }}\n\n        {%- if not loop.last %}, {%- endif -%}\n\n    {% endfor %}\n\n    FROM {{ source_model }} AS a\n    INNER JOIN {{ new_as_of_dates_cte }} AS b\n        ON (1=1)\n\n    {%- set loop_vars = namespace(last_link = '', last_link_fk = '') %}\n    {%- for bridge_step in bridge_walk.keys() -%}\n\n        {%- set current_link = bridge_walk[bridge_step]['link_table'] -%}\n        {%- set current_eff_sat = bridge_walk[bridge_step]['eff_sat_table'] -%}\n\n        {%- set link_pk = bridge_walk[bridge_step]['link_pk'] -%}\n        {%- set link_fk1 = bridge_walk[bridge_step]['link_fk1'] -%}\n        {%- set link_fk2 = bridge_walk[bridge_step]['link_fk2'] -%}\n\n        {%- set eff_sat_pk = bridge_walk[bridge_step]['eff_sat_pk'] -%}\n        {%- set eff_sat_load_date = bridge_walk[bridge_step]['eff_sat_load_date'] -%}\n\n    {%- if loop.first %}\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\n        ON {{ automate_dv.multikey(src_pk, prefix=['a', current_link | lower], condition='=') }}\n    {%- else %}\n    LEFT JOIN {{ ref(current_link) }} AS {{ current_link | lower }}\n        ON {{ loop_vars.last_link }}.{{ loop_vars.last_link_fk2 }} = {{ current_link | lower }}.{{ link_fk1 }}\n    {%- endif %}\n    INNER JOIN {{ ref(current_eff_sat) }} AS {{ current_eff_sat | lower }}\n        ON {{ current_eff_sat | lower }}.{{ eff_sat_pk }} = {{ current_link | lower }}.{{ link_pk }}\n        AND {{ current_eff_sat | lower }}.{{ eff_sat_load_date }} <= b.AS_OF_DATE\n        {%- set loop_vars.last_link = current_link | lower -%}\n        {%- set loop_vars.last_link_fk2 = link_fk2 -%}\n    {% endfor %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.prefix", "macro.automate_dv.multikey"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7411907, "supported_languages": null}, "macro.automate_dv.select_hash_alg": {"name": "select_hash_alg", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.select_hash_alg", "macro_sql": "\n\n{%- macro select_hash_alg(hash) -%}\n\n    {%- set available_hash_algorithms = ['md5', 'sha'] -%}\n\n    {%- if execute and hash | lower not in available_hash_algorithms %}\n        {%- do exceptions.warn(\"Configured hash ('{}') not recognised. Must be one of: {} (case insensitive)\".format(hash | lower, available_hash_algorithms | join(', '))) -%}\n    {%- endif -%}\n\n    {%- if hash | lower == 'md5' -%}\n        {%- do return(automate_dv.hash_alg_md5()) -%}\n    {%- elif hash | lower == 'sha' -%}\n        {%- do return(automate_dv.hash_alg_sha256()) -%}\n    {%- else -%}\n        {%- do return(automate_dv.hash_alg_md5()) -%}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.hash_alg_md5", "macro.automate_dv.hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7447968, "supported_languages": null}, "macro.automate_dv.hash_alg_md5": {"name": "hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.hash_alg_md5", "macro_sql": "\n\n{%- macro hash_alg_md5() -%}\n\n    {{- adapter.dispatch('hash_alg_md5', 'automate_dv')() -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__hash_alg_md5"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.745577, "supported_languages": null}, "macro.automate_dv.default__hash_alg_md5": {"name": "default__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.default__hash_alg_md5", "macro_sql": "{% macro default__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary('MD5_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7463176, "supported_languages": null}, "macro.automate_dv.bigquery__hash_alg_md5": {"name": "bigquery__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.bigquery__hash_alg_md5", "macro_sql": "{% macro bigquery__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary('UPPER(TO_HEX(MD5([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7468119, "supported_languages": null}, "macro.automate_dv.sqlserver__hash_alg_md5": {"name": "sqlserver__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.sqlserver__hash_alg_md5", "macro_sql": "{% macro sqlserver__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary(\"HASHBYTES('MD5', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7475028, "supported_languages": null}, "macro.automate_dv.postgres__hash_alg_md5": {"name": "postgres__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.postgres__hash_alg_md5", "macro_sql": "{% macro postgres__hash_alg_md5() -%}\n\n    {% do return(\"DECODE(MD5([HASH_STRING_PLACEHOLDER]), 'hex')\") %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7481174, "supported_languages": null}, "macro.automate_dv.databricks__hash_alg_md5": {"name": "databricks__hash_alg_md5", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.databricks__hash_alg_md5", "macro_sql": "{% macro databricks__hash_alg_md5() -%}\n\n    {% do return(automate_dv.cast_binary('UPPER(MD5([HASH_STRING_PLACEHOLDER]))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7488723, "supported_languages": null}, "macro.automate_dv.hash_alg_sha256": {"name": "hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.hash_alg_sha256", "macro_sql": "\n\n\n{%- macro hash_alg_sha256() -%}\n\n    {{- adapter.dispatch('hash_alg_sha256', 'automate_dv')() -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.postgres__hash_alg_sha256"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.749587, "supported_languages": null}, "macro.automate_dv.default__hash_alg_sha256": {"name": "default__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.default__hash_alg_sha256", "macro_sql": "{% macro default__hash_alg_sha256() -%}\n\n    {% do return(automate_dv.cast_binary('SHA2_BINARY([HASH_STRING_PLACEHOLDER])', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.750282, "supported_languages": null}, "macro.automate_dv.bigquery__hash_alg_sha256": {"name": "bigquery__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.bigquery__hash_alg_sha256", "macro_sql": "{% macro bigquery__hash_alg_sha256() -%}\n\n    {% do return(automate_dv.cast_binary('UPPER(TO_HEX(SHA256([HASH_STRING_PLACEHOLDER])))', quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7508385, "supported_languages": null}, "macro.automate_dv.sqlserver__hash_alg_sha256": {"name": "sqlserver__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.sqlserver__hash_alg_sha256", "macro_sql": "{% macro sqlserver__hash_alg_sha256() -%}\n\n    {% do return(automate_dv.cast_binary(\"HASHBYTES('SHA2_256', [HASH_STRING_PLACEHOLDER])\", quote=false)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7514112, "supported_languages": null}, "macro.automate_dv.postgres__hash_alg_sha256": {"name": "postgres__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.postgres__hash_alg_sha256", "macro_sql": "{% macro postgres__hash_alg_sha256() -%}\n    {#- * MD5 is simple function call to md5(val) -#}\n    {#- * SHA256 needs input cast to BYTEA and then its BYTEA result encoded as hex text output -#}\n    {#- e.g. ENCODE(SHA256(CAST(val AS BYTEA)), 'hex') -#}\n    {#- Ref: https://www.postgresql.org/docs/11/functions-binarystring.html  -#}\n\n    {% do return(\"SHA256(CAST([HASH_STRING_PLACEHOLDER] AS BYTEA))\")  %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.751832, "supported_languages": null}, "macro.automate_dv.databricks__hash_alg_sha256": {"name": "databricks__hash_alg_sha256", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/select_hash_alg.sql", "original_file_path": "macros/supporting/hash_components/select_hash_alg.sql", "unique_id": "macro.automate_dv.databricks__hash_alg_sha256", "macro_sql": "{% macro databricks__hash_alg_sha256() -%}\n\n    {% do return('UPPER(SHA2([HASH_STRING_PLACEHOLDER], 256))') %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7523525, "supported_languages": null}, "macro.automate_dv.null_expression": {"name": "null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.null_expression", "macro_sql": "\n\n{%- macro null_expression(column_str) -%}\n\n    {%- if execute and not column_str -%}\n        {%- do exceptions.raise_compiler_error(\"Must provide a column_str argument to null expression macro!\") -%}\n    {%- endif -%}\n\n    {%- set null_placeholder_string = var('null_placeholder_string', '^^') -%}\n    {%- set standardise = automate_dv.standard_column_wrapper() %}\n\n    {{ return(adapter.dispatch('null_expression', 'automate_dv')(standardise=standardise, column_str=column_str, null_placeholder_string=null_placeholder_string)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.standard_column_wrapper", "macro.automate_dv.postgres__null_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7549975, "supported_languages": null}, "macro.automate_dv.default__null_expression": {"name": "default__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.default__null_expression", "macro_sql": "\n\n\n{%- macro default__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        IFNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string}}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7556252, "supported_languages": null}, "macro.automate_dv.postgres__null_expression": {"name": "postgres__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.postgres__null_expression", "macro_sql": "{%- macro postgres__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        COALESCE({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.756185, "supported_languages": null}, "macro.automate_dv.sqlserver__null_expression": {"name": "sqlserver__null_expression", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/null_expression.sql", "original_file_path": "macros/supporting/hash_components/null_expression.sql", "unique_id": "macro.automate_dv.sqlserver__null_expression", "macro_sql": "{%- macro sqlserver__null_expression(standardise, column_str, null_placeholder_string) -%}\n\n    {%- set column_expression -%}\n        ISNULL({{ standardise | replace('[EXPRESSION]', column_str) }}, '{{ null_placeholder_string }}')\n    {%- endset -%}\n\n    {% do return(column_expression) %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7567549, "supported_languages": null}, "macro.automate_dv.standard_column_wrapper": {"name": "standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.standard_column_wrapper", "macro_sql": "\n\n{%- macro standard_column_wrapper() -%}\n\n    {%- set hash_content_casing = var('hash_content_casing', 'upper') -%}\n    {%- set available_case_configs = ['upper', 'disabled'] -%}\n\n    {%- if execute and (hash_content_casing | lower) not in available_case_configs  -%}\n        {%- do exceptions.raise_compiler_error(\"Must provide a valid casing config for hash_content_casing.\n                                                '{}' was provided. Can be one of {} (case insensitive)\".format(\n                                                                                hash_content_casing,\n                                                                                available_case_configs | join(','))) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('standard_column_wrapper', 'automate_dv')(hash_content_casing=hash_content_casing | lower)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__standard_column_wrapper"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.760198, "supported_languages": null}, "macro.automate_dv.default__standard_column_wrapper": {"name": "default__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.default__standard_column_wrapper", "macro_sql": "\n\n\n{%- macro default__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }})), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7609699, "supported_languages": null}, "macro.automate_dv.databricks__standard_column_wrapper": {"name": "databricks__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.databricks__standard_column_wrapper", "macro_sql": "{%- macro databricks__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string(is_hash=true) }}))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string(is_hash=true) }})), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.761799, "supported_languages": null}, "macro.automate_dv.sqlserver__standard_column_wrapper": {"name": "sqlserver__standard_column_wrapper", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/hash_components/standard_column_wrapper.sql", "original_file_path": "macros/supporting/hash_components/standard_column_wrapper.sql", "unique_id": "macro.automate_dv.sqlserver__standard_column_wrapper", "macro_sql": "{%- macro sqlserver__standard_column_wrapper(hash_content_casing) -%}\n\n    {%- if hash_content_casing == 'upper' -%}\n        {%- set standardise -%}\n            NULLIF(UPPER(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}(MAX)))), '')\n        {%- endset -%}\n    {%- else -%}\n        {%- set standardise -%}\n            NULLIF(TRIM(CAST([EXPRESSION] AS {{ automate_dv.type_string() }}(MAX))), '')\n        {%- endset -%}\n    {%- endif -%}\n\n    {% do return(standardise) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.762551, "supported_languages": null}, "macro.automate_dv.type_binary": {"name": "type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.type_binary", "macro_sql": "\n\n{%- macro type_binary() -%}\n  {{- return(adapter.dispatch('type_binary', 'automate_dv')()) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.postgres__type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7633007, "supported_languages": null}, "macro.automate_dv.default__type_binary": {"name": "default__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.default__type_binary", "macro_sql": "{%- macro default__type_binary() -%}\n    {%- if var('hash', 'MD5') | lower == 'md5' -%}\n        BINARY(16)\n    {%- elif var('hash', 'MD5') | lower == 'sha' -%}\n        BINARY(32)\n    {%- else -%}\n        BINARY(16)\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.763908, "supported_languages": null}, "macro.automate_dv.bigquery__type_binary": {"name": "bigquery__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.bigquery__type_binary", "macro_sql": "{%- macro bigquery__type_binary() -%}\n    STRING\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7640774, "supported_languages": null}, "macro.automate_dv.postgres__type_binary": {"name": "postgres__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.postgres__type_binary", "macro_sql": "{%- macro postgres__type_binary() -%}\n    BYTEA\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.764247, "supported_languages": null}, "macro.automate_dv.databricks__type_binary": {"name": "databricks__type_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_binary.sql", "original_file_path": "macros/supporting/data_types/type_binary.sql", "unique_id": "macro.automate_dv.databricks__type_binary", "macro_sql": "{%- macro databricks__type_binary() -%}\n    STRING\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.76441, "supported_languages": null}, "macro.automate_dv.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.automate_dv.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{- return(adapter.dispatch('type_timestamp', 'automate_dv')()) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7649865, "supported_languages": null}, "macro.automate_dv.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.automate_dv.default__type_timestamp", "macro_sql": "{%- macro default__type_timestamp() -%}\n    TIMESTAMP_NTZ\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7651582, "supported_languages": null}, "macro.automate_dv.sqlserver__type_timestamp": {"name": "sqlserver__type_timestamp", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_timestamp.sql", "original_file_path": "macros/supporting/data_types/type_timestamp.sql", "unique_id": "macro.automate_dv.sqlserver__type_timestamp", "macro_sql": "{%- macro sqlserver__type_timestamp() -%}\n    DATETIME2\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7653308, "supported_languages": null}, "macro.automate_dv.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.type_string", "macro_sql": "\n\n{%- macro type_string(is_hash=false, char_length=255) -%}\n  {{- return(adapter.dispatch('type_string', 'automate_dv')(is_hash=is_hash, char_length=char_length)) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7663856, "supported_languages": null}, "macro.automate_dv.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.default__type_string", "macro_sql": "{%- macro default__type_string(is_hash, char_length) -%}\n    VARCHAR\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7665966, "supported_languages": null}, "macro.automate_dv.bigquery__type_string": {"name": "bigquery__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.bigquery__type_string", "macro_sql": "{%- macro bigquery__type_string(is_hash, char_length) -%}\n    STRING\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.766797, "supported_languages": null}, "macro.automate_dv.sqlserver__type_string": {"name": "sqlserver__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.sqlserver__type_string", "macro_sql": "{%- macro sqlserver__type_string(is_hash, char_length) -%}\n    VARCHAR\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7671394, "supported_languages": null}, "macro.automate_dv.databricks__type_string": {"name": "databricks__type_string", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/data_types/type_string.sql", "original_file_path": "macros/supporting/data_types/type_string.sql", "unique_id": "macro.automate_dv.databricks__type_string", "macro_sql": "{%- macro databricks__type_string(is_hash=false, char_length=255) -%}\n    {%- if is_hash -%}\n        {%- if var('hash', 'MD5') | lower == 'md5' -%}\n            VARCHAR(16)\n        {%- elif var('hash', 'MD5') | lower == 'sha' -%}\n            VARCHAR(32)\n        {%- endif -%}\n    {%- else -%}\n        VARCHAR({{ char_length }})\n    {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7679822, "supported_languages": null}, "macro.automate_dv.cast_date": {"name": "cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.cast_date", "macro_sql": "\n\n{%- macro cast_date(column_str, as_string=false, datetime=false, alias=none, date_type=none) -%}\n    {%- if datetime -%}\n        {{- automate_dv.cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type) -}}\n    {%- else -%}\n        {{ return(adapter.dispatch('cast_date', 'automate_dv')(column_str=column_str, as_string=as_string, alias=alias)) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.cast_datetime", "macro.automate_dv.postgres__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7713497, "supported_languages": null}, "macro.automate_dv.snowflake__cast_date": {"name": "snowflake__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.snowflake__cast_date", "macro_sql": "{%- macro snowflake__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        TO_DATE({{ column_str }})\n    {%- else -%}\n        TO_DATE('{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.772085, "supported_languages": null}, "macro.automate_dv.sqlserver__cast_date": {"name": "sqlserver__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.sqlserver__cast_date", "macro_sql": "{%- macro sqlserver__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        CONVERT(DATE, {{ column_str }})\n    {%- else -%}\n        CONVERT(DATE, '{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7727745, "supported_languages": null}, "macro.automate_dv.bigquery__cast_date": {"name": "bigquery__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.bigquery__cast_date", "macro_sql": "{%- macro bigquery__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if not as_string -%}\n        DATE({{ column_str }})\n    {%- else -%}\n        DATE('{{ column_str }}')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.773467, "supported_languages": null}, "macro.automate_dv.databricks__cast_date": {"name": "databricks__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.databricks__cast_date", "macro_sql": "{%- macro databricks__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {{ automate_dv.snowflake__cast_date(column_str=column_str, as_string=as_string, alias=alias)}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.snowflake__cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7739797, "supported_languages": null}, "macro.automate_dv.postgres__cast_date": {"name": "postgres__cast_date", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_date.sql", "original_file_path": "macros/supporting/casting/cast_date.sql", "unique_id": "macro.automate_dv.postgres__cast_date", "macro_sql": "{%- macro postgres__cast_date(column_str, as_string=false, alias=none) -%}\n\n    {%- if as_string -%}\n    TO_DATE('{{ column_str }}', 'YYY-MM-DD')\n    {%- else -%}\n    TO_DATE({{ column_str }}::VARCHAR, 'YYY-MM-DD')\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7748942, "supported_languages": null}, "macro.automate_dv.cast_binary": {"name": "cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.cast_binary", "macro_sql": "\n\n{%- macro cast_binary(column_str, alias=none, quote=true) -%}\n    {{ return(adapter.dispatch('cast_binary', 'automate_dv')(column_str=column_str, alias=alias, quote=quote)) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7766669, "supported_languages": null}, "macro.automate_dv.default__cast_binary": {"name": "default__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.default__cast_binary", "macro_sql": "{%- macro default__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {%- if quote -%}\n        CAST('{{ column_str }}' AS {{ automate_dv.type_binary() }})\n    {%- else -%}\n        CAST({{ column_str }} AS {{ automate_dv.type_binary() }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7775493, "supported_languages": null}, "macro.automate_dv.sqlserver__cast_binary": {"name": "sqlserver__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.sqlserver__cast_binary", "macro_sql": "{%- macro sqlserver__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {%- if quote -%}\n        CONVERT({{ automate_dv.type_binary() }}, '{{ column_str }}', 2)\n    {%- else -%}\n        CONVERT({{ automate_dv.type_binary() }}, {{ column_str }}, 2)\n    {%- endif -%}\n\n    {% if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.type_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7784166, "supported_languages": null}, "macro.automate_dv.bigquery__cast_binary": {"name": "bigquery__cast_binary", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_binary.sql", "original_file_path": "macros/supporting/casting/cast_binary.sql", "unique_id": "macro.automate_dv.bigquery__cast_binary", "macro_sql": "{%- macro bigquery__cast_binary(column_str, alias=none, quote=true) -%}\n\n    {{ automate_dv.default__cast_binary(column_str=column_str, alias=alias, quote=quote) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.default__cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7789319, "supported_languages": null}, "macro.automate_dv.cast_datetime": {"name": "cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.cast_datetime", "macro_sql": "\n\n{%- macro cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if as_string -%}\n        {%- set column_str -%} '{{ column_str }}' {%- endset -%}\n    {%- endif -%}\n\n    {%- set date_type = date_type | lower -%}\n\n    {{ return(adapter.dispatch('cast_datetime', 'automate_dv')(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.postgres__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.781989, "supported_languages": null}, "macro.automate_dv.snowflake__cast_datetime": {"name": "snowflake__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.snowflake__cast_datetime", "macro_sql": "{%- macro snowflake__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if date_type == 'timestamp_tz' -%}\n        TO_TIMESTAMP_TZ({{ column_str }})\n    {%- elif date_type == 'timestamp_ltz' -%}\n        TO_TIMESTAMP_LTZ({{ column_str }})\n    {%- elif date_type == 'timestamp_ntz' -%}\n        TO_TIMESTAMP_NTZ({{ column_str }})\n    {%- else -%}\n        TO_TIMESTAMP({{ column_str }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7830057, "supported_languages": null}, "macro.automate_dv.sqlserver__cast_datetime": {"name": "sqlserver__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.sqlserver__cast_datetime", "macro_sql": "{%- macro sqlserver__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    CONVERT(DATETIME2, {{ column_str }})\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7835052, "supported_languages": null}, "macro.automate_dv.bigquery__cast_datetime": {"name": "bigquery__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.bigquery__cast_datetime", "macro_sql": "{%- macro bigquery__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {%- if date_type == 'timestamp' -%}\n        PARSE_TIMESTAMP('%F %H:%M:%E6S', {{ column_str }})\n    {%- else -%}\n        PARSE_DATETIME('%F %H:%M:%E6S', {{ column_str }})\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7841907, "supported_languages": null}, "macro.automate_dv.databricks__cast_datetime": {"name": "databricks__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.databricks__cast_datetime", "macro_sql": "{%- macro databricks__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    {{ automate_dv.snowflake__cast_datetime(column_str=column_str, as_string=as_string, alias=alias, date_type=date_type)}}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.snowflake__cast_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7847457, "supported_languages": null}, "macro.automate_dv.postgres__cast_datetime": {"name": "postgres__cast_datetime", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/casting/cast_datetime.sql", "original_file_path": "macros/supporting/casting/cast_datetime.sql", "unique_id": "macro.automate_dv.postgres__cast_datetime", "macro_sql": "{%- macro postgres__cast_datetime(column_str, as_string=false, alias=none, date_type=none) -%}\n\n    to_char(timestamp {{ column_str }}, 'YYYY-MM-DD HH24:MI:SS.MS')::timestamp\n\n    {%- if alias %} AS {{ alias }} {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.785238, "supported_languages": null}, "macro.automate_dv.null_ghost": {"name": "null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.null_ghost", "macro_sql": "\n\n{%- macro null_ghost(datatype, alias) -%}\n    {{ adapter.dispatch('null_ghost', 'automate_dv')(datatype=datatype, alias=alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.postgres__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.786068, "supported_languages": null}, "macro.automate_dv.default__null_ghost": {"name": "default__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.default__null_ghost", "macro_sql": "{%- macro default__null_ghost(datatype, alias) -%}\n    NULL AS {{alias}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7863147, "supported_languages": null}, "macro.automate_dv.bigquery__null_ghost": {"name": "bigquery__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.bigquery__null_ghost", "macro_sql": "{% macro bigquery__null_ghost(datatype, alias) -%}\n    CAST(NULL AS {{datatype}}) AS {{alias}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7867553, "supported_languages": null}, "macro.automate_dv.postgres__null_ghost": {"name": "postgres__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.postgres__null_ghost", "macro_sql": "{%- macro postgres__null_ghost(datatype, alias) -%}\n    {{ automate_dv.bigquery__null_ghost(datatype, alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.787097, "supported_languages": null}, "macro.automate_dv.sqlserver__null_ghost": {"name": "sqlserver__null_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/null_ghost.sql", "original_file_path": "macros/supporting/ghost_records/null_ghost.sql", "unique_id": "macro.automate_dv.sqlserver__null_ghost", "macro_sql": "{%- macro sqlserver__null_ghost(datatype, alias) -%}\n    {{ automate_dv.bigquery__null_ghost(datatype, alias) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.bigquery__null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7874255, "supported_languages": null}, "macro.automate_dv.date_ghost": {"name": "date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/date_ghost.sql", "original_file_path": "macros/supporting/ghost_records/date_ghost.sql", "unique_id": "macro.automate_dv.date_ghost", "macro_sql": "\n\n{%- macro date_ghost(date_type, alias) -%}\n    {{ adapter.dispatch('date_ghost', 'automate_dv')(date_type=date_type, alias=alias) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.postgres__date_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7885163, "supported_languages": null}, "macro.automate_dv.default__date_ghost": {"name": "default__date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/date_ghost.sql", "original_file_path": "macros/supporting/ghost_records/date_ghost.sql", "unique_id": "macro.automate_dv.default__date_ghost", "macro_sql": "{%- macro default__date_ghost(date_type, alias=none) -%}\n\n        {%- if date_type == 'date' -%}\n            {{ automate_dv.cast_date('1900-01-01', as_string=true, datetime=false, alias=alias) }}\n        {%- else -%}\n            {{ automate_dv.cast_date('1900-01-01 00:00:00', as_string=true, datetime=true, alias=alias, date_type=date_type) }}\n        {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7894278, "supported_languages": null}, "macro.automate_dv.postgres__date_ghost": {"name": "postgres__date_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/date_ghost.sql", "original_file_path": "macros/supporting/ghost_records/date_ghost.sql", "unique_id": "macro.automate_dv.postgres__date_ghost", "macro_sql": "{%- macro postgres__date_ghost(date_type, alias=none) -%}\n\n    {%- if date_type == 'date' -%}\n        {{ automate_dv.cast_date('1900-01-01', as_string=true, datetime=false, alias=alias) }}\n    {%- else -%}\n        to_char(timestamp '1900-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS.MS')::timestamp {%- if alias %} AS {{alias}}{%- endif -%}\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.cast_date"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.790186, "supported_languages": null}, "macro.automate_dv.binary_ghost": {"name": "binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.automate_dv.binary_ghost", "macro_sql": "\n\n{%- macro binary_ghost(alias, hash) -%}\n    {{ adapter.dispatch('binary_ghost', 'automate_dv')(alias=alias, hash=hash) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__binary_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7913988, "supported_languages": null}, "macro.automate_dv.default__binary_ghost": {"name": "default__binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.automate_dv.default__binary_ghost", "macro_sql": "{%- macro default__binary_ghost(alias, hash) -%}\n\n    {%- if hash | lower == 'md5' -%}\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\n    {%- elif hash | lower == 'sha' -%}\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 64) | join (''), alias=alias, quote=true) }}\n    {%- else -%}\n        {{ automate_dv.cast_binary(column_str=modules.itertools.repeat('0', 32) | join (''), alias=alias, quote=true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.cast_binary"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7929847, "supported_languages": null}, "macro.automate_dv.sqlserver__binary_ghost": {"name": "sqlserver__binary_ghost", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/binary_ghost.sql", "original_file_path": "macros/supporting/ghost_records/binary_ghost.sql", "unique_id": "macro.automate_dv.sqlserver__binary_ghost", "macro_sql": "{%- macro sqlserver__binary_ghost(alias, hash) -%}\n    {%- if hash | lower == 'md5' -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(16)), 16) AS BINARY(16))\n\t{%- elif hash | lower == 'sha' -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(32)), 32) AS BINARY(32))\n    {%- else -%}\n        CAST(REPLICATE(CAST(CAST('0' AS tinyint) AS BINARY(16)), 16) AS BINARY(16))\n    {%- endif -%}\n\n    {%- if alias %} AS {{ alias }} {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.793668, "supported_languages": null}, "macro.automate_dv.create_ghost_record": {"name": "create_ghost_record", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/create_ghost_record.sql", "original_file_path": "macros/supporting/ghost_records/create_ghost_record.sql", "unique_id": "macro.automate_dv.create_ghost_record", "macro_sql": "\n\n{%- macro create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n    {{- adapter.dispatch('create_ghost_record', 'automate_dv')(src_pk=src_pk, src_hashdiff=src_hashdiff,\n                                                            src_payload=src_payload, src_extra_columns=src_extra_columns,\n                                                            src_eff=src_eff, src_ldts=src_ldts,\n                                                            src_source=src_source, source_model=source_model) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.default__create_ghost_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.7965763, "supported_languages": null}, "macro.automate_dv.default__create_ghost_record": {"name": "default__create_ghost_record", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/supporting/ghost_records/create_ghost_record.sql", "original_file_path": "macros/supporting/ghost_records/create_ghost_record.sql", "unique_id": "macro.automate_dv.default__create_ghost_record", "macro_sql": "{%- macro default__create_ghost_record(src_pk, src_hashdiff, src_payload, src_extra_columns, src_eff, src_ldts, src_source, source_model) -%}\n\n{%- set hash = var('hash', 'MD5') -%}\n{%- set source_str = var('system_record_value', 'AUTOMATE_DV_SYSTEM') -%}\n{%- set columns = adapter.get_columns_in_relation(ref(source_model)) -%}\n{%- set col_definitions = [] -%}\n\n{%- set string_columns = [src_payload] -%}\n\n{%- if src_extra_columns != none -%}\n    {%- do string_columns.append(src_extra_columns) -%}\n{%- endif -%}\n\n{%- set string_columns = automate_dv.expand_column_list(string_columns) -%}\n\n{%- for col in columns -%}\n\n    {%- set col_name = col.column -%}\n\n    {%- if ((col_name | lower) == (src_pk | lower)) or ((col_name | lower) == (src_hashdiff | lower)) -%}\n        {%- set col_sql = automate_dv.binary_ghost(alias=col_name, hash=hash) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif automate_dv.is_something(src_hashdiff['source_column'] | default(none)) and ((src_hashdiff['source_column'] | lower) == (col_name | lower)) -%}\n        {%- set col_sql = automate_dv.binary_ghost(alias=src_hashdiff['source_column'], hash=hash) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif ((col_name | lower) == (src_eff | lower)) or ((col_name | lower) == (src_ldts | lower))-%}\n        {% set col_sql = automate_dv.date_ghost(date_type = (col.dtype | lower), alias=col_name) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif (col_name | lower) == (src_source | lower) -%}\n        {%- set col_sql -%}\n            CAST('{{ source_str }}' AS {{ col.dtype }}) AS {{ src_source }}\n        {%- endset -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- elif (col_name | lower) is in (string_columns | map('lower') | list) -%}\n        {% set col_sql = automate_dv.null_ghost(col.dtype, col_name) -%}\n        {%- do col_definitions.append(col_sql) -%}\n\n    {%- endif -%}\n\n{%- endfor -%}\n\nSELECT\n    {% for col in col_definitions -%}\n    {{ col }}\n    {%- if not loop.last -%},\n    {% endif %}\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.expand_column_list", "macro.automate_dv.binary_ghost", "macro.automate_dv.is_something", "macro.automate_dv.date_ghost", "macro.automate_dv.null_ghost"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.802089, "supported_languages": null}, "macro.automate_dv.rank_columns": {"name": "rank_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/rank_columns.sql", "original_file_path": "macros/staging/rank_columns.sql", "unique_id": "macro.automate_dv.rank_columns", "macro_sql": "\n\n{%- macro rank_columns(columns=none) -%}\n\n    {{- adapter.dispatch('rank_columns', 'automate_dv')(columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8064039, "supported_languages": null}, "macro.automate_dv.default__rank_columns": {"name": "default__rank_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/rank_columns.sql", "original_file_path": "macros/staging/rank_columns.sql", "unique_id": "macro.automate_dv.default__rank_columns", "macro_sql": "\n\n{%- macro default__rank_columns(columns=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if columns[col] is mapping and columns[col].partition_by and columns[col].order_by -%}\n\n            {%- set order_by = columns[col].order_by -%}\n            {%- set partition_by = columns[col].partition_by -%}\n            {%- set dense_rank = columns[col].dense_rank -%}\n\n            {%- if automate_dv.is_nothing(dense_rank) %}\n                {%- set rank_type = \"RANK()\" -%}\n            {%- elif dense_rank is true -%}\n                {%- set rank_type = \"DENSE_RANK()\" -%}\n            {%- else -%}\n                {%- if execute -%}\n                    {%- do exceptions.raise_compiler_error('If dense_rank is provided, it must be true or false, not {}'.format(dense_rank)) -%}\n                {% endif %}\n            {%- endif -%}\n\n            {%- if automate_dv.is_list(order_by) -%}\n\n                {%- set order_by_str_lst = [] -%}\n\n                {% for order_by_col in order_by %}\n\n                    {%- if order_by_col is mapping %}\n                        {%- set column_name, direction = order_by_col.items()|first -%}\n                        {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\n                    {%- else -%}\n                        {%- set order_by_str = order_by_col -%}\n                    {%- endif -%}\n\n                    {%- do order_by_str_lst.append(order_by_str) -%}\n                {%- endfor -%}\n\n                {%- set order_by_str = order_by_str_lst | join(\", \") -%}\n\n            {%- else -%}\n\n                {%- if order_by is mapping %}\n                    {%- set column_name, direction = order_by.items()|first -%}\n                {%- else -%}\n                    {%- set column_name = order_by -%}\n                    {%- set direction = '' -%}\n                {%- endif -%}\n\n                {%- set order_by_str = \"{} {}\".format(column_name, direction) | trim -%}\n            {%- endif -%}\n\n            {%- if automate_dv.is_list(partition_by) -%}\n                {%- set partition_by_str = partition_by | join(\", \") -%}\n            {%- else -%}\n                {%- set partition_by_str = partition_by -%}\n            {%- endif -%}\n\n            {{- \"{} OVER (PARTITION BY {} ORDER BY {}) AS {}\".format(rank_type, partition_by_str, order_by_str, col) | indent(4) -}}\n\n        {%- endif -%}\n\n        {{- \",\\n\" if not loop.last -}}\n    {%- endfor -%}\n\n{%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.is_nothing", "macro.automate_dv.is_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8109703, "supported_languages": null}, "macro.automate_dv.stage": {"name": "stage", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "unique_id": "macro.automate_dv.stage", "macro_sql": "\n\n{%- macro stage(include_source_columns=none, source_model=none, hashed_columns=none, derived_columns=none, null_columns=none, ranked_columns=none) -%}\n\n    {%- if include_source_columns is none -%}\n        {%- set include_source_columns = true -%}\n    {%- endif -%}\n\n    {{- automate_dv.prepend_generated_by() }}\n\n    {{ adapter.dispatch('stage', 'automate_dv')(include_source_columns=include_source_columns,\n                                              source_model=source_model,\n                                              hashed_columns=hashed_columns,\n                                              derived_columns=derived_columns,\n                                              null_columns=null_columns,\n                                              ranked_columns=ranked_columns\n                                              ) -}}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.prepend_generated_by", "macro.automate_dv.default__stage"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.816201, "supported_languages": null}, "macro.automate_dv.default__stage": {"name": "default__stage", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/stage.sql", "original_file_path": "macros/staging/stage.sql", "unique_id": "macro.automate_dv.default__stage", "macro_sql": "{%- macro default__stage(include_source_columns, source_model, hashed_columns, derived_columns, null_columns, ranked_columns) -%}\n\n{% if (source_model is none) and execute %}\n\n    {%- set error_message -%}\n    Staging error: Missing source_model configuration. A source model name must be provided.\n    e.g.\n    [REF STYLE]\n    source_model: model_name\n    OR\n    [SOURCES STYLE]\n    source_model:\n        source_name: source_table_name\n    {%- endset -%}\n\n    {{- exceptions.raise_compiler_error(error_message) -}}\n{%- endif -%}\n\n{#- Check for source format or ref format and create\n    relation object from source_model -#}\n{% if source_model is mapping and source_model is not none -%}\n\n    {%- set source_name = source_model | first -%}\n    {%- set source_table_name = source_model[source_name] -%}\n\n    {%- set source_relation = source(source_name, source_table_name) -%}\n    {%- set all_source_columns = automate_dv.source_columns(source_relation=source_relation) -%}\n{%- elif source_model is not mapping and source_model is not none -%}\n\n    {%- set source_relation = ref(source_model) -%}\n    {%- set all_source_columns = automate_dv.source_columns(source_relation=source_relation) -%}\n{%- else -%}\n\n    {%- set all_source_columns = [] -%}\n{%- endif -%}\n\n{%- set columns_to_escape = automate_dv.process_columns_to_escape(derived_columns) | list -%}\n{%- set derived_column_names = automate_dv.extract_column_names(derived_columns) | list -%}\n{%- set null_column_names = automate_dv.extract_null_column_names(null_columns) | list -%}\n{%- set hashed_column_names = automate_dv.extract_column_names(hashed_columns) | list -%}\n{%- set ranked_column_names = automate_dv.extract_column_names(ranked_columns) | list -%}\n{%- set exclude_column_names = derived_column_names + null_column_names + hashed_column_names | list -%}\n{%- set source_and_derived_column_names = (all_source_columns + derived_column_names) | unique | list -%}\n\n{%- set source_columns_to_select = automate_dv.process_columns_to_select(all_source_columns, exclude_column_names) -%}\n{%- set derived_columns_to_select = automate_dv.process_columns_to_select(source_and_derived_column_names, null_column_names + hashed_column_names) | unique | list -%}\n{%- set derived_and_null_columns_to_select = automate_dv.process_columns_to_select(source_and_derived_column_names + null_column_names, hashed_column_names) | unique | list -%}\n{%- set final_columns_to_select = [] -%}\n\n{#- Include source columns in final column selection if true -#}\n{%- if include_source_columns -%}\n    {%- if automate_dv.is_nothing(derived_columns)\n           and automate_dv.is_nothing(null_columns)\n           and automate_dv.is_nothing(hashed_columns)\n           and automate_dv.is_nothing(ranked_columns) -%}\n        {%- set final_columns_to_select = final_columns_to_select + all_source_columns -%}\n    {%- else -%}\n        {#- Only include non-overriden columns if not just source columns -#}\n        {%- set final_columns_to_select = final_columns_to_select + source_columns_to_select -%}\n    {%- endif -%}\n{%- endif %}\n\nWITH source_data AS (\n\n    SELECT\n\n    {{- \"\\n\\n    \" ~ automate_dv.print_list(list_to_print=all_source_columns, columns_to_escape=columns_to_escape) if all_source_columns else \" *\" }}\n\n    FROM {{ source_relation }}\n    {%- set last_cte = \"source_data\" %}\n)\n\n{%- if automate_dv.is_something(derived_columns) -%},\n\nderived_columns AS (\n\n    SELECT\n\n    {{ automate_dv.derive_columns(source_relation=source_relation, columns=derived_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"derived_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + derived_column_names %}\n)\n{%- endif -%}\n\n{% if automate_dv.is_something(null_columns) -%},\n\nnull_columns AS (\n\n    SELECT\n\n    {{ automate_dv.print_list(list_to_print=derived_columns_to_select, columns_to_escape=columns_to_escape) }}{{\",\" if automate_dv.is_something(derived_columns_to_select) else \"\"}}\n\n    {{ automate_dv.null_columns(source_relation=none, columns=null_columns) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"null_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + null_column_names %}\n)\n{%- endif -%}\n\n\n{% if automate_dv.is_something(hashed_columns) -%},\n\nhashed_columns AS (\n\n    SELECT\n\n    {{ automate_dv.print_list(list_to_print=derived_and_null_columns_to_select, columns_to_escape=columns_to_escape) }},\n\n    {% set processed_hash_columns = automate_dv.process_hash_column_excludes(hashed_columns, all_source_columns) -%}\n    {{- automate_dv.hash_columns(columns=processed_hash_columns, columns_to_escape=columns_to_escape) | indent(4) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"hashed_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + hashed_column_names %}\n)\n{%- endif -%}\n\n{% if automate_dv.is_something(ranked_columns) -%},\n\nranked_columns AS (\n\n    SELECT *,\n\n    {{ automate_dv.rank_columns(columns=ranked_columns) | indent(4) if automate_dv.is_something(ranked_columns) }}\n\n    FROM {{ last_cte }}\n    {%- set last_cte = \"ranked_columns\" -%}\n    {%- set final_columns_to_select = final_columns_to_select + ranked_column_names %}\n)\n{%- endif -%}\n\n,\n\ncolumns_to_select AS (\n\n    SELECT\n\n    {{ automate_dv.print_list(list_to_print=final_columns_to_select | unique | list, columns_to_escape=columns_to_escape) }}\n\n    FROM {{ last_cte }}\n)\n\nSELECT * FROM columns_to_select\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.source_columns", "macro.automate_dv.process_columns_to_escape", "macro.automate_dv.extract_column_names", "macro.automate_dv.extract_null_column_names", "macro.automate_dv.process_columns_to_select", "macro.automate_dv.is_nothing", "macro.automate_dv.print_list", "macro.automate_dv.is_something", "macro.automate_dv.derive_columns", "macro.automate_dv.null_columns", "macro.automate_dv.process_hash_column_excludes", "macro.automate_dv.hash_columns", "macro.automate_dv.rank_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.824944, "supported_languages": null}, "macro.automate_dv.null_columns": {"name": "null_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.null_columns", "macro_sql": "\n\n{%- macro null_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('null_columns', 'automate_dv')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__null_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.829412, "supported_languages": null}, "macro.automate_dv.default__null_columns": {"name": "default__null_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.default__null_columns", "macro_sql": "\n\n{%- macro default__null_columns(source_relation=none, columns=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- set ns = namespace() -%}\n\n    {%- for col in columns -%}\n        {%- if col.lower() == 'required' -%}\n            {% if automate_dv.is_something(columns[col]) %}\n                {%- if columns[col] is string -%}\n                    {%- set ns.required = [columns[col]] -%}\n                {%- elif automate_dv.is_list(columns[col]) -%}\n                    {%- set ns.required = columns[col] -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n        {%- if col.lower() == 'optional' -%}\n            {% if automate_dv.is_something(columns[col]) %}\n                {%- if columns[col] is string -%}\n                    {%- set ns.optional = [columns[col]] -%}\n                {%- elif automate_dv.is_list(columns[col]) -%}\n                    {%- set ns.optional = columns[col] -%}\n                {%- endif -%}\n            {%- endif -%}\n        {%- endif -%}\n    {%- endfor -%}\n\n    {%- set required_value = var('null_key_required', '-1') -%}\n    {%- set optional_value = var('null_key_optional', '-2') -%}\n\n    {%- if automate_dv.is_something(ns.required) -%}\n        {%- filter indent(width=0) -%}\n        {%- for col_name in ns.required -%}\n            {{ automate_dv.null_column_sql(col_name, required_value) }}{{ \",\\n\" if not loop.last }}{{ \",\\n\" if loop.last and automate_dv.is_something(ns.optional) else \"\" }}\n        {%- endfor -%}\n        {%- endfilter -%}\n    {%- endif -%}\n\n    {%- if automate_dv.is_something(ns.optional) -%}\n        {%- filter indent(width=0) -%}\n        {%- for col_name in ns.optional -%}\n            {{ automate_dv.null_column_sql(col_name, optional_value) }}{{ \",\\n\" if not loop.last }}\n        {%- endfor -%}\n        {%- endfilter -%}\n    {%- endif -%}\n\n{%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.automate_dv.is_something", "macro.automate_dv.is_list", "macro.automate_dv.null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8337805, "supported_languages": null}, "macro.automate_dv.null_column_sql": {"name": "null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.null_column_sql", "macro_sql": "{%- macro null_column_sql(col_name, default_value) -%}\n\n    {{- adapter.dispatch('null_column_sql', 'automate_dv')(col_name=col_name, default_value=default_value) -}}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.automate_dv.postgres__null_column_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8342936, "supported_languages": null}, "macro.automate_dv.default__null_column_sql": {"name": "default__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.default__null_column_sql", "macro_sql": "{%- macro default__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    IFNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8347294, "supported_languages": null}, "macro.automate_dv.sqlserver__null_column_sql": {"name": "sqlserver__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.sqlserver__null_column_sql", "macro_sql": "{%- macro sqlserver__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    ISNULL({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8351617, "supported_languages": null}, "macro.automate_dv.postgres__null_column_sql": {"name": "postgres__null_column_sql", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/null_columns.sql", "original_file_path": "macros/staging/null_columns.sql", "unique_id": "macro.automate_dv.postgres__null_column_sql", "macro_sql": "{%- macro postgres__null_column_sql(col_name, default_value) -%}\n\n    {{ col_name }} AS {{ col_name ~ \"_ORIGINAL\" }},\n    COALESCE({{ col_name }}, '{{ default_value }}') AS {{ col_name }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.835599, "supported_languages": null}, "macro.automate_dv.derive_columns": {"name": "derive_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.automate_dv.derive_columns", "macro_sql": "\n\n{%- macro derive_columns(source_relation=none, columns=none) -%}\n\n    {{- adapter.dispatch('derive_columns', 'automate_dv')(source_relation=source_relation, columns=columns) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__derive_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8398726, "supported_languages": null}, "macro.automate_dv.default__derive_columns": {"name": "default__derive_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/derive_columns.sql", "original_file_path": "macros/staging/derive_columns.sql", "unique_id": "macro.automate_dv.default__derive_columns", "macro_sql": "\n\n{%- macro default__derive_columns(source_relation=none, columns=none) -%}\n\n{%- set exclude_columns = [] -%}\n{%- set include_columns = [] -%}\n{%- set src_columns = [] -%}\n{%- set der_columns = [] -%}\n\n{%- set source_cols = automate_dv.source_columns(source_relation=source_relation) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {#- Add aliases of derived columns to excludes and full SQL to includes -#}\n    {%- for derived_column in columns -%}\n        {%- set column_config = columns[derived_column] -%}\n\n        {%- if automate_dv.is_list(column_config) -%}\n            {%- set column_list = [] -%}\n\n            {%- for concat_component in column_config -%}\n                {%- set column_str = automate_dv.as_constant(concat_component) -%}\n                {%- do column_list.append(column_str) -%}\n            {%- endfor -%}\n\n            {%- set concat = automate_dv.concat_ws(column_list, \"||\") -%}\n            {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\n\n            {%- do der_columns.append(concat_string) -%}\n        {%- else -%}\n            {%- if column_config is mapping and column_config -%}\n                {%- set column_escape = column_config['escape'] -%}\n\n                {%- if automate_dv.is_list(column_config['source_column']) -%}\n                    {%- set column_list = [] -%}\n\n                    {%- for concat_component in column_config['source_column'] -%}\n                        {%- set column_str = automate_dv.as_constant(concat_component) -%}\n                        {%- if column_escape is true %}\n                            {%- set column_str = automate_dv.escape_column_names(column_str) -%}\n                        {% endif %}\n                        {%- do column_list.append(column_str) -%}\n                    {%- endfor -%}\n\n                    {%- set concat = automate_dv.concat_ws(column_list, \"||\") -%}\n                    {%- set concat_string = concat ~ \" AS \" ~ derived_column -%}\n\n                    {%- do der_columns.append(concat_string) -%}\n                {%- else -%}\n                    {%- set column_str = automate_dv.as_constant(column_config['source_column']) -%}\n                    {%- if column_escape is true -%}\n                        {%- do der_columns.append(automate_dv.escape_column_names(column_str) ~ \" AS \" ~ derived_column) -%}\n                    {%- else -%}\n                        {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\n                    {%- endif -%}\n                {%- endif -%}\n            {%- else -%}\n                {%- set column_str = automate_dv.as_constant(column_config) -%}\n                {%- do der_columns.append(column_str ~ \" AS \" ~ derived_column) -%}\n            {%- endif -%}\n        {%- endif -%}\n\n        {%- do exclude_columns.append(derived_column) -%}\n\n    {%- endfor -%}\n\n    {#- Add all columns from source_model relation -#}\n    {%- if source_relation is defined and source_relation is not none -%}\n\n        {%- for col in source_cols -%}\n            {%- if col | lower not in exclude_columns | map('lower') | list -%}\n                {%- do src_columns.append(col) -%}\n            {%- endif -%}\n        {%- endfor -%}\n\n    {%- endif -%}\n\n    {#- Makes sure the columns are appended in a logical order. Source columns then derived columns -#}\n    {%- set include_columns = src_columns + der_columns -%}\n    {%- set columns_to_escape = automate_dv.process_columns_to_escape(columns) | list -%}\n\n    {#- Print out all columns in includes -#}\n    {%- for col in include_columns -%}\n        {%- if col | lower in columns_to_escape | map('lower') | list -%}\n            {{- automate_dv.escape_column_name(col) -}}{{ \",\\n\" if not loop.last }}\n\n        {%- else -%}\n            {{- col -}}{{ \",\\n\" if not loop.last }}\n        {%- endif -%}\n    {%- endfor -%}\n\n{%- else -%}\n\n{%- if execute -%}\n\n{{ exceptions.raise_compiler_error(\"Invalid column configuration:\nexpected format, either: {'source_relation': Relation, 'columns': {column_name: column_value}}\nor: {'source_relation': Relation, 'columns': {column_name: {'source_column': column_value, 'escape': true / false}}}\ngot: {'source_relation': \" ~ source_relation ~ \", 'columns': \" ~ columns ~ \"}\") }}\n{%- endif %}\n\n{%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.source_columns", "macro.automate_dv.is_list", "macro.automate_dv.as_constant", "macro.automate_dv.concat_ws", "macro.automate_dv.escape_column_names", "macro.automate_dv.process_columns_to_escape", "macro.automate_dv.escape_column_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8471398, "supported_languages": null}, "macro.automate_dv.hash_columns": {"name": "hash_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.automate_dv.hash_columns", "macro_sql": "\n\n{%- macro hash_columns(columns=none, columns_to_escape=none) -%}\n\n    {{- adapter.dispatch('hash_columns', 'automate_dv')(columns=columns, columns_to_escape=columns_to_escape) -}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.automate_dv.default__hash_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8487995, "supported_languages": null}, "macro.automate_dv.default__hash_columns": {"name": "default__hash_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/hash_columns.sql", "original_file_path": "macros/staging/hash_columns.sql", "unique_id": "macro.automate_dv.default__hash_columns", "macro_sql": "\n\n{%- macro default__hash_columns(columns=none, columns_to_escape=none) -%}\n\n{%- if columns is mapping and columns is not none -%}\n\n    {%- for col in columns -%}\n\n        {%- if columns[col] is mapping and columns[col].is_hashdiff -%}\n\n            {{- automate_dv.hash(columns=columns[col]['columns'],\n                              alias=col,\n                              is_hashdiff=columns[col]['is_hashdiff'],\n                              columns_to_escape=columns_to_escape) -}}\n\n        {%- elif columns[col] is not mapping -%}\n\n            {{- automate_dv.hash(columns=columns[col],\n                              alias=col,\n                              is_hashdiff=false,\n                              columns_to_escape=columns_to_escape) -}}\n\n        {%- elif columns[col] is mapping and not columns[col].is_hashdiff -%}\n\n            {%- if execute -%}\n                {%- do exceptions.warn(\"[\" ~ this ~ \"] Warning: You provided a list of columns under a 'columns' key, but did not provide the 'is_hashdiff' flag. Use list syntax for PKs.\") -%}\n            {% endif %}\n\n            {{- automate_dv.hash(columns=columns[col]['columns'], alias=col, columns_to_escape=columns_to_escape) -}}\n\n        {%- endif -%}\n\n        {{- \",\\n\\n\" if not loop.last -}}\n    {%- endfor -%}\n\n{%- endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.automate_dv.hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8512635, "supported_languages": null}, "macro.automate_dv.source_columns": {"name": "source_columns", "resource_type": "macro", "package_name": "automate_dv", "path": "macros/staging/source_columns.sql", "original_file_path": "macros/staging/source_columns.sql", "unique_id": "macro.automate_dv.source_columns", "macro_sql": "\n\n{%- macro source_columns(source_relation=none) -%}\n\n    {%- if source_relation -%}\n        {%- set source_model_cols = adapter.get_columns_in_relation(source_relation) -%}\n\n        {%- set column_list = [] -%}\n\n        {%- for source_col in source_model_cols -%}\n            {%- do column_list.append(source_col.column) -%}\n        {%- endfor -%}\n\n        {%- do return(column_list) -%}\n    {%- endif %}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8523743, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8548563, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8583457, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.859437, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8610997, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8639169, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8647556, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.866424, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.867563, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8685908, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.869262, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.86988, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.870175, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8721051, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8727748, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8742206, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8760278, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8780563, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8815727, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.886602, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.8987885, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9006398, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9016862, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9021661, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.903538, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9050245, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9073546, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.909722, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9117017, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.912376, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9132147, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9148972, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9159596, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.916403, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9171245, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.917914, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9185183, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.919088, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9223137, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9248922, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9262698, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.926626, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9269557, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9272847, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.928691, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.930711, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9321024, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9326608, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9331388, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9335747, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9339359, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9343119, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9366488, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9418173, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9429379, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9443688, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9453485, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9459238, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.946931, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9485548, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9493697, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9505324, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.951404, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9527447, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9534535, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9543517, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.956534, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.95895, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9598787, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.960316, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.960872, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9612267, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9623218, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.963991, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.965373, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9659543, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9663339, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9674788, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9692395, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9701602, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.971285, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9730198, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.975029, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9764984, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9779139, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9788237, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9798446, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.981407, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9829636, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.984882, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9868252, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9906826, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9956145, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081073.9988809, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0014968, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0061145, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0124352, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0268695, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0336738, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.035088, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0359836, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0381987, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0436392, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0471673, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0494914, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0514448, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0538425, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0557885, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0581458, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.059049, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0601668, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.061109, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0626214, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.06331, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1738081074.0640612, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.dbt_unlp.raw_resourcetype_coar": ["seed.dbt_unlp.seed_resourcetype_coar"], "model.dbt_unlp.map_resourcetype_coar2worktype_openalex": ["seed.dbt_unlp.seed_resourcetype_coar2worktype_openalex"], "model.dbt_unlp.base_openaire_researchproduct2relevantdate": ["source.dbt_unlp.openaire.researchproduct2relevantdate"], "model.dbt_unlp.openaire_researchproduct2relevantdate": ["model.dbt_unlp.base_openaire_researchproduct2relevantdate"], "model.dbt_unlp.base_openaire_researchproduct2creator": ["source.dbt_unlp.openaire.researchproduct2creator"], "model.dbt_unlp.openaire_researchproduct2creator": ["model.dbt_unlp.base_openaire_researchproduct2creator"], "model.dbt_unlp.norm_openaire_researchproduct2handle": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "model.dbt_unlp.norm_openaire_researchproduct2doi": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "model.dbt_unlp.norm_openaire_researchproduct2mag": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "model.dbt_unlp.norm_openaire_researchproduct2pmid": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "model.dbt_unlp.base_openaire_researchproduct2pid": ["source.dbt_unlp.openaire.researchproduct2pid"], "model.dbt_unlp.openaire_researchproduct2pid": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "model.dbt_unlp.norm_openaire_researchproduct2arxiv": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "model.dbt_unlp.norm_openaire_researchproduct2pmc": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "model.dbt_unlp.norm_openaire_researchproduct2subject": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.norm_openaire_researchproduct2ddc": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.norm_openaire_researchproduct2agrovoc": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.norm_openaire_researchproduct2sdg": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.norm_openaire_researchproduct2keyword": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.norm_openaire_researchproduct2lcsh": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.norm_openaire_researchproduct2subjectmag": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.base_openaire_researchproduct2subject": ["source.dbt_unlp.openaire.researchproduct2subject"], "model.dbt_unlp.norm_openaire_researchproduct2fos": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "model.dbt_unlp.mid_item_dateissued_dspacedb": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "model.dbt_unlp.mid_item_type_dspacedb": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "model.dbt_unlp.mid_item_title_dspacedb": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "model.dbt_unlp.mid_item_metadatavalue_dspacedb": ["source.dbt_unlp.dspacedb.item", "source.dbt_unlp.dspacedb.metadatafieldregistry", "source.dbt_unlp.dspacedb.metadataschemaregistry", "source.dbt_unlp.dspacedb.metadatavalue"], "model.dbt_unlp.mid_item_dateaccessioned_dspacedb": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "model.dbt_unlp.mid_item_handle_dspacedb": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "model.dbt_unlp.mid_item_doi_dspacedb": ["model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "model.dbt_unlp.base_handle_dspacedb": ["source.dbt_unlp.dspacedb.handle"], "model.dbt_unlp.base_community2community_dspacedb": ["source.dbt_unlp.dspacedb.community2community"], "model.dbt_unlp.base_item_dspacedb": ["source.dbt_unlp.dspacedb.item"], "model.dbt_unlp.base_bundle2bitstream_dspacedb": ["source.dbt_unlp.dspacedb.bundle2bitstream"], "model.dbt_unlp.base_doi_dspacedb": ["source.dbt_unlp.dspacedb.doi"], "model.dbt_unlp.base_bundle_dspacedb": ["source.dbt_unlp.dspacedb.bundle"], "model.dbt_unlp.base_metadataschemaregistry_dspacedb": ["source.dbt_unlp.dspacedb.metadataschemaregistry"], "model.dbt_unlp.base_community2collection_dspacedb": ["source.dbt_unlp.dspacedb.community2collection"], "model.dbt_unlp.base_community2item_dspacedb": ["source.dbt_unlp.dspacedb.communities2item"], "model.dbt_unlp.base_community_dspacedb": ["source.dbt_unlp.dspacedb.community"], "model.dbt_unlp.base_communities2item_dspacedb": ["source.dbt_unlp.dspacedb.communities2item"], "model.dbt_unlp.base_item2bundle_dspacedb": ["source.dbt_unlp.dspacedb.item2bundle"], "model.dbt_unlp.base_bitstream_dspacedb": ["source.dbt_unlp.dspacedb.bitstream"], "model.dbt_unlp.base_metadatavalue_dspacedb": ["source.dbt_unlp.dspacedb.metadatavalue"], "model.dbt_unlp.base_collection_dspacedb": ["source.dbt_unlp.dspacedb.collection"], "model.dbt_unlp.base_metadatafieldregistry_dspacedb": ["source.dbt_unlp.dspacedb.metadatafieldregistry"], "model.dbt_unlp.base_collection2item_dspacedb": ["source.dbt_unlp.dspacedb.collection2item"], "model.dbt_unlp.norm_item_dspacedb": ["model.dbt_unlp.mid_item_dateaccessioned_dspacedb", "model.dbt_unlp.mid_item_dateissued_dspacedb", "model.dbt_unlp.mid_item_doi_dspacedb", "model.dbt_unlp.mid_item_handle_dspacedb", "model.dbt_unlp.mid_item_title_dspacedb", "model.dbt_unlp.mid_item_type_dspacedb", "source.dbt_unlp.dspacedb.item"], "model.dbt_unlp.norm_author_openalex": ["model.dbt_unlp.base_cic_author_openalex"], "model.dbt_unlp.base_work2location_openalex": ["source.dbt_unlp.openalex.work2location"], "model.dbt_unlp.base_language_openalex": ["source.dbt_unlp.openalex.language"], "model.dbt_unlp.base_author2affiliation_openalex": ["source.dbt_unlp.openalex.author2affiliation"], "model.dbt_unlp.norm_work_openalex": ["model.dbt_unlp.base_work_openalex"], "model.dbt_unlp.base_author2institution_openalex": ["source.dbt_unlp.openalex.author2institution"], "model.dbt_unlp.base_author2topic_openalex": ["source.dbt_unlp.openalex.author2topic"], "model.dbt_unlp.base_cic_author_openalex": ["source.dbt_unlp.openalex.author"], "model.dbt_unlp.base_work_openalex": ["source.dbt_unlp.openalex.work"], "model.dbt_unlp.base_license_openalex": ["source.dbt_unlp.openalex.license"], "model.dbt_unlp.base_work2authorship_openalex": ["source.dbt_unlp.openalex.work2authorship"], "model.dbt_unlp.hub_resourcetype_coar": ["model.dbt_unlp.stg_resourcetype_coar"], "model.dbt_unlp.sal_resourcetype_coar": ["model.dbt_unlp.stg_resourcetype_coar2worktype_openalex"], "model.dbt_unlp.sat_resourcetype_coar": ["model.dbt_unlp.stg_resourcetype_coar"], "model.dbt_unlp.hub_openaire_date": ["model.dbt_unlp.stg_researchproduct2date_openaire"], "model.dbt_unlp.hub_openaire_arxiv": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.hub_openaire_mag": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.hub_openaire_pmc": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.hub_openaire_handle": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.hub_openaire_pmid": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.hub_openaire_doi": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.sal_openaire_researchproduct": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.lnk_openaire_researchproduct2date": ["model.dbt_unlp.stg_researchproduct2date_openaire"], "model.dbt_unlp.sat_openaire_researchproduct2date": ["model.dbt_unlp.stg_researchproduct2date_openaire"], "model.dbt_unlp.sat_openaire_researchproduct": ["model.dbt_unlp.stg_openaire_researchproduct"], "model.dbt_unlp.hub_doi_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.hub_type_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.hub_handle_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.hub_item_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.sal_item_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.link_item_type_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.sat_item_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.hub_mag_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.hub_pmcid_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.hub_doi_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.hub_institution_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.hub_worktype_openalex": ["model.dbt_unlp.stg_worktype_openalex"], "model.dbt_unlp.hub_pmid_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.hub_orcid_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.hub_language_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.hub_ror_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.hub_source_openalex": ["model.dbt_unlp.stg_work2location_openalex"], "model.dbt_unlp.hub_author_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.hub_work_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.link_work2author_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.link_work2worktype_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.link_institution2ror_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.link_work2language_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.sal_institution_openalex": ["model.dbt_unlp.hub_institution_openalex", "model.dbt_unlp.hub_ror_openalex", "model.dbt_unlp.link_institution2ror_openalex"], "model.dbt_unlp.sal_author_openalex": ["model.dbt_unlp.hub_author_openalex", "model.dbt_unlp.hub_orcid_openalex", "model.dbt_unlp.link_author2orcid_openalex"], "model.dbt_unlp.link_author2orcid_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.sal_work_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.sat_institution_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.sat_source_openalex": [], "model.dbt_unlp.sat_work_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.sat_author_openalex": ["model.dbt_unlp.stg_work2authorship_openalex"], "model.dbt_unlp.dim_doi": ["model.dbt_unlp.hub_doi_dspacedb", "model.dbt_unlp.hub_doi_openalex", "model.dbt_unlp.hub_openaire_doi"], "model.dbt_unlp.dim_resourcetype": ["model.dbt_unlp.hub_worktype_openalex", "model.dbt_unlp.sal_resourcetype_coar", "model.dbt_unlp.sat_resourcetype_coar"], "model.dbt_unlp.dim_person": ["model.dbt_unlp.hub_author_openalex", "model.dbt_unlp.sat_author_openalex"], "model.dbt_unlp.dim_source": [], "model.dbt_unlp.dim_date": [], "model.dbt_unlp.dim_institution": ["model.dbt_unlp.hub_institution_openalex", "model.dbt_unlp.sat_institution_openalex"], "model.dbt_unlp.dim_type_dspacedb": ["model.dbt_unlp.hub_type_dspacedb"], "model.dbt_unlp.dim_handle_dspacedb": ["model.dbt_unlp.hub_handle_dspacedb"], "model.dbt_unlp.dim_doi_dspacedb": ["model.dbt_unlp.hub_doi_dspacedb"], "model.dbt_unlp.fact_publication_dspacedb": ["model.dbt_unlp.dim_doi_dspacedb", "model.dbt_unlp.dim_handle_dspacedb", "model.dbt_unlp.dim_type_dspacedb", "model.dbt_unlp.link_item_type_dspacedb", "model.dbt_unlp.sal_item_dspacedb", "model.dbt_unlp.sat_item_dspacedb"], "model.dbt_unlp.dim_resourcetype_openalex": ["model.dbt_unlp.hub_worktype_openalex"], "model.dbt_unlp.dim_author_openalex": ["model.dbt_unlp.hub_work_openalex", "model.dbt_unlp.link_work2author_openalex"], "model.dbt_unlp.dim_pid_openalex": ["model.dbt_unlp.hub_doi_openalex", "model.dbt_unlp.hub_mag_openalex", "model.dbt_unlp.hub_pmcid_openalex", "model.dbt_unlp.hub_pmid_openalex", "model.dbt_unlp.hub_work_openalex", "model.dbt_unlp.sal_work_openalex"], "model.dbt_unlp.fact_publication_openalex": ["model.dbt_unlp.dim_pid_openalex", "model.dbt_unlp.dim_resourcetype_openalex", "model.dbt_unlp.link_work2worktype_openalex", "model.dbt_unlp.sal_work_openalex", "model.dbt_unlp.sat_work_openalex"], "model.dbt_unlp.stg_resourcetype_coar2worktype_openalex": ["model.dbt_unlp.map_resourcetype_coar2worktype_openalex"], "model.dbt_unlp.stg_resourcetype_coar": ["model.dbt_unlp.raw_resourcetype_coar"], "model.dbt_unlp.stg_openaire_researchproduct": ["model.dbt_unlp.openaire_researchproduct"], "model.dbt_unlp.stg_researchproduct2date_openaire": ["model.dbt_unlp.openaire_researchproduct2relevantdate"], "model.dbt_unlp.stg_researchproduct2pid_openaire": ["model.dbt_unlp.openaire_researchproduct2pid"], "model.dbt_unlp.stg_item_dspacedb": ["model.dbt_unlp.norm_item_dspacedb"], "model.dbt_unlp.stg_language_openalex": ["source.dbt_unlp.openalex.language"], "model.dbt_unlp.stg_work_openalex": ["model.dbt_unlp.norm_work_openalex"], "model.dbt_unlp.stg_work2location_openalex": ["source.dbt_unlp.openalex.work2location"], "model.dbt_unlp.stg_worktype_openalex": ["source.dbt_unlp.openalex.worktype"], "model.dbt_unlp.stg_work2authorship_openalex": ["source.dbt_unlp.openalex.work2authorship"], "model.dbt_unlp.stg_author_openalex": ["model.dbt_unlp.norm_author_openalex"], "model.dbt_unlp.stg_license_openalex": ["source.dbt_unlp.openalex.license"], "seed.dbt_unlp.seed_accessright_coar": [], "seed.dbt_unlp.seed_resourcetype_coar": [], "seed.dbt_unlp.seed_resourcetype_coar2worktype_openalex": [], "seed.dbt_unlp.seed_dspacedb": [], "model.dbt_unlp.dim_date_issued_openaire": ["model.dbt_unlp.dim_date_openaire"], "model.dbt_unlp.dim_date_openaire": ["model.dbt_unlp.hub_openaire_date", "model.dbt_unlp.hub_openaire_researchproduct", "model.dbt_unlp.lnk_openaire_researchproduct2date", "model.dbt_unlp.sat_openaire_researchproduct2date"], "model.dbt_unlp.fact_publication": ["model.dbt_unlp.dim_doi", "model.dbt_unlp.fact_publication_dspacedb", "model.dbt_unlp.fact_publication_openaire_search", "model.dbt_unlp.fact_publication_openalex"], "model.dbt_unlp.fact_publication_openaire_search": ["model.dbt_unlp.dim_pid_openaire", "model.dbt_unlp.hub_openaire_researchproduct", "model.dbt_unlp.sat_openaire_researchproduct"], "model.dbt_unlp.dim_pid_openaire": ["model.dbt_unlp.hub_openaire_arxiv", "model.dbt_unlp.hub_openaire_doi", "model.dbt_unlp.hub_openaire_handle", "model.dbt_unlp.hub_openaire_mag", "model.dbt_unlp.hub_openaire_pmc", "model.dbt_unlp.hub_openaire_pmid", "model.dbt_unlp.hub_openaire_researchproduct", "model.dbt_unlp.sal_openaire_researchproduct"], "model.dbt_unlp.sat_openaire_graph_researchproduct": ["model.dbt_unlp.stg_openaire_graph_researchproduct"], "model.dbt_unlp.stg_openaire_graph_researchproduct": ["model.dbt_unlp.openaire_graph_researchproduct"], "model.dbt_unlp.openaire_graph_researchproduct": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct"], "model.dbt_unlp.openaire_graph_researchproduct2author": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct2author"], "model.dbt_unlp.hub_openaire_graph_originalid": ["model.dbt_unlp.stg_openaire_graph_researchproduct2originalid"], "model.dbt_unlp.link_openaire_graph_researchproduct2originalid": ["model.dbt_unlp.stg_openaire_graph_researchproduct2originalid"], "model.dbt_unlp.openaire_graph_researchproduct2subject": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct2subject"], "model.dbt_unlp.hub_openaire_researchproduct": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.openaire_researchproduct2measure": ["source.dbt_unlp.openaire.researchproduct2measure"], "model.dbt_unlp.openaire_researchproduct": ["source.dbt_unlp.openaire.researchproduct"], "model.dbt_unlp.openaire_graph_researchproduct2originalid": ["source.dbt_unlp.openaire_graph_researchproduct.researchproduct2originalId"], "model.dbt_unlp.stg_openaire_graph_researchproduct2originalid": ["model.dbt_unlp.openaire_graph_researchproduct2originalid"], "model.dbt_unlp.hub_openaire_graph_researchproduct": ["model.dbt_unlp.stg_openaire_graph_researchproduct"], "model.dbt_unlp.fact_publication_openaire_graph": ["model.dbt_unlp.hub_openaire_graph_researchproduct", "model.dbt_unlp.sat_openaire_graph_researchproduct"], "source.dbt_unlp.openaire.researchproduct": [], "source.dbt_unlp.openaire.researchproduct2creator": [], "source.dbt_unlp.openaire.researchproduct2measure": [], "source.dbt_unlp.openaire.researchproduct2pid": [], "source.dbt_unlp.openaire.researchproduct2relevantdate": [], "source.dbt_unlp.openaire.researchproduct2subject": [], "source.dbt_unlp.dspacedb.bitstream": [], "source.dbt_unlp.dspacedb.bundle": [], "source.dbt_unlp.dspacedb.bundle2bitstream": [], "source.dbt_unlp.dspacedb.collection": [], "source.dbt_unlp.dspacedb.collection2item": [], "source.dbt_unlp.dspacedb.communities2item": [], "source.dbt_unlp.dspacedb.community": [], "source.dbt_unlp.dspacedb.community2collection": [], "source.dbt_unlp.dspacedb.community2community": [], "source.dbt_unlp.dspacedb.community2item": [], "source.dbt_unlp.dspacedb.handle": [], "source.dbt_unlp.dspacedb.doi": [], "source.dbt_unlp.dspacedb.item": [], "source.dbt_unlp.dspacedb.item2bundle": [], "source.dbt_unlp.dspacedb.metadatafieldregistry": [], "source.dbt_unlp.dspacedb.metadataschemaregistry": [], "source.dbt_unlp.dspacedb.metadatavalue": [], "source.dbt_unlp.openalex.author": [], "source.dbt_unlp.openalex.author2affiliation": [], "source.dbt_unlp.openalex.author2institution": [], "source.dbt_unlp.openalex.author2topic": [], "source.dbt_unlp.openalex.language": [], "source.dbt_unlp.openalex.license": [], "source.dbt_unlp.openalex.work": [], "source.dbt_unlp.openalex.work2authorship": [], "source.dbt_unlp.openalex.work2concept": [], "source.dbt_unlp.openalex.work2corresponding_author_ids": [], "source.dbt_unlp.openalex.work2primary_location": [], "source.dbt_unlp.openalex.work2primary_topics": [], "source.dbt_unlp.openalex.work2referenced_works": [], "source.dbt_unlp.openalex.work2location": [], "source.dbt_unlp.openalex.worktype": [], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct": [], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2author": [], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2originalId": [], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2subject": []}, "child_map": {"model.dbt_unlp.raw_resourcetype_coar": ["model.dbt_unlp.stg_resourcetype_coar"], "model.dbt_unlp.map_resourcetype_coar2worktype_openalex": ["model.dbt_unlp.stg_resourcetype_coar2worktype_openalex"], "model.dbt_unlp.base_openaire_researchproduct2relevantdate": ["model.dbt_unlp.openaire_researchproduct2relevantdate"], "model.dbt_unlp.openaire_researchproduct2relevantdate": ["model.dbt_unlp.stg_researchproduct2date_openaire"], "model.dbt_unlp.base_openaire_researchproduct2creator": ["model.dbt_unlp.openaire_researchproduct2creator"], "model.dbt_unlp.openaire_researchproduct2creator": [], "model.dbt_unlp.norm_openaire_researchproduct2handle": [], "model.dbt_unlp.norm_openaire_researchproduct2doi": [], "model.dbt_unlp.norm_openaire_researchproduct2mag": [], "model.dbt_unlp.norm_openaire_researchproduct2pmid": [], "model.dbt_unlp.base_openaire_researchproduct2pid": ["model.dbt_unlp.norm_openaire_researchproduct2arxiv", "model.dbt_unlp.norm_openaire_researchproduct2doi", "model.dbt_unlp.norm_openaire_researchproduct2handle", "model.dbt_unlp.norm_openaire_researchproduct2mag", "model.dbt_unlp.norm_openaire_researchproduct2pmc", "model.dbt_unlp.norm_openaire_researchproduct2pmid", "model.dbt_unlp.openaire_researchproduct2pid"], "model.dbt_unlp.openaire_researchproduct2pid": ["model.dbt_unlp.stg_researchproduct2pid_openaire"], "model.dbt_unlp.norm_openaire_researchproduct2arxiv": [], "model.dbt_unlp.norm_openaire_researchproduct2pmc": [], "model.dbt_unlp.norm_openaire_researchproduct2subject": [], "model.dbt_unlp.norm_openaire_researchproduct2ddc": [], "model.dbt_unlp.norm_openaire_researchproduct2agrovoc": [], "model.dbt_unlp.norm_openaire_researchproduct2sdg": [], "model.dbt_unlp.norm_openaire_researchproduct2keyword": [], "model.dbt_unlp.norm_openaire_researchproduct2lcsh": [], "model.dbt_unlp.norm_openaire_researchproduct2subjectmag": [], "model.dbt_unlp.base_openaire_researchproduct2subject": ["model.dbt_unlp.norm_openaire_researchproduct2agrovoc", "model.dbt_unlp.norm_openaire_researchproduct2ddc", "model.dbt_unlp.norm_openaire_researchproduct2fos", "model.dbt_unlp.norm_openaire_researchproduct2keyword", "model.dbt_unlp.norm_openaire_researchproduct2lcsh", "model.dbt_unlp.norm_openaire_researchproduct2sdg", "model.dbt_unlp.norm_openaire_researchproduct2subject", "model.dbt_unlp.norm_openaire_researchproduct2subjectmag"], "model.dbt_unlp.norm_openaire_researchproduct2fos": [], "model.dbt_unlp.mid_item_dateissued_dspacedb": ["model.dbt_unlp.norm_item_dspacedb"], "model.dbt_unlp.mid_item_type_dspacedb": ["model.dbt_unlp.norm_item_dspacedb"], "model.dbt_unlp.mid_item_title_dspacedb": ["model.dbt_unlp.norm_item_dspacedb"], "model.dbt_unlp.mid_item_metadatavalue_dspacedb": ["model.dbt_unlp.mid_item_dateaccessioned_dspacedb", "model.dbt_unlp.mid_item_dateissued_dspacedb", "model.dbt_unlp.mid_item_doi_dspacedb", "model.dbt_unlp.mid_item_handle_dspacedb", "model.dbt_unlp.mid_item_title_dspacedb", "model.dbt_unlp.mid_item_type_dspacedb"], "model.dbt_unlp.mid_item_dateaccessioned_dspacedb": ["model.dbt_unlp.norm_item_dspacedb"], "model.dbt_unlp.mid_item_handle_dspacedb": ["model.dbt_unlp.norm_item_dspacedb"], "model.dbt_unlp.mid_item_doi_dspacedb": ["model.dbt_unlp.norm_item_dspacedb"], "model.dbt_unlp.base_handle_dspacedb": [], "model.dbt_unlp.base_community2community_dspacedb": [], "model.dbt_unlp.base_item_dspacedb": [], "model.dbt_unlp.base_bundle2bitstream_dspacedb": [], "model.dbt_unlp.base_doi_dspacedb": [], "model.dbt_unlp.base_bundle_dspacedb": [], "model.dbt_unlp.base_metadataschemaregistry_dspacedb": [], "model.dbt_unlp.base_community2collection_dspacedb": [], "model.dbt_unlp.base_community2item_dspacedb": [], "model.dbt_unlp.base_community_dspacedb": [], "model.dbt_unlp.base_communities2item_dspacedb": [], "model.dbt_unlp.base_item2bundle_dspacedb": [], "model.dbt_unlp.base_bitstream_dspacedb": [], "model.dbt_unlp.base_metadatavalue_dspacedb": [], "model.dbt_unlp.base_collection_dspacedb": [], "model.dbt_unlp.base_metadatafieldregistry_dspacedb": [], "model.dbt_unlp.base_collection2item_dspacedb": [], "model.dbt_unlp.norm_item_dspacedb": ["model.dbt_unlp.stg_item_dspacedb"], "model.dbt_unlp.norm_author_openalex": ["model.dbt_unlp.stg_author_openalex"], "model.dbt_unlp.base_work2location_openalex": [], "model.dbt_unlp.base_language_openalex": [], "model.dbt_unlp.base_author2affiliation_openalex": [], "model.dbt_unlp.norm_work_openalex": ["model.dbt_unlp.stg_work_openalex"], "model.dbt_unlp.base_author2institution_openalex": [], "model.dbt_unlp.base_author2topic_openalex": [], "model.dbt_unlp.base_cic_author_openalex": ["model.dbt_unlp.norm_author_openalex"], "model.dbt_unlp.base_work_openalex": ["model.dbt_unlp.norm_work_openalex"], "model.dbt_unlp.base_license_openalex": [], "model.dbt_unlp.base_work2authorship_openalex": [], "model.dbt_unlp.hub_resourcetype_coar": [], "model.dbt_unlp.sal_resourcetype_coar": ["model.dbt_unlp.dim_resourcetype"], "model.dbt_unlp.sat_resourcetype_coar": ["model.dbt_unlp.dim_resourcetype"], "model.dbt_unlp.hub_openaire_date": ["model.dbt_unlp.dim_date_openaire"], "model.dbt_unlp.hub_openaire_arxiv": ["model.dbt_unlp.dim_pid_openaire"], "model.dbt_unlp.hub_openaire_mag": ["model.dbt_unlp.dim_pid_openaire"], "model.dbt_unlp.hub_openaire_pmc": ["model.dbt_unlp.dim_pid_openaire"], "model.dbt_unlp.hub_openaire_handle": ["model.dbt_unlp.dim_pid_openaire"], "model.dbt_unlp.hub_openaire_pmid": ["model.dbt_unlp.dim_pid_openaire"], "model.dbt_unlp.hub_openaire_doi": ["model.dbt_unlp.dim_doi", "model.dbt_unlp.dim_pid_openaire"], "model.dbt_unlp.sal_openaire_researchproduct": ["model.dbt_unlp.dim_pid_openaire"], "model.dbt_unlp.lnk_openaire_researchproduct2date": ["model.dbt_unlp.dim_date_openaire"], "model.dbt_unlp.sat_openaire_researchproduct2date": ["model.dbt_unlp.dim_date_openaire"], "model.dbt_unlp.sat_openaire_researchproduct": ["model.dbt_unlp.fact_publication_openaire_search"], "model.dbt_unlp.hub_doi_dspacedb": ["model.dbt_unlp.dim_doi", "model.dbt_unlp.dim_doi_dspacedb"], "model.dbt_unlp.hub_type_dspacedb": ["model.dbt_unlp.dim_type_dspacedb"], "model.dbt_unlp.hub_handle_dspacedb": ["model.dbt_unlp.dim_handle_dspacedb"], "model.dbt_unlp.hub_item_dspacedb": [], "model.dbt_unlp.sal_item_dspacedb": ["model.dbt_unlp.fact_publication_dspacedb"], "model.dbt_unlp.link_item_type_dspacedb": ["model.dbt_unlp.fact_publication_dspacedb"], "model.dbt_unlp.sat_item_dspacedb": ["model.dbt_unlp.fact_publication_dspacedb"], "model.dbt_unlp.hub_mag_openalex": ["model.dbt_unlp.dim_pid_openalex"], "model.dbt_unlp.hub_pmcid_openalex": ["model.dbt_unlp.dim_pid_openalex"], "model.dbt_unlp.hub_doi_openalex": ["model.dbt_unlp.dim_doi", "model.dbt_unlp.dim_pid_openalex"], "model.dbt_unlp.hub_institution_openalex": ["model.dbt_unlp.dim_institution", "model.dbt_unlp.sal_institution_openalex"], "model.dbt_unlp.hub_worktype_openalex": ["model.dbt_unlp.dim_resourcetype", "model.dbt_unlp.dim_resourcetype_openalex"], "model.dbt_unlp.hub_pmid_openalex": ["model.dbt_unlp.dim_pid_openalex"], "model.dbt_unlp.hub_orcid_openalex": ["model.dbt_unlp.sal_author_openalex"], "model.dbt_unlp.hub_language_openalex": [], "model.dbt_unlp.hub_ror_openalex": ["model.dbt_unlp.sal_institution_openalex"], "model.dbt_unlp.hub_source_openalex": [], "model.dbt_unlp.hub_author_openalex": ["model.dbt_unlp.dim_person", "model.dbt_unlp.sal_author_openalex"], "model.dbt_unlp.hub_work_openalex": ["model.dbt_unlp.dim_author_openalex", "model.dbt_unlp.dim_pid_openalex"], "model.dbt_unlp.link_work2author_openalex": ["model.dbt_unlp.dim_author_openalex"], "model.dbt_unlp.link_work2worktype_openalex": ["model.dbt_unlp.fact_publication_openalex"], "model.dbt_unlp.link_institution2ror_openalex": ["model.dbt_unlp.sal_institution_openalex"], "model.dbt_unlp.link_work2language_openalex": [], "model.dbt_unlp.sal_institution_openalex": [], "model.dbt_unlp.sal_author_openalex": [], "model.dbt_unlp.link_author2orcid_openalex": ["model.dbt_unlp.sal_author_openalex"], "model.dbt_unlp.sal_work_openalex": ["model.dbt_unlp.dim_pid_openalex", "model.dbt_unlp.fact_publication_openalex"], "model.dbt_unlp.sat_institution_openalex": ["model.dbt_unlp.dim_institution"], "model.dbt_unlp.sat_source_openalex": [], "model.dbt_unlp.sat_work_openalex": ["model.dbt_unlp.fact_publication_openalex"], "model.dbt_unlp.sat_author_openalex": ["model.dbt_unlp.dim_person"], "model.dbt_unlp.dim_doi": ["model.dbt_unlp.fact_publication"], "model.dbt_unlp.dim_resourcetype": [], "model.dbt_unlp.dim_person": [], "model.dbt_unlp.dim_source": [], "model.dbt_unlp.dim_date": [], "model.dbt_unlp.dim_institution": [], "model.dbt_unlp.dim_type_dspacedb": ["model.dbt_unlp.fact_publication_dspacedb"], "model.dbt_unlp.dim_handle_dspacedb": ["model.dbt_unlp.fact_publication_dspacedb"], "model.dbt_unlp.dim_doi_dspacedb": ["model.dbt_unlp.fact_publication_dspacedb"], "model.dbt_unlp.fact_publication_dspacedb": ["model.dbt_unlp.fact_publication"], "model.dbt_unlp.dim_resourcetype_openalex": ["model.dbt_unlp.fact_publication_openalex"], "model.dbt_unlp.dim_author_openalex": [], "model.dbt_unlp.dim_pid_openalex": ["model.dbt_unlp.fact_publication_openalex"], "model.dbt_unlp.fact_publication_openalex": ["model.dbt_unlp.fact_publication"], "model.dbt_unlp.stg_resourcetype_coar2worktype_openalex": ["model.dbt_unlp.sal_resourcetype_coar"], "model.dbt_unlp.stg_resourcetype_coar": ["model.dbt_unlp.hub_resourcetype_coar", "model.dbt_unlp.sat_resourcetype_coar"], "model.dbt_unlp.stg_openaire_researchproduct": ["model.dbt_unlp.sat_openaire_researchproduct"], "model.dbt_unlp.stg_researchproduct2date_openaire": ["model.dbt_unlp.hub_openaire_date", "model.dbt_unlp.lnk_openaire_researchproduct2date", "model.dbt_unlp.sat_openaire_researchproduct2date"], "model.dbt_unlp.stg_researchproduct2pid_openaire": ["model.dbt_unlp.hub_openaire_arxiv", "model.dbt_unlp.hub_openaire_doi", "model.dbt_unlp.hub_openaire_handle", "model.dbt_unlp.hub_openaire_mag", "model.dbt_unlp.hub_openaire_pmc", "model.dbt_unlp.hub_openaire_pmid", "model.dbt_unlp.hub_openaire_researchproduct", "model.dbt_unlp.sal_openaire_researchproduct"], "model.dbt_unlp.stg_item_dspacedb": ["model.dbt_unlp.hub_doi_dspacedb", "model.dbt_unlp.hub_handle_dspacedb", "model.dbt_unlp.hub_item_dspacedb", "model.dbt_unlp.hub_type_dspacedb", "model.dbt_unlp.link_item_type_dspacedb", "model.dbt_unlp.sal_item_dspacedb", "model.dbt_unlp.sat_item_dspacedb"], "model.dbt_unlp.stg_language_openalex": [], "model.dbt_unlp.stg_work_openalex": ["model.dbt_unlp.hub_doi_openalex", "model.dbt_unlp.hub_language_openalex", "model.dbt_unlp.hub_mag_openalex", "model.dbt_unlp.hub_pmcid_openalex", "model.dbt_unlp.hub_pmid_openalex", "model.dbt_unlp.hub_work_openalex", "model.dbt_unlp.link_work2language_openalex", "model.dbt_unlp.link_work2worktype_openalex", "model.dbt_unlp.sal_work_openalex", "model.dbt_unlp.sat_work_openalex"], "model.dbt_unlp.stg_work2location_openalex": ["model.dbt_unlp.hub_source_openalex"], "model.dbt_unlp.stg_worktype_openalex": ["model.dbt_unlp.hub_worktype_openalex"], "model.dbt_unlp.stg_work2authorship_openalex": ["model.dbt_unlp.hub_author_openalex", "model.dbt_unlp.hub_institution_openalex", "model.dbt_unlp.hub_orcid_openalex", "model.dbt_unlp.hub_ror_openalex", "model.dbt_unlp.link_author2orcid_openalex", "model.dbt_unlp.link_institution2ror_openalex", "model.dbt_unlp.link_work2author_openalex", "model.dbt_unlp.sat_author_openalex", "model.dbt_unlp.sat_institution_openalex"], "model.dbt_unlp.stg_author_openalex": [], "model.dbt_unlp.stg_license_openalex": [], "seed.dbt_unlp.seed_accessright_coar": [], "seed.dbt_unlp.seed_resourcetype_coar": ["model.dbt_unlp.raw_resourcetype_coar"], "seed.dbt_unlp.seed_resourcetype_coar2worktype_openalex": ["model.dbt_unlp.map_resourcetype_coar2worktype_openalex"], "seed.dbt_unlp.seed_dspacedb": [], "model.dbt_unlp.dim_date_issued_openaire": [], "model.dbt_unlp.dim_date_openaire": ["model.dbt_unlp.dim_date_issued_openaire"], "model.dbt_unlp.fact_publication": [], "model.dbt_unlp.fact_publication_openaire_search": ["model.dbt_unlp.fact_publication"], "model.dbt_unlp.dim_pid_openaire": ["model.dbt_unlp.fact_publication_openaire_search"], "model.dbt_unlp.sat_openaire_graph_researchproduct": ["model.dbt_unlp.fact_publication_openaire_graph"], "model.dbt_unlp.stg_openaire_graph_researchproduct": ["model.dbt_unlp.hub_openaire_graph_researchproduct", "model.dbt_unlp.sat_openaire_graph_researchproduct"], "model.dbt_unlp.openaire_graph_researchproduct": ["model.dbt_unlp.stg_openaire_graph_researchproduct"], "model.dbt_unlp.openaire_graph_researchproduct2author": [], "model.dbt_unlp.hub_openaire_graph_originalid": [], "model.dbt_unlp.link_openaire_graph_researchproduct2originalid": [], "model.dbt_unlp.openaire_graph_researchproduct2subject": [], "model.dbt_unlp.hub_openaire_researchproduct": ["model.dbt_unlp.dim_date_openaire", "model.dbt_unlp.dim_pid_openaire", "model.dbt_unlp.fact_publication_openaire_search"], "model.dbt_unlp.openaire_researchproduct2measure": [], "model.dbt_unlp.openaire_researchproduct": ["model.dbt_unlp.stg_openaire_researchproduct"], "model.dbt_unlp.openaire_graph_researchproduct2originalid": ["model.dbt_unlp.stg_openaire_graph_researchproduct2originalid"], "model.dbt_unlp.stg_openaire_graph_researchproduct2originalid": ["model.dbt_unlp.hub_openaire_graph_originalid", "model.dbt_unlp.link_openaire_graph_researchproduct2originalid"], "model.dbt_unlp.hub_openaire_graph_researchproduct": ["model.dbt_unlp.fact_publication_openaire_graph"], "model.dbt_unlp.fact_publication_openaire_graph": [], "source.dbt_unlp.openaire.researchproduct": ["model.dbt_unlp.openaire_researchproduct"], "source.dbt_unlp.openaire.researchproduct2creator": ["model.dbt_unlp.base_openaire_researchproduct2creator"], "source.dbt_unlp.openaire.researchproduct2measure": ["model.dbt_unlp.openaire_researchproduct2measure"], "source.dbt_unlp.openaire.researchproduct2pid": ["model.dbt_unlp.base_openaire_researchproduct2pid"], "source.dbt_unlp.openaire.researchproduct2relevantdate": ["model.dbt_unlp.base_openaire_researchproduct2relevantdate"], "source.dbt_unlp.openaire.researchproduct2subject": ["model.dbt_unlp.base_openaire_researchproduct2subject"], "source.dbt_unlp.dspacedb.bitstream": ["model.dbt_unlp.base_bitstream_dspacedb"], "source.dbt_unlp.dspacedb.bundle": ["model.dbt_unlp.base_bundle_dspacedb"], "source.dbt_unlp.dspacedb.bundle2bitstream": ["model.dbt_unlp.base_bundle2bitstream_dspacedb"], "source.dbt_unlp.dspacedb.collection": ["model.dbt_unlp.base_collection_dspacedb"], "source.dbt_unlp.dspacedb.collection2item": ["model.dbt_unlp.base_collection2item_dspacedb"], "source.dbt_unlp.dspacedb.communities2item": ["model.dbt_unlp.base_communities2item_dspacedb", "model.dbt_unlp.base_community2item_dspacedb"], "source.dbt_unlp.dspacedb.community": ["model.dbt_unlp.base_community_dspacedb"], "source.dbt_unlp.dspacedb.community2collection": ["model.dbt_unlp.base_community2collection_dspacedb"], "source.dbt_unlp.dspacedb.community2community": ["model.dbt_unlp.base_community2community_dspacedb"], "source.dbt_unlp.dspacedb.community2item": [], "source.dbt_unlp.dspacedb.handle": ["model.dbt_unlp.base_handle_dspacedb"], "source.dbt_unlp.dspacedb.doi": ["model.dbt_unlp.base_doi_dspacedb"], "source.dbt_unlp.dspacedb.item": ["model.dbt_unlp.base_item_dspacedb", "model.dbt_unlp.mid_item_metadatavalue_dspacedb", "model.dbt_unlp.norm_item_dspacedb"], "source.dbt_unlp.dspacedb.item2bundle": ["model.dbt_unlp.base_item2bundle_dspacedb"], "source.dbt_unlp.dspacedb.metadatafieldregistry": ["model.dbt_unlp.base_metadatafieldregistry_dspacedb", "model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "source.dbt_unlp.dspacedb.metadataschemaregistry": ["model.dbt_unlp.base_metadataschemaregistry_dspacedb", "model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "source.dbt_unlp.dspacedb.metadatavalue": ["model.dbt_unlp.base_metadatavalue_dspacedb", "model.dbt_unlp.mid_item_metadatavalue_dspacedb"], "source.dbt_unlp.openalex.author": ["model.dbt_unlp.base_cic_author_openalex"], "source.dbt_unlp.openalex.author2affiliation": ["model.dbt_unlp.base_author2affiliation_openalex"], "source.dbt_unlp.openalex.author2institution": ["model.dbt_unlp.base_author2institution_openalex"], "source.dbt_unlp.openalex.author2topic": ["model.dbt_unlp.base_author2topic_openalex"], "source.dbt_unlp.openalex.language": ["model.dbt_unlp.base_language_openalex", "model.dbt_unlp.stg_language_openalex"], "source.dbt_unlp.openalex.license": ["model.dbt_unlp.base_license_openalex", "model.dbt_unlp.stg_license_openalex"], "source.dbt_unlp.openalex.work": ["model.dbt_unlp.base_work_openalex"], "source.dbt_unlp.openalex.work2authorship": ["model.dbt_unlp.base_work2authorship_openalex", "model.dbt_unlp.stg_work2authorship_openalex"], "source.dbt_unlp.openalex.work2concept": [], "source.dbt_unlp.openalex.work2corresponding_author_ids": [], "source.dbt_unlp.openalex.work2primary_location": [], "source.dbt_unlp.openalex.work2primary_topics": [], "source.dbt_unlp.openalex.work2referenced_works": [], "source.dbt_unlp.openalex.work2location": ["model.dbt_unlp.base_work2location_openalex", "model.dbt_unlp.stg_work2location_openalex"], "source.dbt_unlp.openalex.worktype": ["model.dbt_unlp.stg_worktype_openalex"], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct": ["model.dbt_unlp.openaire_graph_researchproduct"], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2author": ["model.dbt_unlp.openaire_graph_researchproduct2author"], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2originalId": ["model.dbt_unlp.openaire_graph_researchproduct2originalid"], "source.dbt_unlp.openaire_graph_researchproduct.researchproduct2subject": ["model.dbt_unlp.openaire_graph_researchproduct2subject"]}, "group_map": {}, "saved_queries": {}, "semantic_models": {}}